
c:/Users/deedp/Documents/IOT/SmartGlove/MPU6050Test/target/3.2.0/argon/MPU6050Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000033d0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b73f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e634  000b73f4  0001e634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000014c  2003e6a4  2003e6a4  0002e6a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b7464  000b7464  00027464  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b748c  000b748c  0002748c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fb2f3  00000000  00000000  00027490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000106ec  00000000  00000000  00122783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0003009f  00000000  00000000  00132e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000023d8  00000000  00000000  00162f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00008d70  00000000  00000000  001652e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003685f  00000000  00000000  0016e056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000360c4  00000000  00000000  001a48b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00125c03  00000000  00000000  001da979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006898  00000000  00000000  0030057c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 ffb5 	bl	b6fa0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 ffbd 	bl	b6fbc <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e634 	.word	0x2003e634
   b404c:	000b73f4 	.word	0x000b73f4
   b4050:	2003e6a4 	.word	0x2003e6a4
   b4054:	2003e6a4 	.word	0x2003e6a4
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 fef7 	bl	b4e54 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b73cc 	.word	0x000b73cc
   b4080:	000b73f0 	.word	0x000b73f0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b822 	b.w	b40cc <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f82b 	bl	b40e4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 be97 	b.w	b4dc4 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 bd03 	b.w	b4aa0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bd09 	b.w	b4ab0 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f000 fdcd 	bl	b4c5a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <setup>:

int lastTimeFacingUp;

MPU6050 myMPU;

void setup() {
   b40cc:	b508      	push	{r3, lr}
    myMPU.begin();
   b40ce:	4804      	ldr	r0, [pc, #16]	; (b40e0 <setup+0x14>)
   b40d0:	f000 f90c 	bl	b42ec <_ZN7MPU60505beginEv>
    myMPU.setGyroscopeRange(2);
}
   b40d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    myMPU.setGyroscopeRange(2);
   b40d8:	4801      	ldr	r0, [pc, #4]	; (b40e0 <setup+0x14>)
   b40da:	2102      	movs	r1, #2
   b40dc:	f000 b92a 	b.w	b4334 <_ZN7MPU605017setGyroscopeRangeEh>
   b40e0:	2003e6b0 	.word	0x2003e6b0

000b40e4 <loop>:

void loop() {
   b40e4:	b510      	push	{r4, lr}
   b40e6:	ed2d 8b02 	vpush	{d8}
    Vector3<float> gravityData = myMPU.getGravityData();
   b40ea:	4821      	ldr	r0, [pc, #132]	; (b4170 <loop+0x8c>)
void loop() {
   b40ec:	b08c      	sub	sp, #48	; 0x30
    Vector3<float> gravityData = myMPU.getGravityData();
   b40ee:	f000 fa3b 	bl	b4568 <_ZN7MPU605014getGravityDataEv>
    Vector3<float> rotationData = myMPU.getRotationData();
   b40f2:	481f      	ldr	r0, [pc, #124]	; (b4170 <loop+0x8c>)
   b40f4:	f000 fafe 	bl	b46f4 <_ZN7MPU605015getRotationDataEv>

    if (rotationData.X > 400) {
   b40f8:	eddf 7a1e 	vldr	s15, [pc, #120]	; b4174 <loop+0x90>
    Vector3<float> rotationData = myMPU.getRotationData();
   b40fc:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
    if (rotationData.X > 400) {
   b4100:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b4104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Vector3<float> rotationData = myMPU.getRotationData();
   b4108:	eeb0 8a40 	vmov.f32	s16, s0
   b410c:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
    if (rotationData.X > 400) {
   b4110:	dd23      	ble.n	b415a <loop+0x76>
        Serial.printf("Rotating +X\n");
   b4112:	f000 ffa3 	bl	b505c <_Z16_fetch_usbserialv>
   b4116:	4918      	ldr	r1, [pc, #96]	; (b4178 <loop+0x94>)
    } else if (rotationData.X < -400) {
        Serial.printf("Rotating -X\n");
   b4118:	f7ff ffc9 	bl	b40ae <_ZN5Print6printfEPKcz>
    }

    // Serial.printf("GX: %04.2f    GY: %04.2f    GZ: %04.2f   ", gravityData.X, gravityData.Y, gravityData.Z);
    Serial.printf("RX: %04.2f    RY: %04.2f    RZ: %04.2f\n", rotationData.X, rotationData.Y, rotationData.Z);
   b411c:	f000 ff9e 	bl	b505c <_Z16_fetch_usbserialv>
   b4120:	4604      	mov	r4, r0
   b4122:	ee18 0a10 	vmov	r0, s16
   b4126:	f002 fbdd 	bl	b68e4 <__aeabi_f2d>
   b412a:	4602      	mov	r2, r0
   b412c:	460b      	mov	r3, r1
   b412e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b4130:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b4134:	f002 fbd6 	bl	b68e4 <__aeabi_f2d>
   b4138:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b413c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b413e:	f002 fbd1 	bl	b68e4 <__aeabi_f2d>
   b4142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4146:	e9cd 0100 	strd	r0, r1, [sp]
   b414a:	490c      	ldr	r1, [pc, #48]	; (b417c <loop+0x98>)
   b414c:	4620      	mov	r0, r4
   b414e:	f7ff ffae 	bl	b40ae <_ZN5Print6printfEPKcz>
   b4152:	b00c      	add	sp, #48	; 0x30
   b4154:	ecbd 8b02 	vpop	{d8}
   b4158:	bd10      	pop	{r4, pc}
    } else if (rotationData.X < -400) {
   b415a:	eddf 7a09 	vldr	s15, [pc, #36]	; b4180 <loop+0x9c>
   b415e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b4162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4166:	d5d9      	bpl.n	b411c <loop+0x38>
        Serial.printf("Rotating -X\n");
   b4168:	f000 ff78 	bl	b505c <_Z16_fetch_usbserialv>
   b416c:	4905      	ldr	r1, [pc, #20]	; (b4184 <loop+0xa0>)
   b416e:	e7d3      	b.n	b4118 <loop+0x34>
   b4170:	2003e6b0 	.word	0x2003e6b0
   b4174:	43c80000 	.word	0x43c80000
   b4178:	000b7118 	.word	0x000b7118
   b417c:	000b7132 	.word	0x000b7132
   b4180:	c3c80000 	.word	0xc3c80000
   b4184:	000b7125 	.word	0x000b7125

000b4188 <_GLOBAL__sub_I_SystemMode>:
   b4188:	b508      	push	{r3, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b418a:	4b08      	ldr	r3, [pc, #32]	; (b41ac <_GLOBAL__sub_I_SystemMode+0x24>)
   b418c:	2200      	movs	r2, #0
   b418e:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4192:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4196:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4198:	2002      	movs	r0, #2
   b419a:	f000 fbfd 	bl	b4998 <set_system_mode>
   b419e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    void loadPowerManagement1Config();
    void savePowerManagement1Config();

public:
    MPU6050() : MPU6050(MPU6050_ADDRESS_GROUND) {}
   b41a2:	4803      	ldr	r0, [pc, #12]	; (b41b0 <_GLOBAL__sub_I_SystemMode+0x28>)
   b41a4:	2168      	movs	r1, #104	; 0x68
   b41a6:	f000 b89f 	b.w	b42e8 <_ZN7MPU6050C1Eh>
   b41aa:	bf00      	nop
   b41ac:	2003e6a4 	.word	0x2003e6a4
   b41b0:	2003e6b0 	.word	0x2003e6b0

000b41b4 <_ZN7MPU605019loadGyroscopeConfigEv>:
    loadAccelerometerConfig();
    loadPowerManagement1Config();
    loadInterruptEnableConfig();
}

void MPU6050::loadGyroscopeConfig() {
   b41b4:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, GYRO_CONFIG);
   b41b6:	221b      	movs	r2, #27
void MPU6050::loadGyroscopeConfig() {
   b41b8:	4604      	mov	r4, r0
    WireReader reader(_address, GYRO_CONFIG);
   b41ba:	7801      	ldrb	r1, [r0, #0]
   b41bc:	2301      	movs	r3, #1
   b41be:	a801      	add	r0, sp, #4
   b41c0:	f000 fad3 	bl	b476a <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b41c4:	a801      	add	r0, sp, #4
   b41c6:	f000 faef 	bl	b47a8 <_ZN10WireReader4readEv>

    XG_ST = (cfg & 0b10000000) >> 7;
   b41ca:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   b41ce:	70a3      	strb	r3, [r4, #2]
    YG_ST = (cfg & 0b01000000) >> 6;
   b41d0:	f3c0 1380 	ubfx	r3, r0, #6, #1
   b41d4:	70e3      	strb	r3, [r4, #3]
    ZG_ST = (cfg & 0b00100000) >> 5;
   b41d6:	f3c0 1340 	ubfx	r3, r0, #5, #1
   b41da:	7123      	strb	r3, [r4, #4]
    FS_SEL = (cfg & 0b00011000) >> 3;
   b41dc:	f3c0 03c1 	ubfx	r3, r0, #3, #2
   b41e0:	7163      	strb	r3, [r4, #5]
    WireReader reader(_address, GYRO_CONFIG);
   b41e2:	a801      	add	r0, sp, #4
   b41e4:	f000 faad 	bl	b4742 <_ZN10WireReaderD1Ev>
}
   b41e8:	b002      	add	sp, #8
   b41ea:	bd10      	pop	{r4, pc}

000b41ec <_ZN7MPU605019saveGyroscopeConfigEv>:

void MPU6050::saveGyroscopeConfig() {
   b41ec:	b513      	push	{r0, r1, r4, lr}
    byte cfg = (XG_ST << 7) |
               (YG_ST << 6) |
   b41ee:	78c4      	ldrb	r4, [r0, #3]
    byte cfg = (XG_ST << 7) |
   b41f0:	7883      	ldrb	r3, [r0, #2]
               (ZG_ST << 5) |
               (FS_SEL << 3);
    WireWriter writer(_address, GYRO_CONFIG);
   b41f2:	7801      	ldrb	r1, [r0, #0]
               (YG_ST << 6) |
   b41f4:	01a4      	lsls	r4, r4, #6
    byte cfg = (XG_ST << 7) |
   b41f6:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
               (ZG_ST << 5) |
   b41fa:	7903      	ldrb	r3, [r0, #4]
               (YG_ST << 6) |
   b41fc:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
               (FS_SEL << 3);
   b4200:	7943      	ldrb	r3, [r0, #5]
               (ZG_ST << 5) |
   b4202:	ea44 04c3 	orr.w	r4, r4, r3, lsl #3
    WireWriter writer(_address, GYRO_CONFIG);
   b4206:	221b      	movs	r2, #27
    byte cfg = (XG_ST << 7) |
   b4208:	b2e4      	uxtb	r4, r4
    WireWriter writer(_address, GYRO_CONFIG);
   b420a:	a801      	add	r0, sp, #4
   b420c:	f000 fa87 	bl	b471e <_ZN10WireWriterC1Ehh>
    writer.write(cfg);
   b4210:	4621      	mov	r1, r4
   b4212:	a801      	add	r0, sp, #4
   b4214:	f000 fa9e 	bl	b4754 <_ZN10WireWriter5writeEh>
    WireWriter writer(_address, GYRO_CONFIG);
   b4218:	a801      	add	r0, sp, #4
   b421a:	f000 fa92 	bl	b4742 <_ZN10WireReaderD1Ev>
}
   b421e:	b002      	add	sp, #8
   b4220:	bd10      	pop	{r4, pc}

000b4222 <_ZN7MPU605023loadAccelerometerConfigEv>:

void MPU6050::loadAccelerometerConfig() {
   b4222:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, ACCEL_CONFIG);
   b4224:	221c      	movs	r2, #28
void MPU6050::loadAccelerometerConfig() {
   b4226:	4604      	mov	r4, r0
    WireReader reader(_address, ACCEL_CONFIG);
   b4228:	7801      	ldrb	r1, [r0, #0]
   b422a:	2301      	movs	r3, #1
   b422c:	a801      	add	r0, sp, #4
   b422e:	f000 fa9c 	bl	b476a <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b4232:	a801      	add	r0, sp, #4
   b4234:	f000 fab8 	bl	b47a8 <_ZN10WireReader4readEv>

    XA_ST = (cfg & 0b10000000) >> 7;
   b4238:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   b423c:	71a3      	strb	r3, [r4, #6]
    YA_ST = (cfg & 0b01000000) >> 6;
   b423e:	f3c0 1380 	ubfx	r3, r0, #6, #1
   b4242:	71e3      	strb	r3, [r4, #7]
    ZA_ST = (cfg & 0b00100000) >> 5;
   b4244:	f3c0 1340 	ubfx	r3, r0, #5, #1
   b4248:	7223      	strb	r3, [r4, #8]
    AFS_SEL = (cfg & 0b00011000) >> 3;
   b424a:	f3c0 03c1 	ubfx	r3, r0, #3, #2
   b424e:	7263      	strb	r3, [r4, #9]
    WireReader reader(_address, ACCEL_CONFIG);
   b4250:	a801      	add	r0, sp, #4
   b4252:	f000 fa76 	bl	b4742 <_ZN10WireReaderD1Ev>
}
   b4256:	b002      	add	sp, #8
   b4258:	bd10      	pop	{r4, pc}

000b425a <_ZN7MPU605025loadInterruptEnableConfigEv>:
               (AFS_SEL << 3);
    WireWriter writer(_address, ACCEL_CONFIG);
    writer.write(cfg);
}

void MPU6050::loadInterruptEnableConfig() {
   b425a:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, INT_ENABLE);
   b425c:	2238      	movs	r2, #56	; 0x38
   b425e:	7801      	ldrb	r1, [r0, #0]
void MPU6050::loadInterruptEnableConfig() {
   b4260:	4604      	mov	r4, r0
    WireReader reader(_address, INT_ENABLE);
   b4262:	2301      	movs	r3, #1
   b4264:	a801      	add	r0, sp, #4
   b4266:	f000 fa80 	bl	b476a <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b426a:	a801      	add	r0, sp, #4
   b426c:	f000 fa9c 	bl	b47a8 <_ZN10WireReader4readEv>
    FIFO_OFLOW_EN = (cfg & 0b00010000) >> 4;
   b4270:	f3c0 1300 	ubfx	r3, r0, #4, #1
   b4274:	72a3      	strb	r3, [r4, #10]
    I2C_MST_INT_EN = (cfg & 0b00001000) >> 3;
   b4276:	f3c0 03c0 	ubfx	r3, r0, #3, #1
   b427a:	72e3      	strb	r3, [r4, #11]
    DATA_RDY_EN = (cfg & 0b00000001);
   b427c:	f000 0301 	and.w	r3, r0, #1
   b4280:	7323      	strb	r3, [r4, #12]
    WireReader reader(_address, INT_ENABLE);
   b4282:	a801      	add	r0, sp, #4
   b4284:	f000 fa5d 	bl	b4742 <_ZN10WireReaderD1Ev>
}
   b4288:	b002      	add	sp, #8
   b428a:	bd10      	pop	{r4, pc}

000b428c <_ZN7MPU605026loadPowerManagement1ConfigEv>:
               (DATA_RDY_EN);
    WireWriter writer(_address, INT_ENABLE);
    writer.write(cfg);
}

void MPU6050::loadPowerManagement1Config() {
   b428c:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, PWR_MGMT_1);
   b428e:	226b      	movs	r2, #107	; 0x6b
void MPU6050::loadPowerManagement1Config() {
   b4290:	4604      	mov	r4, r0
    WireReader reader(_address, PWR_MGMT_1);
   b4292:	7801      	ldrb	r1, [r0, #0]
   b4294:	2301      	movs	r3, #1
   b4296:	a801      	add	r0, sp, #4
   b4298:	f000 fa67 	bl	b476a <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b429c:	a801      	add	r0, sp, #4
   b429e:	f000 fa83 	bl	b47a8 <_ZN10WireReader4readEv>

    DEVICE_RESET = (cfg & 0b10000000) >> 7;
   b42a2:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   b42a6:	7363      	strb	r3, [r4, #13]
    SLEEP = (cfg & 0b01000000) >> 6;
   b42a8:	f3c0 1380 	ubfx	r3, r0, #6, #1
   b42ac:	73a3      	strb	r3, [r4, #14]
    CYCLE = (cfg & 0b00100000) >> 5;
   b42ae:	f3c0 1340 	ubfx	r3, r0, #5, #1
   b42b2:	73e3      	strb	r3, [r4, #15]
    TEMP_DIS = (cfg & 0b00001000) >> 3;
   b42b4:	f3c0 03c0 	ubfx	r3, r0, #3, #1
   b42b8:	7423      	strb	r3, [r4, #16]
    CLKSEL = (cfg & 0b00000111);
   b42ba:	f000 0307 	and.w	r3, r0, #7
   b42be:	7463      	strb	r3, [r4, #17]
    WireReader reader(_address, PWR_MGMT_1);
   b42c0:	a801      	add	r0, sp, #4
   b42c2:	f000 fa3e 	bl	b4742 <_ZN10WireReaderD1Ev>
}
   b42c6:	b002      	add	sp, #8
   b42c8:	bd10      	pop	{r4, pc}

000b42ca <_ZN7MPU605013loadAllConfigEv>:
void MPU6050::loadAllConfig() {
   b42ca:	b510      	push	{r4, lr}
   b42cc:	4604      	mov	r4, r0
    loadGyroscopeConfig();
   b42ce:	f7ff ff71 	bl	b41b4 <_ZN7MPU605019loadGyroscopeConfigEv>
    loadAccelerometerConfig();
   b42d2:	4620      	mov	r0, r4
   b42d4:	f7ff ffa5 	bl	b4222 <_ZN7MPU605023loadAccelerometerConfigEv>
    loadPowerManagement1Config();
   b42d8:	4620      	mov	r0, r4
   b42da:	f7ff ffd7 	bl	b428c <_ZN7MPU605026loadPowerManagement1ConfigEv>
    loadInterruptEnableConfig();
   b42de:	4620      	mov	r0, r4
}
   b42e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    loadInterruptEnableConfig();
   b42e4:	f7ff bfb9 	b.w	b425a <_ZN7MPU605025loadInterruptEnableConfigEv>

000b42e8 <_ZN7MPU6050C1Eh>:
}

// Public Functions

MPU6050::MPU6050(byte address) {
    _address = address;
   b42e8:	7001      	strb	r1, [r0, #0]
}
   b42ea:	4770      	bx	lr

000b42ec <_ZN7MPU60505beginEv>:

void MPU6050::begin() {
   b42ec:	b513      	push	{r0, r1, r4, lr}
   b42ee:	4604      	mov	r4, r0
    if (!Wire.isEnabled()) {
   b42f0:	f001 f8e8 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b42f4:	f000 ff9f 	bl	b5236 <_ZN7TwoWire9isEnabledEv>
   b42f8:	b940      	cbnz	r0, b430c <_ZN7MPU60505beginEv+0x20>
        Serial.printf("MPU6050 > Enabling Wire\n");
   b42fa:	f000 feaf 	bl	b505c <_Z16_fetch_usbserialv>
   b42fe:	490c      	ldr	r1, [pc, #48]	; (b4330 <_ZN7MPU60505beginEv+0x44>)
   b4300:	f7ff fed5 	bl	b40ae <_ZN5Print6printfEPKcz>
        Wire.begin();
   b4304:	f001 f8de 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b4308:	f000 ff5e 	bl	b51c8 <_ZN7TwoWire5beginEv>
    }

    loadAllConfig();
   b430c:	4620      	mov	r0, r4
   b430e:	f7ff ffdc 	bl	b42ca <_ZN7MPU605013loadAllConfigEv>

    {
        WireWriter writer(_address, PWR_MGMT_1);
   b4312:	226b      	movs	r2, #107	; 0x6b
   b4314:	7821      	ldrb	r1, [r4, #0]
   b4316:	a801      	add	r0, sp, #4
   b4318:	f000 fa01 	bl	b471e <_ZN10WireWriterC1Ehh>
        writer.write(0x00);
   b431c:	2100      	movs	r1, #0
   b431e:	a801      	add	r0, sp, #4
   b4320:	f000 fa18 	bl	b4754 <_ZN10WireWriter5writeEh>
        WireWriter writer(_address, PWR_MGMT_1);
   b4324:	a801      	add	r0, sp, #4
   b4326:	f000 fa0c 	bl	b4742 <_ZN10WireReaderD1Ev>
    }
}
   b432a:	b002      	add	sp, #8
   b432c:	bd10      	pop	{r4, pc}
   b432e:	bf00      	nop
   b4330:	000b715a 	.word	0x000b715a

000b4334 <_ZN7MPU605017setGyroscopeRangeEh>:

void MPU6050::setGyroscopeRange(byte newRange) {
    if (newRange < 0 || newRange > 3) {
   b4334:	2903      	cmp	r1, #3
void MPU6050::setGyroscopeRange(byte newRange) {
   b4336:	b510      	push	{r4, lr}
   b4338:	460c      	mov	r4, r1
    if (newRange < 0 || newRange > 3) {
   b433a:	d906      	bls.n	b434a <_ZN7MPU605017setGyroscopeRangeEh+0x16>
        Serial.printf("MPU6050 > Expected gyroscope range between 0 and 3, got %d\n", newRange);
   b433c:	f000 fe8e 	bl	b505c <_Z16_fetch_usbserialv>
   b4340:	4904      	ldr	r1, [pc, #16]	; (b4354 <_ZN7MPU605017setGyroscopeRangeEh+0x20>)
   b4342:	4622      	mov	r2, r4
   b4344:	f7ff feb3 	bl	b40ae <_ZN5Print6printfEPKcz>
    }

    FS_SEL = newRange;

    saveGyroscopeConfig();
}
   b4348:	bd10      	pop	{r4, pc}
    FS_SEL = newRange;
   b434a:	7141      	strb	r1, [r0, #5]
}
   b434c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    saveGyroscopeConfig();
   b4350:	f7ff bf4c 	b.w	b41ec <_ZN7MPU605019saveGyroscopeConfigEv>
   b4354:	000b7173 	.word	0x000b7173

000b4358 <_ZN7MPU605019getAccelerationDataEPsS0_S0_>:
void MPU6050::setDataReadyInterrupt(bool status) {
    DATA_RDY_EN = status;
    saveInterruptEnableConfig();
}

void MPU6050::getAccelerationData(int16_t *x, int16_t *y, int16_t *z) {
   b4358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b435a:	460e      	mov	r6, r1
   b435c:	4615      	mov	r5, r2
    WireReader reader(_address, ACCEL_XOUT_H, 6);
   b435e:	7801      	ldrb	r1, [r0, #0]
   b4360:	223b      	movs	r2, #59	; 0x3b
void MPU6050::getAccelerationData(int16_t *x, int16_t *y, int16_t *z) {
   b4362:	461c      	mov	r4, r3
    WireReader reader(_address, ACCEL_XOUT_H, 6);
   b4364:	a801      	add	r0, sp, #4
   b4366:	2306      	movs	r3, #6
   b4368:	f000 f9ff 	bl	b476a <_ZN10WireReaderC1Ehhh>

    { // reads in the X val
        byte x_h = reader.read();
   b436c:	a801      	add	r0, sp, #4
   b436e:	f000 fa1b 	bl	b47a8 <_ZN10WireReader4readEv>
   b4372:	4607      	mov	r7, r0
        byte x_l = reader.read();
   b4374:	a801      	add	r0, sp, #4
   b4376:	f000 fa17 	bl	b47a8 <_ZN10WireReader4readEv>
        *x = x_h << 8 | x_l;
   b437a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   b437e:	8030      	strh	r0, [r6, #0]
    }

    { // Reads in the Y val
        byte y_h = reader.read();
   b4380:	a801      	add	r0, sp, #4
   b4382:	f000 fa11 	bl	b47a8 <_ZN10WireReader4readEv>
   b4386:	4606      	mov	r6, r0
        byte y_l = reader.read();
   b4388:	a801      	add	r0, sp, #4
   b438a:	f000 fa0d 	bl	b47a8 <_ZN10WireReader4readEv>
        *y = y_h << 8 | y_l;
   b438e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   b4392:	8028      	strh	r0, [r5, #0]
    }

    { // Reads in the Z val
        byte z_h = reader.read();
   b4394:	a801      	add	r0, sp, #4
   b4396:	f000 fa07 	bl	b47a8 <_ZN10WireReader4readEv>
   b439a:	4605      	mov	r5, r0
        byte z_l = reader.read();
   b439c:	a801      	add	r0, sp, #4
   b439e:	f000 fa03 	bl	b47a8 <_ZN10WireReader4readEv>
        *z = z_h << 8 | z_l;
   b43a2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b43a6:	8020      	strh	r0, [r4, #0]
    WireReader reader(_address, ACCEL_XOUT_H, 6);
   b43a8:	a801      	add	r0, sp, #4
   b43aa:	f000 f9ca 	bl	b4742 <_ZN10WireReaderD1Ev>
    }
}
   b43ae:	b003      	add	sp, #12
   b43b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b43b2 <_ZN7MPU605016getGyroscopeDataEPsS0_S0_>:
    Vector3<int16_t> data;
    getAccelerationData(&data.X, &data.Y, &data.Z);
    return data;
}

void MPU6050::getGyroscopeData(int16_t *x, int16_t *y, int16_t *z) {
   b43b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b43b4:	460e      	mov	r6, r1
   b43b6:	4615      	mov	r5, r2
    WireReader reader(_address, GYRO_XOUT_H, 6);
   b43b8:	7801      	ldrb	r1, [r0, #0]
   b43ba:	2243      	movs	r2, #67	; 0x43
void MPU6050::getGyroscopeData(int16_t *x, int16_t *y, int16_t *z) {
   b43bc:	461c      	mov	r4, r3
    WireReader reader(_address, GYRO_XOUT_H, 6);
   b43be:	a801      	add	r0, sp, #4
   b43c0:	2306      	movs	r3, #6
   b43c2:	f000 f9d2 	bl	b476a <_ZN10WireReaderC1Ehhh>

    { // reads in the X val
        byte x_h = reader.read();
   b43c6:	a801      	add	r0, sp, #4
   b43c8:	f000 f9ee 	bl	b47a8 <_ZN10WireReader4readEv>
   b43cc:	4607      	mov	r7, r0
        byte x_l = reader.read();
   b43ce:	a801      	add	r0, sp, #4
   b43d0:	f000 f9ea 	bl	b47a8 <_ZN10WireReader4readEv>
        *x = x_h << 8 | x_l;
   b43d4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   b43d8:	8030      	strh	r0, [r6, #0]
    }

    { // Reads in the Y val
        byte y_h = reader.read();
   b43da:	a801      	add	r0, sp, #4
   b43dc:	f000 f9e4 	bl	b47a8 <_ZN10WireReader4readEv>
   b43e0:	4606      	mov	r6, r0
        byte y_l = reader.read();
   b43e2:	a801      	add	r0, sp, #4
   b43e4:	f000 f9e0 	bl	b47a8 <_ZN10WireReader4readEv>
        *y = y_h << 8 | y_l;
   b43e8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   b43ec:	8028      	strh	r0, [r5, #0]
    }

    { // Reads in the Z val
        byte z_h = reader.read();
   b43ee:	a801      	add	r0, sp, #4
   b43f0:	f000 f9da 	bl	b47a8 <_ZN10WireReader4readEv>
   b43f4:	4605      	mov	r5, r0
        byte z_l = reader.read();
   b43f6:	a801      	add	r0, sp, #4
   b43f8:	f000 f9d6 	bl	b47a8 <_ZN10WireReader4readEv>
        *z = z_h << 8 | z_l;
   b43fc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4400:	8020      	strh	r0, [r4, #0]
    WireReader reader(_address, GYRO_XOUT_H, 6);
   b4402:	a801      	add	r0, sp, #4
   b4404:	f000 f99d 	bl	b4742 <_ZN10WireReaderD1Ev>
    }
}
   b4408:	b003      	add	sp, #12
   b440a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b440c:	0000      	movs	r0, r0
	...

000b4410 <_ZN7MPU605014getGravityDataEPfS0_S0_>:
    Vector3<int16_t> data;
    getGyroscopeData(&data.X, &data.Y, &data.Z);
    return data;
}

void MPU6050::getGravityData(float *x, float *y, float *z) {
   b4410:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4412:	ed2d 8b08 	vpush	{d8-d11}
   b4416:	4604      	mov	r4, r0
   b4418:	b083      	sub	sp, #12
   b441a:	460f      	mov	r7, r1
   b441c:	4616      	mov	r6, r2
   b441e:	461d      	mov	r5, r3
    int16_t ax, ay, az;
    getAccelerationData(&ax, &ay, &az);
   b4420:	aa01      	add	r2, sp, #4
   b4422:	f10d 0306 	add.w	r3, sp, #6
   b4426:	f10d 0102 	add.w	r1, sp, #2
   b442a:	f7ff ff95 	bl	b4358 <_ZN7MPU605019getAccelerationDataEPsS0_S0_>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b442e:	7a60      	ldrb	r0, [r4, #9]
   b4430:	f002 fa36 	bl	b68a0 <__aeabi_ui2d>
   b4434:	ed9f 0b46 	vldr	d0, [pc, #280]	; b4550 <_ZN7MPU605014getGravityDataEPfS0_S0_+0x140>
   b4438:	ec41 0b11 	vmov	d1, r0, r1
   b443c:	f001 f868 	bl	b5510 <pow>
   b4440:	ec53 2b10 	vmov	r2, r3, d0
    float rangeHalf = pow(2, AFS_SEL) * 2;
   b4444:	ee10 0a10 	vmov	r0, s0
   b4448:	4619      	mov	r1, r3
   b444a:	f002 f8ed 	bl	b6628 <__adddf3>
   b444e:	f002 fd51 	bl	b6ef4 <__aeabi_d2f>
   b4452:	4604      	mov	r4, r0
    *x = map((float)ax, -32767.0, 32767.0, -rangeHalf, rangeHalf);
   b4454:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b4458:	f002 fa44 	bl	b68e4 <__aeabi_f2d>
   b445c:	ec41 0b18 	vmov	d8, r0, r1
   b4460:	4620      	mov	r0, r4
   b4462:	f002 fa3f 	bl	b68e4 <__aeabi_f2d>
   b4466:	ec41 0b19 	vmov	d9, r0, r1
   b446a:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
   b446e:	ee07 0a90 	vmov	s15, r0
   b4472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4476:	ed9f bb38 	vldr	d11, [pc, #224]	; b4558 <_ZN7MPU605014getGravityDataEPfS0_S0_+0x148>
   b447a:	ee17 0a90 	vmov	r0, s15
   b447e:	f002 fa31 	bl	b68e4 <__aeabi_f2d>
   b4482:	eeb0 4a49 	vmov.f32	s8, s18
   b4486:	eef0 4a69 	vmov.f32	s9, s19
   b448a:	eeb0 3a48 	vmov.f32	s6, s16
   b448e:	eef0 3a68 	vmov.f32	s7, s17
   b4492:	ed9f ab33 	vldr	d10, [pc, #204]	; b4560 <_ZN7MPU605014getGravityDataEPfS0_S0_+0x150>
   b4496:	eeb0 2a4b 	vmov.f32	s4, s22
   b449a:	eef0 2a6b 	vmov.f32	s5, s23
   b449e:	eeb0 1a4a 	vmov.f32	s2, s20
   b44a2:	eef0 1a6a 	vmov.f32	s3, s21
   b44a6:	ec41 0b10 	vmov	d0, r0, r1
   b44aa:	f000 fc1f 	bl	b4cec <_Z3mapddddd>
   b44ae:	ec51 0b10 	vmov	r0, r1, d0
   b44b2:	f002 fd1f 	bl	b6ef4 <__aeabi_d2f>
   b44b6:	6038      	str	r0, [r7, #0]
    *y = map((float)ay, -32767.0, 32767.0, -rangeHalf, rangeHalf);
   b44b8:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
   b44bc:	ee07 0a90 	vmov	s15, r0
   b44c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b44c4:	ee17 0a90 	vmov	r0, s15
   b44c8:	f002 fa0c 	bl	b68e4 <__aeabi_f2d>
   b44cc:	eeb0 4a49 	vmov.f32	s8, s18
   b44d0:	eef0 4a69 	vmov.f32	s9, s19
   b44d4:	eeb0 3a48 	vmov.f32	s6, s16
   b44d8:	eef0 3a68 	vmov.f32	s7, s17
   b44dc:	eeb0 2a4b 	vmov.f32	s4, s22
   b44e0:	eef0 2a6b 	vmov.f32	s5, s23
   b44e4:	eeb0 1a4a 	vmov.f32	s2, s20
   b44e8:	eef0 1a6a 	vmov.f32	s3, s21
   b44ec:	ec41 0b10 	vmov	d0, r0, r1
   b44f0:	f000 fbfc 	bl	b4cec <_Z3mapddddd>
   b44f4:	ec51 0b10 	vmov	r0, r1, d0
   b44f8:	f002 fcfc 	bl	b6ef4 <__aeabi_d2f>
   b44fc:	6030      	str	r0, [r6, #0]
    *z = map((float)az, -32767.0, 32767.0, -rangeHalf, rangeHalf);
   b44fe:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   b4502:	ee07 0a90 	vmov	s15, r0
   b4506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b450a:	ee17 0a90 	vmov	r0, s15
   b450e:	f002 f9e9 	bl	b68e4 <__aeabi_f2d>
   b4512:	eeb0 4a49 	vmov.f32	s8, s18
   b4516:	eef0 4a69 	vmov.f32	s9, s19
   b451a:	eeb0 3a48 	vmov.f32	s6, s16
   b451e:	eef0 3a68 	vmov.f32	s7, s17
   b4522:	eeb0 2a4b 	vmov.f32	s4, s22
   b4526:	eef0 2a6b 	vmov.f32	s5, s23
   b452a:	eeb0 1a4a 	vmov.f32	s2, s20
   b452e:	eef0 1a6a 	vmov.f32	s3, s21
   b4532:	ec41 0b10 	vmov	d0, r0, r1
   b4536:	f000 fbd9 	bl	b4cec <_Z3mapddddd>
   b453a:	ec51 0b10 	vmov	r0, r1, d0
   b453e:	f002 fcd9 	bl	b6ef4 <__aeabi_d2f>
   b4542:	6028      	str	r0, [r5, #0]
}
   b4544:	b003      	add	sp, #12
   b4546:	ecbd 8b08 	vpop	{d8-d11}
   b454a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b454c:	f3af 8000 	nop.w
   b4550:	00000000 	.word	0x00000000
   b4554:	40000000 	.word	0x40000000
   b4558:	00000000 	.word	0x00000000
   b455c:	40dfffc0 	.word	0x40dfffc0
   b4560:	00000000 	.word	0x00000000
   b4564:	c0dfffc0 	.word	0xc0dfffc0

000b4568 <_ZN7MPU605014getGravityDataEv>:

Vector3<float> MPU6050::getGravityData() {
   b4568:	b510      	push	{r4, lr}
   b456a:	b08a      	sub	sp, #40	; 0x28
    Vector3<float> data;
    getGravityData(&data.X, &data.Y, &data.Z);
   b456c:	ac04      	add	r4, sp, #16
   b456e:	ab06      	add	r3, sp, #24
   b4570:	aa05      	add	r2, sp, #20
   b4572:	4621      	mov	r1, r4
   b4574:	f7ff ff4c 	bl	b4410 <_ZN7MPU605014getGravityDataEPfS0_S0_>
    return data;
   b4578:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b457c:	ab0a      	add	r3, sp, #40	; 0x28
   b457e:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
   b4582:	ed9d 0a07 	vldr	s0, [sp, #28]
   b4586:	eddd 0a08 	vldr	s1, [sp, #32]
   b458a:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
   b458e:	b00a      	add	sp, #40	; 0x28
   b4590:	bd10      	pop	{r4, pc}
   b4592:	0000      	movs	r0, r0
   b4594:	0000      	movs	r0, r0
	...

000b4598 <_ZN7MPU605015getRotationDataEPfS0_S0_>:

void MPU6050::getRotationData(float *x, float *y, float *z) {
   b4598:	b5f0      	push	{r4, r5, r6, r7, lr}
   b459a:	ed2d 8b08 	vpush	{d8-d11}
   b459e:	4604      	mov	r4, r0
   b45a0:	b083      	sub	sp, #12
   b45a2:	460f      	mov	r7, r1
   b45a4:	4616      	mov	r6, r2
   b45a6:	461d      	mov	r5, r3
    int16_t ax, ay, az;
    getGyroscopeData(&ax, &ay, &az);
   b45a8:	aa01      	add	r2, sp, #4
   b45aa:	f10d 0306 	add.w	r3, sp, #6
   b45ae:	f10d 0102 	add.w	r1, sp, #2
   b45b2:	f7ff fefe 	bl	b43b2 <_ZN7MPU605016getGyroscopeDataEPsS0_S0_>
   b45b6:	7960      	ldrb	r0, [r4, #5]
   b45b8:	f002 f972 	bl	b68a0 <__aeabi_ui2d>
   b45bc:	ed9f 0b46 	vldr	d0, [pc, #280]	; b46d8 <_ZN7MPU605015getRotationDataEPfS0_S0_+0x140>
   b45c0:	ec41 0b11 	vmov	d1, r0, r1
   b45c4:	f000 ffa4 	bl	b5510 <pow>
    float rangeHalf = pow(2, FS_SEL) * 250;
   b45c8:	4b49      	ldr	r3, [pc, #292]	; (b46f0 <_ZN7MPU605015getRotationDataEPfS0_S0_+0x158>)
   b45ca:	2200      	movs	r2, #0
   b45cc:	ec51 0b10 	vmov	r0, r1, d0
   b45d0:	f002 f9e0 	bl	b6994 <__aeabi_dmul>
   b45d4:	f002 fc8e 	bl	b6ef4 <__aeabi_d2f>
   b45d8:	4604      	mov	r4, r0
    *x = map((float)ax, -32767.0, 32767.0, -rangeHalf, rangeHalf);
   b45da:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b45de:	f002 f981 	bl	b68e4 <__aeabi_f2d>
   b45e2:	ec41 0b18 	vmov	d8, r0, r1
   b45e6:	4620      	mov	r0, r4
   b45e8:	f002 f97c 	bl	b68e4 <__aeabi_f2d>
   b45ec:	ec41 0b19 	vmov	d9, r0, r1
   b45f0:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
   b45f4:	ee07 0a90 	vmov	s15, r0
   b45f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b45fc:	ed9f bb38 	vldr	d11, [pc, #224]	; b46e0 <_ZN7MPU605015getRotationDataEPfS0_S0_+0x148>
   b4600:	ee17 0a90 	vmov	r0, s15
   b4604:	f002 f96e 	bl	b68e4 <__aeabi_f2d>
   b4608:	eeb0 4a49 	vmov.f32	s8, s18
   b460c:	eef0 4a69 	vmov.f32	s9, s19
   b4610:	eeb0 3a48 	vmov.f32	s6, s16
   b4614:	eef0 3a68 	vmov.f32	s7, s17
   b4618:	ed9f ab33 	vldr	d10, [pc, #204]	; b46e8 <_ZN7MPU605015getRotationDataEPfS0_S0_+0x150>
   b461c:	eeb0 2a4b 	vmov.f32	s4, s22
   b4620:	eef0 2a6b 	vmov.f32	s5, s23
   b4624:	eeb0 1a4a 	vmov.f32	s2, s20
   b4628:	eef0 1a6a 	vmov.f32	s3, s21
   b462c:	ec41 0b10 	vmov	d0, r0, r1
   b4630:	f000 fb5c 	bl	b4cec <_Z3mapddddd>
   b4634:	ec51 0b10 	vmov	r0, r1, d0
   b4638:	f002 fc5c 	bl	b6ef4 <__aeabi_d2f>
   b463c:	6038      	str	r0, [r7, #0]
    *y = map((float)ay, -32767.0, 32767.0, -rangeHalf, rangeHalf);
   b463e:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
   b4642:	ee07 0a90 	vmov	s15, r0
   b4646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b464a:	ee17 0a90 	vmov	r0, s15
   b464e:	f002 f949 	bl	b68e4 <__aeabi_f2d>
   b4652:	eeb0 4a49 	vmov.f32	s8, s18
   b4656:	eef0 4a69 	vmov.f32	s9, s19
   b465a:	eeb0 3a48 	vmov.f32	s6, s16
   b465e:	eef0 3a68 	vmov.f32	s7, s17
   b4662:	eeb0 2a4b 	vmov.f32	s4, s22
   b4666:	eef0 2a6b 	vmov.f32	s5, s23
   b466a:	eeb0 1a4a 	vmov.f32	s2, s20
   b466e:	eef0 1a6a 	vmov.f32	s3, s21
   b4672:	ec41 0b10 	vmov	d0, r0, r1
   b4676:	f000 fb39 	bl	b4cec <_Z3mapddddd>
   b467a:	ec51 0b10 	vmov	r0, r1, d0
   b467e:	f002 fc39 	bl	b6ef4 <__aeabi_d2f>
   b4682:	6030      	str	r0, [r6, #0]
    *z = map((float)az, -32767.0, 32767.0, -rangeHalf, rangeHalf);
   b4684:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   b4688:	ee07 0a90 	vmov	s15, r0
   b468c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4690:	ee17 0a90 	vmov	r0, s15
   b4694:	f002 f926 	bl	b68e4 <__aeabi_f2d>
   b4698:	eeb0 4a49 	vmov.f32	s8, s18
   b469c:	eef0 4a69 	vmov.f32	s9, s19
   b46a0:	eeb0 3a48 	vmov.f32	s6, s16
   b46a4:	eef0 3a68 	vmov.f32	s7, s17
   b46a8:	eeb0 2a4b 	vmov.f32	s4, s22
   b46ac:	eef0 2a6b 	vmov.f32	s5, s23
   b46b0:	eeb0 1a4a 	vmov.f32	s2, s20
   b46b4:	eef0 1a6a 	vmov.f32	s3, s21
   b46b8:	ec41 0b10 	vmov	d0, r0, r1
   b46bc:	f000 fb16 	bl	b4cec <_Z3mapddddd>
   b46c0:	ec51 0b10 	vmov	r0, r1, d0
   b46c4:	f002 fc16 	bl	b6ef4 <__aeabi_d2f>
   b46c8:	6028      	str	r0, [r5, #0]
}
   b46ca:	b003      	add	sp, #12
   b46cc:	ecbd 8b08 	vpop	{d8-d11}
   b46d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b46d2:	bf00      	nop
   b46d4:	f3af 8000 	nop.w
   b46d8:	00000000 	.word	0x00000000
   b46dc:	40000000 	.word	0x40000000
   b46e0:	00000000 	.word	0x00000000
   b46e4:	40dfffc0 	.word	0x40dfffc0
   b46e8:	00000000 	.word	0x00000000
   b46ec:	c0dfffc0 	.word	0xc0dfffc0
   b46f0:	406f4000 	.word	0x406f4000

000b46f4 <_ZN7MPU605015getRotationDataEv>:

Vector3<float> MPU6050::getRotationData() {
   b46f4:	b510      	push	{r4, lr}
   b46f6:	b08a      	sub	sp, #40	; 0x28
    Vector3<float> data;
    getRotationData(&data.X, &data.Y, &data.Z);
   b46f8:	ac04      	add	r4, sp, #16
   b46fa:	ab06      	add	r3, sp, #24
   b46fc:	aa05      	add	r2, sp, #20
   b46fe:	4621      	mov	r1, r4
   b4700:	f7ff ff4a 	bl	b4598 <_ZN7MPU605015getRotationDataEPfS0_S0_>
    return data;
   b4704:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b4708:	ab0a      	add	r3, sp, #40	; 0x28
   b470a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   b470e:	ed9d 0a07 	vldr	s0, [sp, #28]
   b4712:	eddd 0a08 	vldr	s1, [sp, #32]
   b4716:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
   b471a:	b00a      	add	sp, #40	; 0x28
   b471c:	bd10      	pop	{r4, pc}

000b471e <_ZN10WireWriterC1Ehh>:
#include "I2CHelper.h"

// ------------- Wire Writer --------------

WireWriter::WireWriter(byte address, byte reg) {
   b471e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4720:	4615      	mov	r5, r2
   b4722:	4604      	mov	r4, r0
   b4724:	9101      	str	r1, [sp, #4]
    Wire.beginTransmission(address);
   b4726:	f000 fecd 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b472a:	9901      	ldr	r1, [sp, #4]
   b472c:	f000 fd7b 	bl	b5226 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(reg);
   b4730:	f000 fec8 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b4734:	6803      	ldr	r3, [r0, #0]
   b4736:	4629      	mov	r1, r5
   b4738:	689b      	ldr	r3, [r3, #8]
   b473a:	4798      	blx	r3
}
   b473c:	4620      	mov	r0, r4
   b473e:	b003      	add	sp, #12
   b4740:	bd30      	pop	{r4, r5, pc}

000b4742 <_ZN10WireReaderD1Ev>:

WireWriter::~WireWriter() {
   b4742:	b510      	push	{r4, lr}
   b4744:	4604      	mov	r4, r0
    Wire.endTransmission(true);
   b4746:	f000 febd 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b474a:	2101      	movs	r1, #1
   b474c:	f000 fd6f 	bl	b522e <_ZN7TwoWire15endTransmissionEh>
}
   b4750:	4620      	mov	r0, r4
   b4752:	bd10      	pop	{r4, pc}

000b4754 <_ZN10WireWriter5writeEh>:

void WireWriter::write(byte data) {
   b4754:	b507      	push	{r0, r1, r2, lr}
   b4756:	9101      	str	r1, [sp, #4]
    Wire.write(data);
   b4758:	f000 feb4 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b475c:	6803      	ldr	r3, [r0, #0]
   b475e:	9901      	ldr	r1, [sp, #4]
   b4760:	689b      	ldr	r3, [r3, #8]
}
   b4762:	b003      	add	sp, #12
   b4764:	f85d eb04 	ldr.w	lr, [sp], #4
    Wire.write(data);
   b4768:	4718      	bx	r3

000b476a <_ZN10WireReaderC1Ehhh>:

// ------------- Wire Reader --------------

WireReader::WireReader(byte address, byte reg, byte count) {
   b476a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b476c:	460c      	mov	r4, r1
   b476e:	4616      	mov	r6, r2
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	4605      	mov	r5, r0
    Wire.beginTransmission(address);
   b4774:	f000 fea6 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b4778:	4621      	mov	r1, r4
   b477a:	f000 fd54 	bl	b5226 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(reg);
   b477e:	f000 fea1 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b4782:	6803      	ldr	r3, [r0, #0]
   b4784:	4631      	mov	r1, r6
   b4786:	689b      	ldr	r3, [r3, #8]
   b4788:	4798      	blx	r3
    Wire.endTransmission(false);
   b478a:	f000 fe9b 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b478e:	2100      	movs	r1, #0
   b4790:	f000 fd4d 	bl	b522e <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(address, count, false);
   b4794:	f000 fe96 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b4798:	9a01      	ldr	r2, [sp, #4]
   b479a:	2300      	movs	r3, #0
   b479c:	4621      	mov	r1, r4
   b479e:	f000 fd30 	bl	b5202 <_ZN7TwoWire11requestFromEhjh>
}
   b47a2:	4628      	mov	r0, r5
   b47a4:	b002      	add	sp, #8
   b47a6:	bd70      	pop	{r4, r5, r6, pc}

000b47a8 <_ZN10WireReader4readEv>:

WireReader::~WireReader() {
    Wire.endTransmission(true);
}

byte WireReader::read() {
   b47a8:	b508      	push	{r3, lr}
    return (byte)Wire.read();
   b47aa:	f000 fe8b 	bl	b54c4 <_Z19__fetch_global_Wirev>
   b47ae:	6803      	ldr	r3, [r0, #0]
   b47b0:	695b      	ldr	r3, [r3, #20]
   b47b2:	4798      	blx	r3
}
   b47b4:	b2c0      	uxtb	r0, r0
   b47b6:	bd08      	pop	{r3, pc}

000b47b8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <netdb_freeaddrinfo+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	689b      	ldr	r3, [r3, #8]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	00030268 	.word	0x00030268

000b47c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <netdb_getaddrinfo+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	68db      	ldr	r3, [r3, #12]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	00030268 	.word	0x00030268

000b47d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <HAL_RNG_GetRandomNumber+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	685b      	ldr	r3, [r3, #4]
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	00030218 	.word	0x00030218

000b47e8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	695b      	ldr	r3, [r3, #20]
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	00030218 	.word	0x00030218

000b47f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <os_mutex_recursive_create+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	00030248 	.word	0x00030248

000b4808 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <inet_inet_ntop+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	695b      	ldr	r3, [r3, #20]
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	00030264 	.word	0x00030264

000b4818 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <hal_usart_write+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	68db      	ldr	r3, [r3, #12]
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	0003023c 	.word	0x0003023c

000b4828 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <hal_usart_available+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	691b      	ldr	r3, [r3, #16]
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	0003023c 	.word	0x0003023c

000b4838 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <hal_usart_read+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	695b      	ldr	r3, [r3, #20]
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	0003023c 	.word	0x0003023c

000b4848 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b02      	ldr	r3, [pc, #8]	; (b4854 <hal_usart_peek+0xc>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	699b      	ldr	r3, [r3, #24]
   b4850:	9301      	str	r3, [sp, #4]
   b4852:	bd08      	pop	{r3, pc}
   b4854:	0003023c 	.word	0x0003023c

000b4858 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b02      	ldr	r3, [pc, #8]	; (b4864 <hal_usart_flush+0xc>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	69db      	ldr	r3, [r3, #28]
   b4860:	9301      	str	r3, [sp, #4]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	0003023c 	.word	0x0003023c

000b4868 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b02      	ldr	r3, [pc, #8]	; (b4874 <hal_usart_available_data_for_write+0xc>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4870:	9301      	str	r3, [sp, #4]
   b4872:	bd08      	pop	{r3, pc}
   b4874:	0003023c 	.word	0x0003023c

000b4878 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4878:	b508      	push	{r3, lr}
   b487a:	4b02      	ldr	r3, [pc, #8]	; (b4884 <hal_usart_init_ex+0xc>)
   b487c:	681b      	ldr	r3, [r3, #0]
   b487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	bd08      	pop	{r3, pc}
   b4884:	0003023c 	.word	0x0003023c

000b4888 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <hal_i2c_begin+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	68db      	ldr	r3, [r3, #12]
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	00030228 	.word	0x00030228

000b4898 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <hal_i2c_begin_transmission+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	699b      	ldr	r3, [r3, #24]
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	00030228 	.word	0x00030228

000b48a8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <hal_i2c_end_transmission+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	69db      	ldr	r3, [r3, #28]
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	00030228 	.word	0x00030228

000b48b8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <hal_i2c_write+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	6a1b      	ldr	r3, [r3, #32]
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	00030228 	.word	0x00030228

000b48c8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <hal_i2c_available+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	00030228 	.word	0x00030228

000b48d8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <hal_i2c_read+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	00030228 	.word	0x00030228

000b48e8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <hal_i2c_peek+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030228 	.word	0x00030228

000b48f8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <hal_i2c_flush+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030228 	.word	0x00030228

000b4908 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <hal_i2c_is_enabled+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030228 	.word	0x00030228

000b4918 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <hal_i2c_init+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	00030228 	.word	0x00030228

000b4928 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <hal_i2c_request_ex+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	00030228 	.word	0x00030228

000b4938 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <HAL_USB_USART_Init+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	681b      	ldr	r3, [r3, #0]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	0003024c 	.word	0x0003024c

000b4948 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <HAL_USB_USART_Available_Data+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	691b      	ldr	r3, [r3, #16]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	0003024c 	.word	0x0003024c

000b4958 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	695b      	ldr	r3, [r3, #20]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	0003024c 	.word	0x0003024c

000b4968 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <HAL_USB_USART_Receive_Data+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	699b      	ldr	r3, [r3, #24]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	0003024c 	.word	0x0003024c

000b4978 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <HAL_USB_USART_Send_Data+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	69db      	ldr	r3, [r3, #28]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	0003024c 	.word	0x0003024c

000b4988 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <HAL_USB_USART_Flush_Data+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	6a1b      	ldr	r3, [r3, #32]
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	0003024c 	.word	0x0003024c

000b4998 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <set_system_mode+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	685b      	ldr	r3, [r3, #4]
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	00030220 	.word	0x00030220

000b49a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b03      	ldr	r3, [pc, #12]	; (b49b8 <system_ctrl_set_app_request_handler+0x10>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b49b2:	9301      	str	r3, [sp, #4]
   b49b4:	bd08      	pop	{r3, pc}
   b49b6:	0000      	.short	0x0000
   b49b8:	00030220 	.word	0x00030220

000b49bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b03      	ldr	r3, [pc, #12]	; (b49cc <system_ctrl_set_result+0x10>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b49c6:	9301      	str	r3, [sp, #4]
   b49c8:	bd08      	pop	{r3, pc}
   b49ca:	0000      	.short	0x0000
   b49cc:	00030220 	.word	0x00030220

000b49d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <network_connect+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	685b      	ldr	r3, [r3, #4]
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	00030240 	.word	0x00030240

000b49e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <network_connecting+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	689b      	ldr	r3, [r3, #8]
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	00030240 	.word	0x00030240

000b49f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <network_disconnect+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	68db      	ldr	r3, [r3, #12]
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	00030240 	.word	0x00030240

000b4a00 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <network_ready+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	691b      	ldr	r3, [r3, #16]
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	00030240 	.word	0x00030240

000b4a10 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <network_on+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	695b      	ldr	r3, [r3, #20]
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	00030240 	.word	0x00030240

000b4a20 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <network_off+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	699b      	ldr	r3, [r3, #24]
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	00030240 	.word	0x00030240

000b4a30 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <network_listen+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	69db      	ldr	r3, [r3, #28]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	00030240 	.word	0x00030240

000b4a40 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <network_listening+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	6a1b      	ldr	r3, [r3, #32]
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	00030240 	.word	0x00030240

000b4a50 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <network_set_listen_timeout+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	00030240 	.word	0x00030240

000b4a60 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <network_get_listen_timeout+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	00030240 	.word	0x00030240

000b4a70 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <network_is_on+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	00030240 	.word	0x00030240

000b4a80 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <network_is_off+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	00030240 	.word	0x00030240

000b4a90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	00030244 	.word	0x00030244

000b4aa0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <malloc+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	681b      	ldr	r3, [r3, #0]
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	0003021c 	.word	0x0003021c

000b4ab0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <free+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	685b      	ldr	r3, [r3, #4]
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	0003021c 	.word	0x0003021c

000b4ac0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <vsnprintf+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	0003021c 	.word	0x0003021c

000b4ad0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <__errno+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	0003021c 	.word	0x0003021c

000b4ae0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <__assert_func+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	0003021c 	.word	0x0003021c

000b4af0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <newlib_impure_ptr_callback+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	0003021c 	.word	0x0003021c

000b4b00 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4b00:	2200      	movs	r2, #0
   b4b02:	6840      	ldr	r0, [r0, #4]
   b4b04:	4611      	mov	r1, r2
   b4b06:	f7ff bf9b 	b.w	b4a40 <network_listening>

000b4b0a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4b0a:	2200      	movs	r2, #0
   b4b0c:	6840      	ldr	r0, [r0, #4]
   b4b0e:	4611      	mov	r1, r2
   b4b10:	f7ff bfa6 	b.w	b4a60 <network_get_listen_timeout>

000b4b14 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4b14:	6840      	ldr	r0, [r0, #4]
   b4b16:	2200      	movs	r2, #0
   b4b18:	f7ff bf9a 	b.w	b4a50 <network_set_listen_timeout>

000b4b1c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4b1c:	6840      	ldr	r0, [r0, #4]
   b4b1e:	2200      	movs	r2, #0
   b4b20:	f081 0101 	eor.w	r1, r1, #1
   b4b24:	f7ff bf84 	b.w	b4a30 <network_listen>

000b4b28 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4b28:	2300      	movs	r3, #0
   b4b2a:	6840      	ldr	r0, [r0, #4]
   b4b2c:	461a      	mov	r2, r3
   b4b2e:	4619      	mov	r1, r3
   b4b30:	f7ff bf76 	b.w	b4a20 <network_off>

000b4b34 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4b34:	2300      	movs	r3, #0
   b4b36:	6840      	ldr	r0, [r0, #4]
   b4b38:	461a      	mov	r2, r3
   b4b3a:	4619      	mov	r1, r3
   b4b3c:	f7ff bf68 	b.w	b4a10 <network_on>

000b4b40 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4b40:	2200      	movs	r2, #0
   b4b42:	6840      	ldr	r0, [r0, #4]
   b4b44:	4611      	mov	r1, r2
   b4b46:	f7ff bf5b 	b.w	b4a00 <network_ready>

000b4b4a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4b4a:	2200      	movs	r2, #0
   b4b4c:	6840      	ldr	r0, [r0, #4]
   b4b4e:	4611      	mov	r1, r2
   b4b50:	f7ff bf46 	b.w	b49e0 <network_connecting>

000b4b54 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b54:	6840      	ldr	r0, [r0, #4]
   b4b56:	2200      	movs	r2, #0
   b4b58:	2102      	movs	r1, #2
   b4b5a:	f7ff bf49 	b.w	b49f0 <network_disconnect>

000b4b5e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b5e:	2300      	movs	r3, #0
   b4b60:	6840      	ldr	r0, [r0, #4]
   b4b62:	461a      	mov	r2, r3
   b4b64:	f7ff bf34 	b.w	b49d0 <network_connect>

000b4b68 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4b68:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4b6a:	2203      	movs	r2, #3
   b4b6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4b6e:	4a02      	ldr	r2, [pc, #8]	; (b4b78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4b70:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4b72:	4770      	bx	lr
   b4b74:	2003e6c4 	.word	0x2003e6c4
   b4b78:	000b71b8 	.word	0x000b71b8

000b4b7c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4b7c:	4b05      	ldr	r3, [pc, #20]	; (b4b94 <_GLOBAL__sub_I_System+0x18>)
   b4b7e:	2202      	movs	r2, #2
   b4b80:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4b82:	4b05      	ldr	r3, [pc, #20]	; (b4b98 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4b84:	4a05      	ldr	r2, [pc, #20]	; (b4b9c <_GLOBAL__sub_I_System+0x20>)
   b4b86:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4b88:	2000      	movs	r0, #0
   b4b8a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4b8e:	f7ff bf03 	b.w	b4998 <set_system_mode>
   b4b92:	bf00      	nop
   b4b94:	2003e6d8 	.word	0x2003e6d8
   b4b98:	2003e6cc 	.word	0x2003e6cc
   b4b9c:	ffff0000 	.word	0xffff0000

000b4ba0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ba0:	4802      	ldr	r0, [pc, #8]	; (b4bac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4ba2:	2300      	movs	r3, #0
   b4ba4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4ba6:	f7ff be27 	b.w	b47f8 <os_mutex_recursive_create>
   b4baa:	bf00      	nop
   b4bac:	2003e6dc 	.word	0x2003e6dc

000b4bb0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4bb2:	4606      	mov	r6, r0
   b4bb4:	460d      	mov	r5, r1
  size_t n = 0;
   b4bb6:	188f      	adds	r7, r1, r2
   b4bb8:	2400      	movs	r4, #0
  while (size--) {
   b4bba:	42bd      	cmp	r5, r7
   b4bbc:	d00c      	beq.n	b4bd8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4bbe:	6833      	ldr	r3, [r6, #0]
   b4bc0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4bc4:	689b      	ldr	r3, [r3, #8]
   b4bc6:	4630      	mov	r0, r6
   b4bc8:	4798      	blx	r3
     if (chunk>=0)
   b4bca:	1e03      	subs	r3, r0, #0
   b4bcc:	db01      	blt.n	b4bd2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4bce:	441c      	add	r4, r3
  while (size--) {
   b4bd0:	e7f3      	b.n	b4bba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4bd2:	2c00      	cmp	r4, #0
   b4bd4:	bf08      	it	eq
   b4bd6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4bd8:	4620      	mov	r0, r4
   b4bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4bdc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4bdc:	b513      	push	{r0, r1, r4, lr}
   b4bde:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4be0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4be2:	b159      	cbz	r1, b4bfc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4be4:	9101      	str	r1, [sp, #4]
   b4be6:	f002 fa1f 	bl	b7028 <strlen>
   b4bea:	6823      	ldr	r3, [r4, #0]
   b4bec:	9901      	ldr	r1, [sp, #4]
   b4bee:	68db      	ldr	r3, [r3, #12]
   b4bf0:	4602      	mov	r2, r0
   b4bf2:	4620      	mov	r0, r4
    }
   b4bf4:	b002      	add	sp, #8
   b4bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4bfa:	4718      	bx	r3
    }
   b4bfc:	b002      	add	sp, #8
   b4bfe:	bd10      	pop	{r4, pc}

000b4c00 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4c00:	6803      	ldr	r3, [r0, #0]
   b4c02:	689b      	ldr	r3, [r3, #8]
   b4c04:	4718      	bx	r3

000b4c06 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4c06:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4c08:	210d      	movs	r1, #13
{
   b4c0a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4c0c:	f7ff fff8 	bl	b4c00 <_ZN5Print5printEc>
  n += print('\n');
   b4c10:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4c12:	4604      	mov	r4, r0
  n += print('\n');
   b4c14:	4628      	mov	r0, r5
   b4c16:	f7ff fff3 	bl	b4c00 <_ZN5Print5printEc>
  return n;
}
   b4c1a:	4420      	add	r0, r4
   b4c1c:	bd38      	pop	{r3, r4, r5, pc}

000b4c1e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4c1e:	b530      	push	{r4, r5, lr}
   b4c20:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4c22:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4c24:	2a01      	cmp	r2, #1
  *str = '\0';
   b4c26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4c2a:	bf98      	it	ls
   b4c2c:	220a      	movls	r2, #10
   b4c2e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4c30:	460d      	mov	r5, r1
   b4c32:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4c36:	fb01 5312 	mls	r3, r1, r2, r5
   b4c3a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c3e:	2b09      	cmp	r3, #9
   b4c40:	bf94      	ite	ls
   b4c42:	3330      	addls	r3, #48	; 0x30
   b4c44:	3337      	addhi	r3, #55	; 0x37
   b4c46:	b2db      	uxtb	r3, r3
  } while(n);
   b4c48:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c4a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4c4e:	d9ef      	bls.n	b4c30 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4c50:	4621      	mov	r1, r4
   b4c52:	f7ff ffc3 	bl	b4bdc <_ZN5Print5writeEPKc>
}
   b4c56:	b00b      	add	sp, #44	; 0x2c
   b4c58:	bd30      	pop	{r4, r5, pc}

000b4c5a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c5e:	b086      	sub	sp, #24
   b4c60:	af00      	add	r7, sp, #0
   b4c62:	4605      	mov	r5, r0
   b4c64:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4c66:	1d38      	adds	r0, r7, #4
   b4c68:	2114      	movs	r1, #20
{
   b4c6a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4c6c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4c6e:	f7ff ff27 	bl	b4ac0 <vsnprintf>

    if (n<bufsize)
   b4c72:	2813      	cmp	r0, #19
   b4c74:	d80e      	bhi.n	b4c94 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4c76:	1d39      	adds	r1, r7, #4
   b4c78:	4628      	mov	r0, r5
   b4c7a:	f7ff ffaf 	bl	b4bdc <_ZN5Print5writeEPKc>
   b4c7e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4c80:	b11e      	cbz	r6, b4c8a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4c82:	4628      	mov	r0, r5
   b4c84:	f7ff ffbf 	bl	b4c06 <_ZN5Print7printlnEv>
   b4c88:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4c8a:	4620      	mov	r0, r4
   b4c8c:	3718      	adds	r7, #24
   b4c8e:	46bd      	mov	sp, r7
   b4c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4c94:	f100 0308 	add.w	r3, r0, #8
   b4c98:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4c9c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4c9e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4ca2:	4622      	mov	r2, r4
   b4ca4:	1c41      	adds	r1, r0, #1
   b4ca6:	683b      	ldr	r3, [r7, #0]
   b4ca8:	4668      	mov	r0, sp
   b4caa:	f7ff ff09 	bl	b4ac0 <vsnprintf>
  return write(str);
   b4cae:	4669      	mov	r1, sp
   b4cb0:	4628      	mov	r0, r5
   b4cb2:	f7ff ff93 	bl	b4bdc <_ZN5Print5writeEPKc>
   b4cb6:	4604      	mov	r4, r0
   b4cb8:	46c5      	mov	sp, r8
   b4cba:	e7e1      	b.n	b4c80 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4cbc <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4cbc:	2300      	movs	r3, #0
   b4cbe:	6840      	ldr	r0, [r0, #4]
   b4cc0:	461a      	mov	r2, r3
   b4cc2:	4619      	mov	r1, r3
   b4cc4:	f7ff bea4 	b.w	b4a10 <network_on>

000b4cc8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4cc8:	4b01      	ldr	r3, [pc, #4]	; (b4cd0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4cca:	4a02      	ldr	r2, [pc, #8]	; (b4cd4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4ccc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4cce:	4770      	bx	lr
   b4cd0:	2003e6e0 	.word	0x2003e6e0
   b4cd4:	000b71ec 	.word	0x000b71ec

000b4cd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4cd8:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4cda:	681a      	ldr	r2, [r3, #0]
   b4cdc:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4cde:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4ce0:	4770      	bx	lr
   b4ce2:	bf00      	nop
   b4ce4:	2003e634 	.word	0x2003e634
   b4ce8:	2003e6e4 	.word	0x2003e6e4

000b4cec <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   b4cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4cf0:	ec55 4b11 	vmov	r4, r5, d1
   b4cf4:	ec57 6b12 	vmov	r6, r7, d2
   b4cf8:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   b4cfa:	ee11 2a10 	vmov	r2, s2
   b4cfe:	ee12 0a10 	vmov	r0, s4
   b4d02:	462b      	mov	r3, r5
   b4d04:	4639      	mov	r1, r7
{
   b4d06:	ed8d 0b02 	vstr	d0, [sp, #8]
   b4d0a:	ed8d 4b00 	vstr	d4, [sp]
   b4d0e:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   b4d12:	f002 f8a7 	bl	b6e64 <__aeabi_dcmpeq>
   b4d16:	ed9d 0b02 	vldr	d0, [sp, #8]
   b4d1a:	bb38      	cbnz	r0, b4d6c <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b4d1c:	ec51 0b10 	vmov	r0, r1, d0
   b4d20:	4622      	mov	r2, r4
   b4d22:	462b      	mov	r3, r5
   b4d24:	f001 fc7e 	bl	b6624 <__aeabi_dsub>
   b4d28:	4652      	mov	r2, sl
   b4d2a:	4680      	mov	r8, r0
   b4d2c:	4689      	mov	r9, r1
   b4d2e:	465b      	mov	r3, fp
   b4d30:	e9dd 0100 	ldrd	r0, r1, [sp]
   b4d34:	f001 fc76 	bl	b6624 <__aeabi_dsub>
   b4d38:	4602      	mov	r2, r0
   b4d3a:	460b      	mov	r3, r1
   b4d3c:	4640      	mov	r0, r8
   b4d3e:	4649      	mov	r1, r9
   b4d40:	f001 fe28 	bl	b6994 <__aeabi_dmul>
   b4d44:	4622      	mov	r2, r4
   b4d46:	4680      	mov	r8, r0
   b4d48:	4689      	mov	r9, r1
   b4d4a:	462b      	mov	r3, r5
   b4d4c:	4630      	mov	r0, r6
   b4d4e:	4639      	mov	r1, r7
   b4d50:	f001 fc68 	bl	b6624 <__aeabi_dsub>
   b4d54:	4602      	mov	r2, r0
   b4d56:	460b      	mov	r3, r1
   b4d58:	4640      	mov	r0, r8
   b4d5a:	4649      	mov	r1, r9
   b4d5c:	f001 ff44 	bl	b6be8 <__aeabi_ddiv>
   b4d60:	4652      	mov	r2, sl
   b4d62:	465b      	mov	r3, fp
   b4d64:	f001 fc60 	bl	b6628 <__adddf3>
   b4d68:	ec41 0b10 	vmov	d0, r0, r1
}
   b4d6c:	b005      	add	sp, #20
   b4d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000b4d74 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4d74:	4b01      	ldr	r3, [pc, #4]	; (b4d7c <_GLOBAL__sub_I_RGB+0x8>)
   b4d76:	2200      	movs	r2, #0
   b4d78:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4d7a:	4770      	bx	lr
   b4d7c:	2003e6e8 	.word	0x2003e6e8

000b4d80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4d80:	4b01      	ldr	r3, [pc, #4]	; (b4d88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4d82:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4d84:	4770      	bx	lr
   b4d86:	bf00      	nop
   b4d88:	2003e63c 	.word	0x2003e63c

000b4d8c <serialEventRun>:
{
   b4d8c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4d8e:	4b0b      	ldr	r3, [pc, #44]	; (b4dbc <serialEventRun+0x30>)
   b4d90:	b143      	cbz	r3, b4da4 <serialEventRun+0x18>
   b4d92:	f000 f963 	bl	b505c <_Z16_fetch_usbserialv>
   b4d96:	6803      	ldr	r3, [r0, #0]
   b4d98:	691b      	ldr	r3, [r3, #16]
   b4d9a:	4798      	blx	r3
   b4d9c:	2800      	cmp	r0, #0
   b4d9e:	dd01      	ble.n	b4da4 <serialEventRun+0x18>
        serialEvent();
   b4da0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4da4:	4b06      	ldr	r3, [pc, #24]	; (b4dc0 <serialEventRun+0x34>)
   b4da6:	b143      	cbz	r3, b4dba <serialEventRun+0x2e>
   b4da8:	f000 fb50 	bl	b544c <_Z22__fetch_global_Serial1v>
   b4dac:	6803      	ldr	r3, [r0, #0]
   b4dae:	691b      	ldr	r3, [r3, #16]
   b4db0:	4798      	blx	r3
   b4db2:	2800      	cmp	r0, #0
   b4db4:	dd01      	ble.n	b4dba <serialEventRun+0x2e>
        serialEvent1();
   b4db6:	f3af 8000 	nop.w
}
   b4dba:	bd08      	pop	{r3, pc}
	...

000b4dc4 <_post_loop>:
{
   b4dc4:	b508      	push	{r3, lr}
	serialEventRun();
   b4dc6:	f7ff ffe1 	bl	b4d8c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4dca:	f7ff fd0d 	bl	b47e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4dce:	4b01      	ldr	r3, [pc, #4]	; (b4dd4 <_post_loop+0x10>)
   b4dd0:	6018      	str	r0, [r3, #0]
}
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	2003e740 	.word	0x2003e740

000b4dd8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4dd8:	4805      	ldr	r0, [pc, #20]	; (b4df0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4dda:	4a06      	ldr	r2, [pc, #24]	; (b4df4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4ddc:	4906      	ldr	r1, [pc, #24]	; (b4df8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4dde:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4de0:	1a12      	subs	r2, r2, r0
   b4de2:	f002 f8dd 	bl	b6fa0 <memcpy>
    __backup_sram_signature = signature;
   b4de6:	4b05      	ldr	r3, [pc, #20]	; (b4dfc <_Z33system_initialize_user_backup_ramv+0x24>)
   b4de8:	4a05      	ldr	r2, [pc, #20]	; (b4e00 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4dea:	601a      	str	r2, [r3, #0]
}
   b4dec:	bd08      	pop	{r3, pc}
   b4dee:	bf00      	nop
   b4df0:	2003f400 	.word	0x2003f400
   b4df4:	2003f404 	.word	0x2003f404
   b4df8:	000b73f0 	.word	0x000b73f0
   b4dfc:	2003f400 	.word	0x2003f400
   b4e00:	9a271c1e 	.word	0x9a271c1e

000b4e04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4e04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4e06:	2300      	movs	r3, #0
   b4e08:	9300      	str	r3, [sp, #0]
   b4e0a:	461a      	mov	r2, r3
   b4e0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4e10:	f7ff fdd4 	bl	b49bc <system_ctrl_set_result>
}
   b4e14:	b003      	add	sp, #12
   b4e16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4e1c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4e1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4e1e:	8843      	ldrh	r3, [r0, #2]
   b4e20:	2b0a      	cmp	r3, #10
   b4e22:	d008      	beq.n	b4e36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4e24:	2b50      	cmp	r3, #80	; 0x50
   b4e26:	d10b      	bne.n	b4e40 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4e28:	4b09      	ldr	r3, [pc, #36]	; (b4e50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4e2a:	681b      	ldr	r3, [r3, #0]
   b4e2c:	b14b      	cbz	r3, b4e42 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4e2e:	b003      	add	sp, #12
   b4e30:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4e34:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4e36:	f7ff ffe5 	bl	b4e04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4e3a:	b003      	add	sp, #12
   b4e3c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4e40:	2300      	movs	r3, #0
   b4e42:	9300      	str	r3, [sp, #0]
   b4e44:	461a      	mov	r2, r3
   b4e46:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4e4a:	f7ff fdb7 	bl	b49bc <system_ctrl_set_result>
}
   b4e4e:	e7f4      	b.n	b4e3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4e50:	2003e6fc 	.word	0x2003e6fc

000b4e54 <module_user_init_hook>:
{
   b4e54:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4e56:	4812      	ldr	r0, [pc, #72]	; (b4ea0 <module_user_init_hook+0x4c>)
   b4e58:	2100      	movs	r1, #0
   b4e5a:	f7ff fe49 	bl	b4af0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4e5e:	4b11      	ldr	r3, [pc, #68]	; (b4ea4 <module_user_init_hook+0x50>)
   b4e60:	681a      	ldr	r2, [r3, #0]
   b4e62:	4b11      	ldr	r3, [pc, #68]	; (b4ea8 <module_user_init_hook+0x54>)
   b4e64:	429a      	cmp	r2, r3
   b4e66:	4b11      	ldr	r3, [pc, #68]	; (b4eac <module_user_init_hook+0x58>)
   b4e68:	bf0c      	ite	eq
   b4e6a:	2201      	moveq	r2, #1
   b4e6c:	2200      	movne	r2, #0
   b4e6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4e70:	d001      	beq.n	b4e76 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4e72:	f7ff ffb1 	bl	b4dd8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4e76:	f7ff fcaf 	bl	b47d8 <HAL_RNG_GetRandomNumber>
   b4e7a:	4604      	mov	r4, r0
    srand(seed);
   b4e7c:	f002 f8a6 	bl	b6fcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4e80:	4b0b      	ldr	r3, [pc, #44]	; (b4eb0 <module_user_init_hook+0x5c>)
   b4e82:	b113      	cbz	r3, b4e8a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4e84:	4620      	mov	r0, r4
   b4e86:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4e8a:	2100      	movs	r1, #0
   b4e8c:	4808      	ldr	r0, [pc, #32]	; (b4eb0 <module_user_init_hook+0x5c>)
   b4e8e:	f7ff fdff 	bl	b4a90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4e96:	4807      	ldr	r0, [pc, #28]	; (b4eb4 <module_user_init_hook+0x60>)
   b4e98:	2100      	movs	r1, #0
   b4e9a:	f7ff bd85 	b.w	b49a8 <system_ctrl_set_app_request_handler>
   b4e9e:	bf00      	nop
   b4ea0:	000b4d81 	.word	0x000b4d81
   b4ea4:	2003f400 	.word	0x2003f400
   b4ea8:	9a271c1e 	.word	0x9a271c1e
   b4eac:	2003e6f8 	.word	0x2003e6f8
   b4eb0:	00000000 	.word	0x00000000
   b4eb4:	000b4e1d 	.word	0x000b4e1d

000b4eb8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4eb8:	4770      	bx	lr

000b4eba <_ZN9IPAddressD0Ev>:
   b4eba:	b510      	push	{r4, lr}
   b4ebc:	2118      	movs	r1, #24
   b4ebe:	4604      	mov	r4, r0
   b4ec0:	f7ff f8eb 	bl	b409a <_ZdlPvj>
   b4ec4:	4620      	mov	r0, r4
   b4ec6:	bd10      	pop	{r4, pc}

000b4ec8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4eca:	7d03      	ldrb	r3, [r0, #20]
   b4ecc:	2b06      	cmp	r3, #6
{
   b4ece:	b08d      	sub	sp, #52	; 0x34
   b4ed0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ed2:	f100 0704 	add.w	r7, r0, #4
   b4ed6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4eda:	d012      	beq.n	b4f02 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4edc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4ee0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4ee4:	220a      	movs	r2, #10
   b4ee6:	4630      	mov	r0, r6
   b4ee8:	f7ff fe99 	bl	b4c1e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4eec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4eee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4ef0:	d019      	beq.n	b4f26 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4ef2:	2c00      	cmp	r4, #0
   b4ef4:	d0f4      	beq.n	b4ee0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4ef6:	212e      	movs	r1, #46	; 0x2e
   b4ef8:	4630      	mov	r0, r6
   b4efa:	f7ff fe81 	bl	b4c00 <_ZN5Print5printEc>
   b4efe:	4404      	add	r4, r0
   b4f00:	e7ee      	b.n	b4ee0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f02:	232f      	movs	r3, #47	; 0x2f
   b4f04:	466a      	mov	r2, sp
   b4f06:	4639      	mov	r1, r7
   b4f08:	200a      	movs	r0, #10
		buf[0] = 0;
   b4f0a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f0e:	f7ff fc7b 	bl	b4808 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4f12:	4668      	mov	r0, sp
   b4f14:	f002 f888 	bl	b7028 <strlen>
   b4f18:	6833      	ldr	r3, [r6, #0]
   b4f1a:	4602      	mov	r2, r0
   b4f1c:	68db      	ldr	r3, [r3, #12]
   b4f1e:	4669      	mov	r1, sp
   b4f20:	4630      	mov	r0, r6
   b4f22:	4798      	blx	r3
   b4f24:	4604      	mov	r4, r0
    }
    return n;
}
   b4f26:	4620      	mov	r0, r4
   b4f28:	b00d      	add	sp, #52	; 0x34
   b4f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4f2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4f2c:	b510      	push	{r4, lr}
   b4f2e:	4b05      	ldr	r3, [pc, #20]	; (b4f44 <_ZN9IPAddressC1Ev+0x18>)
   b4f30:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4f32:	2211      	movs	r2, #17
   b4f34:	f840 3b04 	str.w	r3, [r0], #4
   b4f38:	2100      	movs	r1, #0
   b4f3a:	f002 f83f 	bl	b6fbc <memset>
}
   b4f3e:	4620      	mov	r0, r4
   b4f40:	bd10      	pop	{r4, pc}
   b4f42:	bf00      	nop
   b4f44:	000b7214 	.word	0x000b7214

000b4f48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4f48:	4603      	mov	r3, r0
   b4f4a:	4a07      	ldr	r2, [pc, #28]	; (b4f68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4f4c:	b510      	push	{r4, lr}
   b4f4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4f52:	f101 0210 	add.w	r2, r1, #16
   b4f56:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f5a:	f843 4b04 	str.w	r4, [r3], #4
   b4f5e:	4291      	cmp	r1, r2
   b4f60:	d1f9      	bne.n	b4f56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4f62:	780a      	ldrb	r2, [r1, #0]
   b4f64:	701a      	strb	r2, [r3, #0]
}
   b4f66:	bd10      	pop	{r4, pc}
   b4f68:	000b7214 	.word	0x000b7214

000b4f6c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f7e:	2304      	movs	r3, #4
   b4f80:	6041      	str	r1, [r0, #4]
   b4f82:	7503      	strb	r3, [r0, #20]
}
   b4f84:	bd10      	pop	{r4, pc}
	...

000b4f88 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f88:	b507      	push	{r0, r1, r2, lr}
   b4f8a:	4b06      	ldr	r3, [pc, #24]	; (b4fa4 <_ZN9IPAddressC1EPKh+0x1c>)
   b4f8c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f8e:	78cb      	ldrb	r3, [r1, #3]
   b4f90:	9300      	str	r3, [sp, #0]
   b4f92:	788b      	ldrb	r3, [r1, #2]
   b4f94:	784a      	ldrb	r2, [r1, #1]
   b4f96:	7809      	ldrb	r1, [r1, #0]
   b4f98:	f7ff ffe8 	bl	b4f6c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f9c:	b003      	add	sp, #12
   b4f9e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4fa2:	bf00      	nop
   b4fa4:	000b7214 	.word	0x000b7214

000b4fa8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4fa8:	7441      	strb	r1, [r0, #17]
}
   b4faa:	4770      	bx	lr

000b4fac <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4fac:	4770      	bx	lr

000b4fae <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4fae:	4770      	bx	lr

000b4fb0 <_ZN9USBSerial4readEv>:
{
   b4fb0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4fb2:	2100      	movs	r1, #0
   b4fb4:	7c00      	ldrb	r0, [r0, #16]
   b4fb6:	f7ff fcd7 	bl	b4968 <HAL_USB_USART_Receive_Data>
}
   b4fba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4fbe:	bd08      	pop	{r3, pc}

000b4fc0 <_ZN9USBSerial4peekEv>:
{
   b4fc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4fc2:	2101      	movs	r1, #1
   b4fc4:	7c00      	ldrb	r0, [r0, #16]
   b4fc6:	f7ff fccf 	bl	b4968 <HAL_USB_USART_Receive_Data>
}
   b4fca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4fce:	bd08      	pop	{r3, pc}

000b4fd0 <_ZN9USBSerial17availableForWriteEv>:
{
   b4fd0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4fd2:	7c00      	ldrb	r0, [r0, #16]
   b4fd4:	f7ff fcc0 	bl	b4958 <HAL_USB_USART_Available_Data_For_Write>
}
   b4fd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4fdc:	bd08      	pop	{r3, pc}

000b4fde <_ZN9USBSerial9availableEv>:
{
   b4fde:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4fe0:	7c00      	ldrb	r0, [r0, #16]
   b4fe2:	f7ff fcb1 	bl	b4948 <HAL_USB_USART_Available_Data>
}
   b4fe6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4fea:	bd08      	pop	{r3, pc}

000b4fec <_ZN9USBSerial5writeEh>:
{
   b4fec:	b513      	push	{r0, r1, r4, lr}
   b4fee:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4ff0:	7c00      	ldrb	r0, [r0, #16]
{
   b4ff2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4ff4:	f7ff fcb0 	bl	b4958 <HAL_USB_USART_Available_Data_For_Write>
   b4ff8:	2800      	cmp	r0, #0
   b4ffa:	9901      	ldr	r1, [sp, #4]
   b4ffc:	dc01      	bgt.n	b5002 <_ZN9USBSerial5writeEh+0x16>
   b4ffe:	7c60      	ldrb	r0, [r4, #17]
   b5000:	b120      	cbz	r0, b500c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5002:	7c20      	ldrb	r0, [r4, #16]
   b5004:	f7ff fcb8 	bl	b4978 <HAL_USB_USART_Send_Data>
   b5008:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b500c:	b002      	add	sp, #8
   b500e:	bd10      	pop	{r4, pc}

000b5010 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5010:	7c00      	ldrb	r0, [r0, #16]
   b5012:	f7ff bcb9 	b.w	b4988 <HAL_USB_USART_Flush_Data>

000b5016 <_ZN9USBSerialD0Ev>:
   b5016:	b510      	push	{r4, lr}
   b5018:	2114      	movs	r1, #20
   b501a:	4604      	mov	r4, r0
   b501c:	f7ff f83d 	bl	b409a <_ZdlPvj>
   b5020:	4620      	mov	r0, r4
   b5022:	bd10      	pop	{r4, pc}

000b5024 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5024:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b502a:	4604      	mov	r4, r0
   b502c:	4608      	mov	r0, r1
   b502e:	2100      	movs	r1, #0
   b5030:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5034:	4b04      	ldr	r3, [pc, #16]	; (b5048 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5036:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5038:	2301      	movs	r3, #1
  _serial = serial;
   b503a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b503c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b503e:	4611      	mov	r1, r2
   b5040:	f7ff fc7a 	bl	b4938 <HAL_USB_USART_Init>
}
   b5044:	4620      	mov	r0, r4
   b5046:	bd10      	pop	{r4, pc}
   b5048:	000b7228 	.word	0x000b7228

000b504c <_Z19acquireSerialBufferv>:
{
   b504c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b504e:	2214      	movs	r2, #20
{
   b5050:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5052:	2100      	movs	r1, #0
   b5054:	f001 ffb2 	bl	b6fbc <memset>
}
   b5058:	4620      	mov	r0, r4
   b505a:	bd10      	pop	{r4, pc}

000b505c <_Z16_fetch_usbserialv>:
{
   b505c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b505e:	4c0f      	ldr	r4, [pc, #60]	; (b509c <_Z16_fetch_usbserialv+0x40>)
{
   b5060:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5062:	a803      	add	r0, sp, #12
   b5064:	f7ff fff2 	bl	b504c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5068:	7821      	ldrb	r1, [r4, #0]
   b506a:	f3bf 8f5b 	dmb	ish
   b506e:	f011 0101 	ands.w	r1, r1, #1
   b5072:	d10f      	bne.n	b5094 <_Z16_fetch_usbserialv+0x38>
   b5074:	4620      	mov	r0, r4
   b5076:	9101      	str	r1, [sp, #4]
   b5078:	f7ff f811 	bl	b409e <__cxa_guard_acquire>
   b507c:	9901      	ldr	r1, [sp, #4]
   b507e:	b148      	cbz	r0, b5094 <_Z16_fetch_usbserialv+0x38>
   b5080:	aa03      	add	r2, sp, #12
   b5082:	4807      	ldr	r0, [pc, #28]	; (b50a0 <_Z16_fetch_usbserialv+0x44>)
   b5084:	f7ff ffce 	bl	b5024 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5088:	4620      	mov	r0, r4
   b508a:	f7ff f80d 	bl	b40a8 <__cxa_guard_release>
   b508e:	4805      	ldr	r0, [pc, #20]	; (b50a4 <_Z16_fetch_usbserialv+0x48>)
   b5090:	f001 ff80 	bl	b6f94 <atexit>
	return _usbserial;
}
   b5094:	4802      	ldr	r0, [pc, #8]	; (b50a0 <_Z16_fetch_usbserialv+0x44>)
   b5096:	b008      	add	sp, #32
   b5098:	bd10      	pop	{r4, pc}
   b509a:	bf00      	nop
   b509c:	2003e700 	.word	0x2003e700
   b50a0:	2003e704 	.word	0x2003e704
   b50a4:	000b4fad 	.word	0x000b4fad

000b50a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b50a8:	4770      	bx	lr

000b50aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b50aa:	7441      	strb	r1, [r0, #17]
}
   b50ac:	4770      	bx	lr

000b50ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b50ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b50b0:	7c00      	ldrb	r0, [r0, #16]
   b50b2:	f7ff fbd9 	bl	b4868 <hal_usart_available_data_for_write>
}
   b50b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b50ba:	bd08      	pop	{r3, pc}

000b50bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b50bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b50be:	7c00      	ldrb	r0, [r0, #16]
   b50c0:	f7ff fbb2 	bl	b4828 <hal_usart_available>
}
   b50c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b50c8:	bd08      	pop	{r3, pc}

000b50ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b50ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b50cc:	7c00      	ldrb	r0, [r0, #16]
   b50ce:	f7ff fbbb 	bl	b4848 <hal_usart_peek>
}
   b50d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b50d6:	bd08      	pop	{r3, pc}

000b50d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b50d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b50da:	7c00      	ldrb	r0, [r0, #16]
   b50dc:	f7ff fbac 	bl	b4838 <hal_usart_read>
}
   b50e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b50e4:	bd08      	pop	{r3, pc}

000b50e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b50e6:	7c00      	ldrb	r0, [r0, #16]
   b50e8:	f7ff bbb6 	b.w	b4858 <hal_usart_flush>

000b50ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b50ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50ee:	7c45      	ldrb	r5, [r0, #17]
{
   b50f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50f2:	b12d      	cbz	r5, b5100 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b50f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b50f6:	b003      	add	sp, #12
   b50f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b50fc:	f7ff bb8c 	b.w	b4818 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5100:	7c00      	ldrb	r0, [r0, #16]
   b5102:	9101      	str	r1, [sp, #4]
   b5104:	f7ff fbb0 	bl	b4868 <hal_usart_available_data_for_write>
   b5108:	2800      	cmp	r0, #0
   b510a:	9901      	ldr	r1, [sp, #4]
   b510c:	dcf2      	bgt.n	b50f4 <_ZN11USARTSerial5writeEh+0x8>
}
   b510e:	4628      	mov	r0, r5
   b5110:	b003      	add	sp, #12
   b5112:	bd30      	pop	{r4, r5, pc}

000b5114 <_ZN11USARTSerialD0Ev>:
   b5114:	b510      	push	{r4, lr}
   b5116:	2114      	movs	r1, #20
   b5118:	4604      	mov	r4, r0
   b511a:	f7fe ffbe 	bl	b409a <_ZdlPvj>
   b511e:	4620      	mov	r0, r4
   b5120:	bd10      	pop	{r4, pc}
	...

000b5124 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5124:	b510      	push	{r4, lr}
   b5126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b512a:	4604      	mov	r4, r0
   b512c:	4608      	mov	r0, r1
   b512e:	4611      	mov	r1, r2
   b5130:	2200      	movs	r2, #0
   b5132:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5136:	4b04      	ldr	r3, [pc, #16]	; (b5148 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5138:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b513a:	2301      	movs	r3, #1
  _serial = serial;
   b513c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b513e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5140:	f7ff fb9a 	bl	b4878 <hal_usart_init_ex>
}
   b5144:	4620      	mov	r0, r4
   b5146:	bd10      	pop	{r4, pc}
   b5148:	000b7258 	.word	0x000b7258

000b514c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b514c:	4770      	bx	lr

000b514e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b514e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5150:	4606      	mov	r6, r0
   b5152:	4615      	mov	r5, r2
   b5154:	460c      	mov	r4, r1
   b5156:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5158:	42bc      	cmp	r4, r7
   b515a:	d006      	beq.n	b516a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b515c:	6833      	ldr	r3, [r6, #0]
   b515e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5162:	689b      	ldr	r3, [r3, #8]
   b5164:	4630      	mov	r0, r6
   b5166:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5168:	e7f6      	b.n	b5158 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b516a:	4628      	mov	r0, r5
   b516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b516e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b516e:	7c00      	ldrb	r0, [r0, #16]
   b5170:	2200      	movs	r2, #0
   b5172:	f7ff bba1 	b.w	b48b8 <hal_i2c_write>

000b5176 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5176:	7c00      	ldrb	r0, [r0, #16]
   b5178:	2100      	movs	r1, #0
   b517a:	f7ff bba5 	b.w	b48c8 <hal_i2c_available>

000b517e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b517e:	7c00      	ldrb	r0, [r0, #16]
   b5180:	2100      	movs	r1, #0
   b5182:	f7ff bba9 	b.w	b48d8 <hal_i2c_read>

000b5186 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5186:	7c00      	ldrb	r0, [r0, #16]
   b5188:	2100      	movs	r1, #0
   b518a:	f7ff bbad 	b.w	b48e8 <hal_i2c_peek>

000b518e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b518e:	7c00      	ldrb	r0, [r0, #16]
   b5190:	2100      	movs	r1, #0
   b5192:	f7ff bbb1 	b.w	b48f8 <hal_i2c_flush>

000b5196 <_ZN7TwoWireD0Ev>:
   b5196:	b510      	push	{r4, lr}
   b5198:	2114      	movs	r1, #20
   b519a:	4604      	mov	r4, r0
   b519c:	f7fe ff7d 	bl	b409a <_ZdlPvj>
   b51a0:	4620      	mov	r0, r4
   b51a2:	bd10      	pop	{r4, pc}

000b51a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b51a4:	b510      	push	{r4, lr}
   b51a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b51aa:	4604      	mov	r4, r0
   b51ac:	4608      	mov	r0, r1
   b51ae:	2100      	movs	r1, #0
   b51b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b51b4:	4b03      	ldr	r3, [pc, #12]	; (b51c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b51b6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b51b8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b51ba:	4611      	mov	r1, r2
   b51bc:	f7ff fbac 	bl	b4918 <hal_i2c_init>
}
   b51c0:	4620      	mov	r0, r4
   b51c2:	bd10      	pop	{r4, pc}
   b51c4:	000b7288 	.word	0x000b7288

000b51c8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b51c8:	2300      	movs	r3, #0
   b51ca:	7c00      	ldrb	r0, [r0, #16]
   b51cc:	461a      	mov	r2, r3
   b51ce:	4619      	mov	r1, r3
   b51d0:	f7ff bb5a 	b.w	b4888 <hal_i2c_begin>

000b51d4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b51d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b51d6:	2200      	movs	r2, #0
   b51d8:	2314      	movs	r3, #20
   b51da:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b51de:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b51e2:	780b      	ldrb	r3, [r1, #0]
   b51e4:	f88d 3008 	strb.w	r3, [sp, #8]
   b51e8:	684b      	ldr	r3, [r1, #4]
   b51ea:	9303      	str	r3, [sp, #12]
   b51ec:	68cb      	ldr	r3, [r1, #12]
   b51ee:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b51f0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b51f2:	7a0b      	ldrb	r3, [r1, #8]
   b51f4:	9305      	str	r3, [sp, #20]
   b51f6:	a901      	add	r1, sp, #4
   b51f8:	f7ff fb96 	bl	b4928 <hal_i2c_request_ex>
}
   b51fc:	b007      	add	sp, #28
   b51fe:	f85d fb04 	ldr.w	pc, [sp], #4

000b5202 <_ZN7TwoWire11requestFromEhjh>:
{
   b5202:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5204:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5206:	f88d 1000 	strb.w	r1, [sp]
   b520a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b520e:	9103      	str	r1, [sp, #12]
   b5210:	bf18      	it	ne
   b5212:	2301      	movne	r3, #1
   b5214:	4669      	mov	r1, sp
    size_ = size;
   b5216:	9201      	str	r2, [sp, #4]
   b5218:	f88d 3008 	strb.w	r3, [sp, #8]
   b521c:	f7ff ffda 	bl	b51d4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5220:	b005      	add	sp, #20
   b5222:	f85d fb04 	ldr.w	pc, [sp], #4

000b5226 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5226:	7c00      	ldrb	r0, [r0, #16]
   b5228:	2200      	movs	r2, #0
   b522a:	f7ff bb35 	b.w	b4898 <hal_i2c_begin_transmission>

000b522e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b522e:	7c00      	ldrb	r0, [r0, #16]
   b5230:	2200      	movs	r2, #0
   b5232:	f7ff bb39 	b.w	b48a8 <hal_i2c_end_transmission>

000b5236 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b5236:	7c00      	ldrb	r0, [r0, #16]
   b5238:	2100      	movs	r1, #0
   b523a:	f7ff bb65 	b.w	b4908 <hal_i2c_is_enabled>

000b523e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b523e:	2200      	movs	r2, #0
   b5240:	6840      	ldr	r0, [r0, #4]
   b5242:	4611      	mov	r1, r2
   b5244:	f7ff bbdc 	b.w	b4a00 <network_ready>

000b5248 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5248:	2200      	movs	r2, #0
   b524a:	6840      	ldr	r0, [r0, #4]
   b524c:	4611      	mov	r1, r2
   b524e:	f7ff bbf7 	b.w	b4a40 <network_listening>

000b5252 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5252:	2200      	movs	r2, #0
   b5254:	6840      	ldr	r0, [r0, #4]
   b5256:	4611      	mov	r1, r2
   b5258:	f7ff bc02 	b.w	b4a60 <network_get_listen_timeout>

000b525c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b525c:	6840      	ldr	r0, [r0, #4]
   b525e:	2200      	movs	r2, #0
   b5260:	f7ff bbf6 	b.w	b4a50 <network_set_listen_timeout>

000b5264 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5264:	6840      	ldr	r0, [r0, #4]
   b5266:	2200      	movs	r2, #0
   b5268:	f081 0101 	eor.w	r1, r1, #1
   b526c:	f7ff bbe0 	b.w	b4a30 <network_listen>

000b5270 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5270:	2300      	movs	r3, #0
   b5272:	6840      	ldr	r0, [r0, #4]
   b5274:	461a      	mov	r2, r3
   b5276:	4619      	mov	r1, r3
   b5278:	f7ff bbd2 	b.w	b4a20 <network_off>

000b527c <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b527c:	2200      	movs	r2, #0
   b527e:	6840      	ldr	r0, [r0, #4]
   b5280:	4611      	mov	r1, r2
   b5282:	f7ff bbad 	b.w	b49e0 <network_connecting>

000b5286 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5286:	6840      	ldr	r0, [r0, #4]
   b5288:	2200      	movs	r2, #0
   b528a:	2102      	movs	r1, #2
   b528c:	f7ff bbb0 	b.w	b49f0 <network_disconnect>

000b5290 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5290:	2300      	movs	r3, #0
   b5292:	6840      	ldr	r0, [r0, #4]
   b5294:	461a      	mov	r2, r3
   b5296:	f7ff bb9b 	b.w	b49d0 <network_connect>
	...

000b529c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b529c:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b529e:	2204      	movs	r2, #4
   b52a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b52a2:	4a02      	ldr	r2, [pc, #8]	; (b52ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b52a4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b52a6:	4770      	bx	lr
   b52a8:	2003e718 	.word	0x2003e718
   b52ac:	000b72b0 	.word	0x000b72b0

000b52b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b52b0:	2300      	movs	r3, #0
   b52b2:	6840      	ldr	r0, [r0, #4]
   b52b4:	461a      	mov	r2, r3
   b52b6:	f7ff bb8b 	b.w	b49d0 <network_connect>

000b52ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b52ba:	6840      	ldr	r0, [r0, #4]
   b52bc:	2200      	movs	r2, #0
   b52be:	2102      	movs	r1, #2
   b52c0:	f7ff bb96 	b.w	b49f0 <network_disconnect>

000b52c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b52c4:	2200      	movs	r2, #0
   b52c6:	6840      	ldr	r0, [r0, #4]
   b52c8:	4611      	mov	r1, r2
   b52ca:	f7ff bb89 	b.w	b49e0 <network_connecting>

000b52ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b52ce:	2200      	movs	r2, #0
   b52d0:	6840      	ldr	r0, [r0, #4]
   b52d2:	4611      	mov	r1, r2
   b52d4:	f7ff bb94 	b.w	b4a00 <network_ready>

000b52d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b52d8:	2300      	movs	r3, #0
   b52da:	6840      	ldr	r0, [r0, #4]
   b52dc:	461a      	mov	r2, r3
   b52de:	4619      	mov	r1, r3
   b52e0:	f7ff bb96 	b.w	b4a10 <network_on>

000b52e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b52e4:	2300      	movs	r3, #0
   b52e6:	6840      	ldr	r0, [r0, #4]
   b52e8:	461a      	mov	r2, r3
   b52ea:	4619      	mov	r1, r3
   b52ec:	f7ff bb98 	b.w	b4a20 <network_off>

000b52f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b52f0:	6840      	ldr	r0, [r0, #4]
   b52f2:	2100      	movs	r1, #0
   b52f4:	f7ff bbbc 	b.w	b4a70 <network_is_on>

000b52f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b52f8:	6840      	ldr	r0, [r0, #4]
   b52fa:	2100      	movs	r1, #0
   b52fc:	f7ff bbc0 	b.w	b4a80 <network_is_off>

000b5300 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5300:	6840      	ldr	r0, [r0, #4]
   b5302:	2200      	movs	r2, #0
   b5304:	f081 0101 	eor.w	r1, r1, #1
   b5308:	f7ff bb92 	b.w	b4a30 <network_listen>

000b530c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b530c:	6840      	ldr	r0, [r0, #4]
   b530e:	2200      	movs	r2, #0
   b5310:	f7ff bb9e 	b.w	b4a50 <network_set_listen_timeout>

000b5314 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5314:	2200      	movs	r2, #0
   b5316:	6840      	ldr	r0, [r0, #4]
   b5318:	4611      	mov	r1, r2
   b531a:	f7ff bba1 	b.w	b4a60 <network_get_listen_timeout>

000b531e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b531e:	2200      	movs	r2, #0
   b5320:	6840      	ldr	r0, [r0, #4]
   b5322:	4611      	mov	r1, r2
   b5324:	f7ff bb8c 	b.w	b4a40 <network_listening>

000b5328 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b532c:	b095      	sub	sp, #84	; 0x54
   b532e:	4614      	mov	r4, r2
   b5330:	460d      	mov	r5, r1
   b5332:	4607      	mov	r7, r0
    IPAddress addr;
   b5334:	f7ff fdfa 	bl	b4f2c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5338:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b533a:	221c      	movs	r2, #28
   b533c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b533e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5340:	f001 fe3c 	bl	b6fbc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5344:	2340      	movs	r3, #64	; 0x40
   b5346:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5348:	4620      	mov	r0, r4
   b534a:	466b      	mov	r3, sp
   b534c:	aa0c      	add	r2, sp, #48	; 0x30
   b534e:	2100      	movs	r1, #0
   b5350:	f7ff fa3a 	bl	b47c8 <netdb_getaddrinfo>
    if (!r) {
   b5354:	4604      	mov	r4, r0
   b5356:	2800      	cmp	r0, #0
   b5358:	d14b      	bne.n	b53f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b535a:	4602      	mov	r2, r0
   b535c:	2101      	movs	r1, #1
   b535e:	6868      	ldr	r0, [r5, #4]
   b5360:	f7ff fb4e 	bl	b4a00 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5364:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5366:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5368:	4622      	mov	r2, r4
   b536a:	6868      	ldr	r0, [r5, #4]
   b536c:	f7ff fb48 	bl	b4a00 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5370:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5372:	4681      	mov	r9, r0
        bool ok = false;
   b5374:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5376:	2e00      	cmp	r6, #0
   b5378:	d03b      	beq.n	b53f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b537a:	2900      	cmp	r1, #0
   b537c:	d139      	bne.n	b53f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b537e:	6873      	ldr	r3, [r6, #4]
   b5380:	2b02      	cmp	r3, #2
   b5382:	d003      	beq.n	b538c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5384:	2b0a      	cmp	r3, #10
   b5386:	d011      	beq.n	b53ac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5388:	69f6      	ldr	r6, [r6, #28]
   b538a:	e7f4      	b.n	b5376 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b538c:	f1b8 0f00 	cmp.w	r8, #0
   b5390:	d0fa      	beq.n	b5388 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5392:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5394:	a806      	add	r0, sp, #24
   b5396:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5398:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b539a:	f7ff fdf5 	bl	b4f88 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b539e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53a0:	1d3c      	adds	r4, r7, #4
   b53a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53a4:	682b      	ldr	r3, [r5, #0]
   b53a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b53a8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b53aa:	e7ed      	b.n	b5388 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b53ac:	f1b9 0f00 	cmp.w	r9, #0
   b53b0:	d0ea      	beq.n	b5388 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b53b2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b53b4:	2210      	movs	r2, #16
   b53b6:	a801      	add	r0, sp, #4
   b53b8:	f001 fe00 	bl	b6fbc <memset>
                    a.v = 6;
   b53bc:	2306      	movs	r3, #6
   b53be:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b53c2:	ad01      	add	r5, sp, #4
   b53c4:	f104 0308 	add.w	r3, r4, #8
   b53c8:	3418      	adds	r4, #24
   b53ca:	6818      	ldr	r0, [r3, #0]
   b53cc:	6859      	ldr	r1, [r3, #4]
   b53ce:	462a      	mov	r2, r5
   b53d0:	c203      	stmia	r2!, {r0, r1}
   b53d2:	3308      	adds	r3, #8
   b53d4:	42a3      	cmp	r3, r4
   b53d6:	4615      	mov	r5, r2
   b53d8:	d1f7      	bne.n	b53ca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b53da:	a901      	add	r1, sp, #4
   b53dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b53de:	ad07      	add	r5, sp, #28
   b53e0:	f7ff fdb2 	bl	b4f48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b53e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53e6:	1d3c      	adds	r4, r7, #4
   b53e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53ea:	682b      	ldr	r3, [r5, #0]
   b53ec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b53ee:	4649      	mov	r1, r9
   b53f0:	e7ca      	b.n	b5388 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b53f2:	9800      	ldr	r0, [sp, #0]
   b53f4:	f7ff f9e0 	bl	b47b8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b53f8:	4638      	mov	r0, r7
   b53fa:	b015      	add	sp, #84	; 0x54
   b53fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5400 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5400:	4b02      	ldr	r3, [pc, #8]	; (b540c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5402:	4a03      	ldr	r2, [pc, #12]	; (b5410 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5404:	601a      	str	r2, [r3, #0]
   b5406:	2200      	movs	r2, #0
   b5408:	605a      	str	r2, [r3, #4]

} // spark
   b540a:	4770      	bx	lr
   b540c:	2003e720 	.word	0x2003e720
   b5410:	000b72ec 	.word	0x000b72ec

000b5414 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5414:	4770      	bx	lr
	...

000b5418 <_Z20acquireSerial1Bufferv>:
{
   b5418:	b538      	push	{r3, r4, r5, lr}
   b541a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b541c:	2514      	movs	r5, #20
   b541e:	462a      	mov	r2, r5
   b5420:	2100      	movs	r1, #0
   b5422:	f001 fdcb 	bl	b6fbc <memset>
   b5426:	8025      	strh	r5, [r4, #0]
   b5428:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b542a:	4907      	ldr	r1, [pc, #28]	; (b5448 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b542c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b542e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5430:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5432:	f000 f86b 	bl	b550c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5436:	4904      	ldr	r1, [pc, #16]	; (b5448 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5438:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b543a:	4628      	mov	r0, r5
   b543c:	f000 f866 	bl	b550c <_ZnajRKSt9nothrow_t>
    };
   b5440:	60e0      	str	r0, [r4, #12]
}
   b5442:	4620      	mov	r0, r4
   b5444:	bd38      	pop	{r3, r4, r5, pc}
   b5446:	bf00      	nop
   b5448:	000b7320 	.word	0x000b7320

000b544c <_Z22__fetch_global_Serial1v>:
{
   b544c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b544e:	4d0e      	ldr	r5, [pc, #56]	; (b5488 <_Z22__fetch_global_Serial1v+0x3c>)
   b5450:	7829      	ldrb	r1, [r5, #0]
   b5452:	f3bf 8f5b 	dmb	ish
   b5456:	f011 0401 	ands.w	r4, r1, #1
{
   b545a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b545c:	d111      	bne.n	b5482 <_Z22__fetch_global_Serial1v+0x36>
   b545e:	4628      	mov	r0, r5
   b5460:	f7fe fe1d 	bl	b409e <__cxa_guard_acquire>
   b5464:	b168      	cbz	r0, b5482 <_Z22__fetch_global_Serial1v+0x36>
   b5466:	a801      	add	r0, sp, #4
   b5468:	f7ff ffd6 	bl	b5418 <_Z20acquireSerial1Bufferv>
   b546c:	aa01      	add	r2, sp, #4
   b546e:	4621      	mov	r1, r4
   b5470:	4806      	ldr	r0, [pc, #24]	; (b548c <_Z22__fetch_global_Serial1v+0x40>)
   b5472:	f7ff fe57 	bl	b5124 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5476:	4628      	mov	r0, r5
   b5478:	f7fe fe16 	bl	b40a8 <__cxa_guard_release>
   b547c:	4804      	ldr	r0, [pc, #16]	; (b5490 <_Z22__fetch_global_Serial1v+0x44>)
   b547e:	f001 fd89 	bl	b6f94 <atexit>
    return serial1;
}
   b5482:	4802      	ldr	r0, [pc, #8]	; (b548c <_Z22__fetch_global_Serial1v+0x40>)
   b5484:	b007      	add	sp, #28
   b5486:	bd30      	pop	{r4, r5, pc}
   b5488:	2003e728 	.word	0x2003e728
   b548c:	2003e72c 	.word	0x2003e72c
   b5490:	000b5415 	.word	0x000b5415

000b5494 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5494:	4770      	bx	lr
	...

000b5498 <_Z17acquireWireBufferv>:
{
   b5498:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b549a:	2520      	movs	r5, #32
   b549c:	2314      	movs	r3, #20
{
   b549e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b54a0:	6003      	str	r3, [r0, #0]
   b54a2:	6085      	str	r5, [r0, #8]
   b54a4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b54a6:	4906      	ldr	r1, [pc, #24]	; (b54c0 <_Z17acquireWireBufferv+0x28>)
   b54a8:	4628      	mov	r0, r5
   b54aa:	f000 f82f 	bl	b550c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b54ae:	4904      	ldr	r1, [pc, #16]	; (b54c0 <_Z17acquireWireBufferv+0x28>)
	};
   b54b0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b54b2:	4628      	mov	r0, r5
   b54b4:	f000 f82a 	bl	b550c <_ZnajRKSt9nothrow_t>
	};
   b54b8:	60e0      	str	r0, [r4, #12]
}
   b54ba:	4620      	mov	r0, r4
   b54bc:	bd38      	pop	{r3, r4, r5, pc}
   b54be:	bf00      	nop
   b54c0:	000b7320 	.word	0x000b7320

000b54c4 <_Z19__fetch_global_Wirev>:
{
   b54c4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b54c6:	4d0e      	ldr	r5, [pc, #56]	; (b5500 <_Z19__fetch_global_Wirev+0x3c>)
   b54c8:	7829      	ldrb	r1, [r5, #0]
   b54ca:	f3bf 8f5b 	dmb	ish
   b54ce:	f011 0401 	ands.w	r4, r1, #1
{
   b54d2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b54d4:	d111      	bne.n	b54fa <_Z19__fetch_global_Wirev+0x36>
   b54d6:	4628      	mov	r0, r5
   b54d8:	f7fe fde1 	bl	b409e <__cxa_guard_acquire>
   b54dc:	b168      	cbz	r0, b54fa <_Z19__fetch_global_Wirev+0x36>
   b54de:	a801      	add	r0, sp, #4
   b54e0:	f7ff ffda 	bl	b5498 <_Z17acquireWireBufferv>
   b54e4:	aa01      	add	r2, sp, #4
   b54e6:	4621      	mov	r1, r4
   b54e8:	4806      	ldr	r0, [pc, #24]	; (b5504 <_Z19__fetch_global_Wirev+0x40>)
   b54ea:	f7ff fe5b 	bl	b51a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b54ee:	4628      	mov	r0, r5
   b54f0:	f7fe fdda 	bl	b40a8 <__cxa_guard_release>
   b54f4:	4804      	ldr	r0, [pc, #16]	; (b5508 <_Z19__fetch_global_Wirev+0x44>)
   b54f6:	f001 fd4d 	bl	b6f94 <atexit>
	return wire;
}
   b54fa:	4802      	ldr	r0, [pc, #8]	; (b5504 <_Z19__fetch_global_Wirev+0x40>)
   b54fc:	b007      	add	sp, #28
   b54fe:	bd30      	pop	{r4, r5, pc}
   b5500:	2003e744 	.word	0x2003e744
   b5504:	2003e748 	.word	0x2003e748
   b5508:	000b5495 	.word	0x000b5495

000b550c <_ZnajRKSt9nothrow_t>:
   b550c:	f7fe bdc3 	b.w	b4096 <_Znaj>

000b5510 <pow>:
   b5510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5512:	ed2d 8b02 	vpush	{d8}
   b5516:	ec57 6b10 	vmov	r6, r7, d0
   b551a:	ec55 4b11 	vmov	r4, r5, d1
   b551e:	f000 f8cb 	bl	b56b8 <__ieee754_pow>
   b5522:	4b63      	ldr	r3, [pc, #396]	; (b56b0 <pow+0x1a0>)
   b5524:	eeb0 8a40 	vmov.f32	s16, s0
   b5528:	eef0 8a60 	vmov.f32	s17, s1
   b552c:	f993 3000 	ldrsb.w	r3, [r3]
   b5530:	3301      	adds	r3, #1
   b5532:	d02a      	beq.n	b558a <pow+0x7a>
   b5534:	4622      	mov	r2, r4
   b5536:	462b      	mov	r3, r5
   b5538:	4620      	mov	r0, r4
   b553a:	4629      	mov	r1, r5
   b553c:	f001 fcc4 	bl	b6ec8 <__aeabi_dcmpun>
   b5540:	bb18      	cbnz	r0, b558a <pow+0x7a>
   b5542:	4632      	mov	r2, r6
   b5544:	463b      	mov	r3, r7
   b5546:	4630      	mov	r0, r6
   b5548:	4639      	mov	r1, r7
   b554a:	f001 fcbd 	bl	b6ec8 <__aeabi_dcmpun>
   b554e:	2800      	cmp	r0, #0
   b5550:	d144      	bne.n	b55dc <pow+0xcc>
   b5552:	2200      	movs	r2, #0
   b5554:	2300      	movs	r3, #0
   b5556:	4630      	mov	r0, r6
   b5558:	4639      	mov	r1, r7
   b555a:	f001 fc83 	bl	b6e64 <__aeabi_dcmpeq>
   b555e:	b1d8      	cbz	r0, b5598 <pow+0x88>
   b5560:	2200      	movs	r2, #0
   b5562:	2300      	movs	r3, #0
   b5564:	4620      	mov	r0, r4
   b5566:	4629      	mov	r1, r5
   b5568:	f001 fc7c 	bl	b6e64 <__aeabi_dcmpeq>
   b556c:	2800      	cmp	r0, #0
   b556e:	d13d      	bne.n	b55ec <pow+0xdc>
   b5570:	ec45 4b10 	vmov	d0, r4, r5
   b5574:	f000 ff10 	bl	b6398 <finite>
   b5578:	b138      	cbz	r0, b558a <pow+0x7a>
   b557a:	4620      	mov	r0, r4
   b557c:	4629      	mov	r1, r5
   b557e:	2200      	movs	r2, #0
   b5580:	2300      	movs	r3, #0
   b5582:	f001 fc79 	bl	b6e78 <__aeabi_dcmplt>
   b5586:	2800      	cmp	r0, #0
   b5588:	d15c      	bne.n	b5644 <pow+0x134>
   b558a:	eeb0 0a48 	vmov.f32	s0, s16
   b558e:	eef0 0a68 	vmov.f32	s1, s17
   b5592:	ecbd 8b02 	vpop	{d8}
   b5596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5598:	eeb0 0a48 	vmov.f32	s0, s16
   b559c:	eef0 0a68 	vmov.f32	s1, s17
   b55a0:	f000 fefa 	bl	b6398 <finite>
   b55a4:	b358      	cbz	r0, b55fe <pow+0xee>
   b55a6:	ec51 0b18 	vmov	r0, r1, d8
   b55aa:	2200      	movs	r2, #0
   b55ac:	2300      	movs	r3, #0
   b55ae:	f001 fc59 	bl	b6e64 <__aeabi_dcmpeq>
   b55b2:	2800      	cmp	r0, #0
   b55b4:	d0e9      	beq.n	b558a <pow+0x7a>
   b55b6:	ec47 6b10 	vmov	d0, r6, r7
   b55ba:	f000 feed 	bl	b6398 <finite>
   b55be:	2800      	cmp	r0, #0
   b55c0:	d0e3      	beq.n	b558a <pow+0x7a>
   b55c2:	ec45 4b10 	vmov	d0, r4, r5
   b55c6:	f000 fee7 	bl	b6398 <finite>
   b55ca:	2800      	cmp	r0, #0
   b55cc:	d0dd      	beq.n	b558a <pow+0x7a>
   b55ce:	f7ff fa7f 	bl	b4ad0 <__errno>
   b55d2:	2322      	movs	r3, #34	; 0x22
   b55d4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b5690 <pow+0x180>
   b55d8:	6003      	str	r3, [r0, #0]
   b55da:	e7d6      	b.n	b558a <pow+0x7a>
   b55dc:	4620      	mov	r0, r4
   b55de:	4629      	mov	r1, r5
   b55e0:	2200      	movs	r2, #0
   b55e2:	2300      	movs	r3, #0
   b55e4:	f001 fc3e 	bl	b6e64 <__aeabi_dcmpeq>
   b55e8:	2800      	cmp	r0, #0
   b55ea:	d0ce      	beq.n	b558a <pow+0x7a>
   b55ec:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b5698 <pow+0x188>
   b55f0:	eeb0 0a48 	vmov.f32	s0, s16
   b55f4:	eef0 0a68 	vmov.f32	s1, s17
   b55f8:	ecbd 8b02 	vpop	{d8}
   b55fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b55fe:	ec47 6b10 	vmov	d0, r6, r7
   b5602:	f000 fec9 	bl	b6398 <finite>
   b5606:	2800      	cmp	r0, #0
   b5608:	d0cd      	beq.n	b55a6 <pow+0x96>
   b560a:	ec45 4b10 	vmov	d0, r4, r5
   b560e:	f000 fec3 	bl	b6398 <finite>
   b5612:	2800      	cmp	r0, #0
   b5614:	d0c7      	beq.n	b55a6 <pow+0x96>
   b5616:	ec53 2b18 	vmov	r2, r3, d8
   b561a:	ee18 0a10 	vmov	r0, s16
   b561e:	4619      	mov	r1, r3
   b5620:	f001 fc52 	bl	b6ec8 <__aeabi_dcmpun>
   b5624:	bb20      	cbnz	r0, b5670 <pow+0x160>
   b5626:	f7ff fa53 	bl	b4ad0 <__errno>
   b562a:	4603      	mov	r3, r0
   b562c:	2222      	movs	r2, #34	; 0x22
   b562e:	601a      	str	r2, [r3, #0]
   b5630:	4630      	mov	r0, r6
   b5632:	4639      	mov	r1, r7
   b5634:	2200      	movs	r2, #0
   b5636:	2300      	movs	r3, #0
   b5638:	f001 fc1e 	bl	b6e78 <__aeabi_dcmplt>
   b563c:	b948      	cbnz	r0, b5652 <pow+0x142>
   b563e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b56a0 <pow+0x190>
   b5642:	e7a2      	b.n	b558a <pow+0x7a>
   b5644:	f7ff fa44 	bl	b4ad0 <__errno>
   b5648:	2321      	movs	r3, #33	; 0x21
   b564a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b56a8 <pow+0x198>
   b564e:	6003      	str	r3, [r0, #0]
   b5650:	e79b      	b.n	b558a <pow+0x7a>
   b5652:	ec45 4b10 	vmov	d0, r4, r5
   b5656:	f000 feb3 	bl	b63c0 <rint>
   b565a:	4622      	mov	r2, r4
   b565c:	ec51 0b10 	vmov	r0, r1, d0
   b5660:	462b      	mov	r3, r5
   b5662:	f001 fbff 	bl	b6e64 <__aeabi_dcmpeq>
   b5666:	2800      	cmp	r0, #0
   b5668:	d1e9      	bne.n	b563e <pow+0x12e>
   b566a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b56a8 <pow+0x198>
   b566e:	e78c      	b.n	b558a <pow+0x7a>
   b5670:	f7ff fa2e 	bl	b4ad0 <__errno>
   b5674:	2200      	movs	r2, #0
   b5676:	2300      	movs	r3, #0
   b5678:	2121      	movs	r1, #33	; 0x21
   b567a:	6001      	str	r1, [r0, #0]
   b567c:	4610      	mov	r0, r2
   b567e:	4619      	mov	r1, r3
   b5680:	f001 fab2 	bl	b6be8 <__aeabi_ddiv>
   b5684:	ec41 0b18 	vmov	d8, r0, r1
   b5688:	e77f      	b.n	b558a <pow+0x7a>
   b568a:	bf00      	nop
   b568c:	f3af 8000 	nop.w
	...
   b569c:	3ff00000 	.word	0x3ff00000
   b56a0:	00000000 	.word	0x00000000
   b56a4:	7ff00000 	.word	0x7ff00000
   b56a8:	00000000 	.word	0x00000000
   b56ac:	fff00000 	.word	0xfff00000
   b56b0:	2003e638 	.word	0x2003e638
   b56b4:	00000000 	.word	0x00000000

000b56b8 <__ieee754_pow>:
   b56b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56bc:	ec57 6b11 	vmov	r6, r7, d1
   b56c0:	ed2d 8b0c 	vpush	{d8-d13}
   b56c4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b56c8:	ea5a 0206 	orrs.w	r2, sl, r6
   b56cc:	b087      	sub	sp, #28
   b56ce:	d03d      	beq.n	b574c <__ieee754_pow+0x94>
   b56d0:	ec55 4b10 	vmov	r4, r5, d0
   b56d4:	4972      	ldr	r1, [pc, #456]	; (b58a0 <__ieee754_pow+0x1e8>)
   b56d6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b56da:	4588      	cmp	r8, r1
   b56dc:	ee10 2a10 	vmov	r2, s0
   b56e0:	46a9      	mov	r9, r5
   b56e2:	dc2c      	bgt.n	b573e <__ieee754_pow+0x86>
   b56e4:	ee11 3a10 	vmov	r3, s2
   b56e8:	46bb      	mov	fp, r7
   b56ea:	d036      	beq.n	b575a <__ieee754_pow+0xa2>
   b56ec:	458a      	cmp	sl, r1
   b56ee:	dc26      	bgt.n	b573e <__ieee754_pow+0x86>
   b56f0:	496b      	ldr	r1, [pc, #428]	; (b58a0 <__ieee754_pow+0x1e8>)
   b56f2:	458a      	cmp	sl, r1
   b56f4:	d021      	beq.n	b573a <__ieee754_pow+0x82>
   b56f6:	f1b9 0f00 	cmp.w	r9, #0
   b56fa:	db39      	blt.n	b5770 <__ieee754_pow+0xb8>
   b56fc:	2100      	movs	r1, #0
   b56fe:	9100      	str	r1, [sp, #0]
   b5700:	2b00      	cmp	r3, #0
   b5702:	d151      	bne.n	b57a8 <__ieee754_pow+0xf0>
   b5704:	4b66      	ldr	r3, [pc, #408]	; (b58a0 <__ieee754_pow+0x1e8>)
   b5706:	459a      	cmp	sl, r3
   b5708:	f000 80a2 	beq.w	b5850 <__ieee754_pow+0x198>
   b570c:	4b65      	ldr	r3, [pc, #404]	; (b58a4 <__ieee754_pow+0x1ec>)
   b570e:	459a      	cmp	sl, r3
   b5710:	f000 80b0 	beq.w	b5874 <__ieee754_pow+0x1bc>
   b5714:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b5718:	f000 84c0 	beq.w	b609c <__ieee754_pow+0x9e4>
   b571c:	4b62      	ldr	r3, [pc, #392]	; (b58a8 <__ieee754_pow+0x1f0>)
   b571e:	459b      	cmp	fp, r3
   b5720:	d142      	bne.n	b57a8 <__ieee754_pow+0xf0>
   b5722:	f1b9 0f00 	cmp.w	r9, #0
   b5726:	db3f      	blt.n	b57a8 <__ieee754_pow+0xf0>
   b5728:	ec45 4b10 	vmov	d0, r4, r5
   b572c:	b007      	add	sp, #28
   b572e:	ecbd 8b0c 	vpop	{d8-d13}
   b5732:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5736:	f000 bd59 	b.w	b61ec <__ieee754_sqrt>
   b573a:	2b00      	cmp	r3, #0
   b573c:	d0db      	beq.n	b56f6 <__ieee754_pow+0x3e>
   b573e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b5742:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b5746:	ea58 0302 	orrs.w	r3, r8, r2
   b574a:	d109      	bne.n	b5760 <__ieee754_pow+0xa8>
   b574c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b5890 <__ieee754_pow+0x1d8>
   b5750:	b007      	add	sp, #28
   b5752:	ecbd 8b0c 	vpop	{d8-d13}
   b5756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b575a:	b90c      	cbnz	r4, b5760 <__ieee754_pow+0xa8>
   b575c:	45c2      	cmp	sl, r8
   b575e:	ddc7      	ble.n	b56f0 <__ieee754_pow+0x38>
   b5760:	4852      	ldr	r0, [pc, #328]	; (b58ac <__ieee754_pow+0x1f4>)
   b5762:	b007      	add	sp, #28
   b5764:	ecbd 8b0c 	vpop	{d8-d13}
   b5768:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b576c:	f000 be20 	b.w	b63b0 <nan>
   b5770:	494f      	ldr	r1, [pc, #316]	; (b58b0 <__ieee754_pow+0x1f8>)
   b5772:	458a      	cmp	sl, r1
   b5774:	f300 8085 	bgt.w	b5882 <__ieee754_pow+0x1ca>
   b5778:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b577c:	458a      	cmp	sl, r1
   b577e:	dd0f      	ble.n	b57a0 <__ieee754_pow+0xe8>
   b5780:	ea4f 512a 	mov.w	r1, sl, asr #20
   b5784:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b5788:	2914      	cmp	r1, #20
   b578a:	f340 849b 	ble.w	b60c4 <__ieee754_pow+0xa0c>
   b578e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b5792:	fa23 f001 	lsr.w	r0, r3, r1
   b5796:	fa00 f101 	lsl.w	r1, r0, r1
   b579a:	4299      	cmp	r1, r3
   b579c:	f000 84ed 	beq.w	b617a <__ieee754_pow+0xac2>
   b57a0:	2100      	movs	r1, #0
   b57a2:	9100      	str	r1, [sp, #0]
   b57a4:	2b00      	cmp	r3, #0
   b57a6:	d0b1      	beq.n	b570c <__ieee754_pow+0x54>
   b57a8:	ec45 4b10 	vmov	d0, r4, r5
   b57ac:	9202      	str	r2, [sp, #8]
   b57ae:	f000 fde9 	bl	b6384 <fabs>
   b57b2:	9a02      	ldr	r2, [sp, #8]
   b57b4:	bb5a      	cbnz	r2, b580e <__ieee754_pow+0x156>
   b57b6:	f1b8 0f00 	cmp.w	r8, #0
   b57ba:	d004      	beq.n	b57c6 <__ieee754_pow+0x10e>
   b57bc:	4b39      	ldr	r3, [pc, #228]	; (b58a4 <__ieee754_pow+0x1ec>)
   b57be:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b57c2:	429a      	cmp	r2, r3
   b57c4:	d123      	bne.n	b580e <__ieee754_pow+0x156>
   b57c6:	f1bb 0f00 	cmp.w	fp, #0
   b57ca:	da07      	bge.n	b57dc <__ieee754_pow+0x124>
   b57cc:	ec53 2b10 	vmov	r2, r3, d0
   b57d0:	4934      	ldr	r1, [pc, #208]	; (b58a4 <__ieee754_pow+0x1ec>)
   b57d2:	2000      	movs	r0, #0
   b57d4:	f001 fa08 	bl	b6be8 <__aeabi_ddiv>
   b57d8:	ec41 0b10 	vmov	d0, r0, r1
   b57dc:	f1b9 0f00 	cmp.w	r9, #0
   b57e0:	dab6      	bge.n	b5750 <__ieee754_pow+0x98>
   b57e2:	9b00      	ldr	r3, [sp, #0]
   b57e4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b57e8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b57ec:	ea58 0303 	orrs.w	r3, r8, r3
   b57f0:	f040 848d 	bne.w	b610e <__ieee754_pow+0xa56>
   b57f4:	ec53 2b10 	vmov	r2, r3, d0
   b57f8:	4610      	mov	r0, r2
   b57fa:	4619      	mov	r1, r3
   b57fc:	f000 ff12 	bl	b6624 <__aeabi_dsub>
   b5800:	4602      	mov	r2, r0
   b5802:	460b      	mov	r3, r1
   b5804:	f001 f9f0 	bl	b6be8 <__aeabi_ddiv>
   b5808:	ec41 0b10 	vmov	d0, r0, r1
   b580c:	e7a0      	b.n	b5750 <__ieee754_pow+0x98>
   b580e:	9a00      	ldr	r2, [sp, #0]
   b5810:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b5814:	3b01      	subs	r3, #1
   b5816:	9304      	str	r3, [sp, #16]
   b5818:	4313      	orrs	r3, r2
   b581a:	d035      	beq.n	b5888 <__ieee754_pow+0x1d0>
   b581c:	4b25      	ldr	r3, [pc, #148]	; (b58b4 <__ieee754_pow+0x1fc>)
   b581e:	459a      	cmp	sl, r3
   b5820:	dd4c      	ble.n	b58bc <__ieee754_pow+0x204>
   b5822:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b5826:	459a      	cmp	sl, r3
   b5828:	4b23      	ldr	r3, [pc, #140]	; (b58b8 <__ieee754_pow+0x200>)
   b582a:	f340 83db 	ble.w	b5fe4 <__ieee754_pow+0x92c>
   b582e:	4598      	cmp	r8, r3
   b5830:	f340 8360 	ble.w	b5ef4 <__ieee754_pow+0x83c>
   b5834:	f1bb 0f00 	cmp.w	fp, #0
   b5838:	f340 8360 	ble.w	b5efc <__ieee754_pow+0x844>
   b583c:	a316      	add	r3, pc, #88	; (adr r3, b5898 <__ieee754_pow+0x1e0>)
   b583e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5842:	4610      	mov	r0, r2
   b5844:	4619      	mov	r1, r3
   b5846:	f001 f8a5 	bl	b6994 <__aeabi_dmul>
   b584a:	ec41 0b10 	vmov	d0, r0, r1
   b584e:	e77f      	b.n	b5750 <__ieee754_pow+0x98>
   b5850:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b5854:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b5858:	4313      	orrs	r3, r2
   b585a:	f43f af77 	beq.w	b574c <__ieee754_pow+0x94>
   b585e:	4b16      	ldr	r3, [pc, #88]	; (b58b8 <__ieee754_pow+0x200>)
   b5860:	4598      	cmp	r8, r3
   b5862:	f340 837a 	ble.w	b5f5a <__ieee754_pow+0x8a2>
   b5866:	f1bb 0f00 	cmp.w	fp, #0
   b586a:	f2c0 8347 	blt.w	b5efc <__ieee754_pow+0x844>
   b586e:	ec47 6b10 	vmov	d0, r6, r7
   b5872:	e76d      	b.n	b5750 <__ieee754_pow+0x98>
   b5874:	f1bb 0f00 	cmp.w	fp, #0
   b5878:	f2c0 841a 	blt.w	b60b0 <__ieee754_pow+0x9f8>
   b587c:	ec45 4b10 	vmov	d0, r4, r5
   b5880:	e766      	b.n	b5750 <__ieee754_pow+0x98>
   b5882:	2102      	movs	r1, #2
   b5884:	9100      	str	r1, [sp, #0]
   b5886:	e73b      	b.n	b5700 <__ieee754_pow+0x48>
   b5888:	4622      	mov	r2, r4
   b588a:	462b      	mov	r3, r5
   b588c:	e7b4      	b.n	b57f8 <__ieee754_pow+0x140>
   b588e:	bf00      	nop
   b5890:	00000000 	.word	0x00000000
   b5894:	3ff00000 	.word	0x3ff00000
   b5898:	8800759c 	.word	0x8800759c
   b589c:	7e37e43c 	.word	0x7e37e43c
   b58a0:	7ff00000 	.word	0x7ff00000
   b58a4:	3ff00000 	.word	0x3ff00000
   b58a8:	3fe00000 	.word	0x3fe00000
   b58ac:	000b7324 	.word	0x000b7324
   b58b0:	433fffff 	.word	0x433fffff
   b58b4:	41e00000 	.word	0x41e00000
   b58b8:	3fefffff 	.word	0x3fefffff
   b58bc:	4be4      	ldr	r3, [pc, #912]	; (b5c50 <__ieee754_pow+0x598>)
   b58be:	ea09 0303 	and.w	r3, r9, r3
   b58c2:	2200      	movs	r2, #0
   b58c4:	b953      	cbnz	r3, b58dc <__ieee754_pow+0x224>
   b58c6:	ec51 0b10 	vmov	r0, r1, d0
   b58ca:	4be2      	ldr	r3, [pc, #904]	; (b5c54 <__ieee754_pow+0x59c>)
   b58cc:	f001 f862 	bl	b6994 <__aeabi_dmul>
   b58d0:	ec41 0b10 	vmov	d0, r0, r1
   b58d4:	ee10 8a90 	vmov	r8, s1
   b58d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b58dc:	ea4f 5328 	mov.w	r3, r8, asr #20
   b58e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b58e4:	189a      	adds	r2, r3, r2
   b58e6:	4bdc      	ldr	r3, [pc, #880]	; (b5c58 <__ieee754_pow+0x5a0>)
   b58e8:	9205      	str	r2, [sp, #20]
   b58ea:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b58ee:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b58f2:	4598      	cmp	r8, r3
   b58f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b58f8:	dd07      	ble.n	b590a <__ieee754_pow+0x252>
   b58fa:	4bd8      	ldr	r3, [pc, #864]	; (b5c5c <__ieee754_pow+0x5a4>)
   b58fc:	4598      	cmp	r8, r3
   b58fe:	f340 8414 	ble.w	b612a <__ieee754_pow+0xa72>
   b5902:	3201      	adds	r2, #1
   b5904:	9205      	str	r2, [sp, #20]
   b5906:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b590a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b5bf0 <__ieee754_pow+0x538>
   b590e:	ed9f 7bba 	vldr	d7, [pc, #744]	; b5bf8 <__ieee754_pow+0x540>
   b5912:	ec53 2b16 	vmov	r2, r3, d6
   b5916:	eeb0 ca47 	vmov.f32	s24, s14
   b591a:	eef0 ca67 	vmov.f32	s25, s15
   b591e:	2500      	movs	r5, #0
   b5920:	eeb0 da47 	vmov.f32	s26, s14
   b5924:	eef0 da67 	vmov.f32	s27, s15
   b5928:	ec5b ab10 	vmov	sl, fp, d0
   b592c:	46a3      	mov	fp, r4
   b592e:	4650      	mov	r0, sl
   b5930:	4659      	mov	r1, fp
   b5932:	ec43 2b1a 	vmov	d10, r2, r3
   b5936:	f000 fe75 	bl	b6624 <__aeabi_dsub>
   b593a:	ec53 2b1a 	vmov	r2, r3, d10
   b593e:	4680      	mov	r8, r0
   b5940:	4689      	mov	r9, r1
   b5942:	4650      	mov	r0, sl
   b5944:	4659      	mov	r1, fp
   b5946:	f000 fe6f 	bl	b6628 <__adddf3>
   b594a:	4602      	mov	r2, r0
   b594c:	460b      	mov	r3, r1
   b594e:	2000      	movs	r0, #0
   b5950:	49c3      	ldr	r1, [pc, #780]	; (b5c60 <__ieee754_pow+0x5a8>)
   b5952:	f001 f949 	bl	b6be8 <__aeabi_ddiv>
   b5956:	ec41 0b1b 	vmov	d11, r0, r1
   b595a:	4640      	mov	r0, r8
   b595c:	ec53 2b1b 	vmov	r2, r3, d11
   b5960:	4649      	mov	r1, r9
   b5962:	f001 f817 	bl	b6994 <__aeabi_dmul>
   b5966:	ec41 0b18 	vmov	d8, r0, r1
   b596a:	460a      	mov	r2, r1
   b596c:	4601      	mov	r1, r0
   b596e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b5972:	2100      	movs	r1, #0
   b5974:	9102      	str	r1, [sp, #8]
   b5976:	1064      	asrs	r4, r4, #1
   b5978:	ec4b ab19 	vmov	d9, sl, fp
   b597c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b5980:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b5984:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b5988:	2000      	movs	r0, #0
   b598a:	1959      	adds	r1, r3, r5
   b598c:	4604      	mov	r4, r0
   b598e:	460d      	mov	r5, r1
   b5990:	4602      	mov	r2, r0
   b5992:	460b      	mov	r3, r1
   b5994:	4650      	mov	r0, sl
   b5996:	4659      	mov	r1, fp
   b5998:	f000 fffc 	bl	b6994 <__aeabi_dmul>
   b599c:	4602      	mov	r2, r0
   b599e:	460b      	mov	r3, r1
   b59a0:	4640      	mov	r0, r8
   b59a2:	4649      	mov	r1, r9
   b59a4:	f000 fe3e 	bl	b6624 <__aeabi_dsub>
   b59a8:	ec53 2b1a 	vmov	r2, r3, d10
   b59ac:	4680      	mov	r8, r0
   b59ae:	4689      	mov	r9, r1
   b59b0:	4620      	mov	r0, r4
   b59b2:	4629      	mov	r1, r5
   b59b4:	f000 fe36 	bl	b6624 <__aeabi_dsub>
   b59b8:	4602      	mov	r2, r0
   b59ba:	460b      	mov	r3, r1
   b59bc:	ec51 0b19 	vmov	r0, r1, d9
   b59c0:	f000 fe30 	bl	b6624 <__aeabi_dsub>
   b59c4:	4652      	mov	r2, sl
   b59c6:	465b      	mov	r3, fp
   b59c8:	f000 ffe4 	bl	b6994 <__aeabi_dmul>
   b59cc:	4602      	mov	r2, r0
   b59ce:	460b      	mov	r3, r1
   b59d0:	4640      	mov	r0, r8
   b59d2:	4649      	mov	r1, r9
   b59d4:	f000 fe26 	bl	b6624 <__aeabi_dsub>
   b59d8:	ec53 2b1b 	vmov	r2, r3, d11
   b59dc:	f000 ffda 	bl	b6994 <__aeabi_dmul>
   b59e0:	ec53 2b18 	vmov	r2, r3, d8
   b59e4:	ec41 0b19 	vmov	d9, r0, r1
   b59e8:	ec51 0b18 	vmov	r0, r1, d8
   b59ec:	f000 ffd2 	bl	b6994 <__aeabi_dmul>
   b59f0:	a383      	add	r3, pc, #524	; (adr r3, b5c00 <__ieee754_pow+0x548>)
   b59f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59f6:	4604      	mov	r4, r0
   b59f8:	460d      	mov	r5, r1
   b59fa:	f000 ffcb 	bl	b6994 <__aeabi_dmul>
   b59fe:	a382      	add	r3, pc, #520	; (adr r3, b5c08 <__ieee754_pow+0x550>)
   b5a00:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a04:	f000 fe10 	bl	b6628 <__adddf3>
   b5a08:	4622      	mov	r2, r4
   b5a0a:	462b      	mov	r3, r5
   b5a0c:	f000 ffc2 	bl	b6994 <__aeabi_dmul>
   b5a10:	a37f      	add	r3, pc, #508	; (adr r3, b5c10 <__ieee754_pow+0x558>)
   b5a12:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a16:	f000 fe07 	bl	b6628 <__adddf3>
   b5a1a:	4622      	mov	r2, r4
   b5a1c:	462b      	mov	r3, r5
   b5a1e:	f000 ffb9 	bl	b6994 <__aeabi_dmul>
   b5a22:	a37d      	add	r3, pc, #500	; (adr r3, b5c18 <__ieee754_pow+0x560>)
   b5a24:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a28:	f000 fdfe 	bl	b6628 <__adddf3>
   b5a2c:	4622      	mov	r2, r4
   b5a2e:	462b      	mov	r3, r5
   b5a30:	f000 ffb0 	bl	b6994 <__aeabi_dmul>
   b5a34:	a37a      	add	r3, pc, #488	; (adr r3, b5c20 <__ieee754_pow+0x568>)
   b5a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a3a:	f000 fdf5 	bl	b6628 <__adddf3>
   b5a3e:	4622      	mov	r2, r4
   b5a40:	462b      	mov	r3, r5
   b5a42:	f000 ffa7 	bl	b6994 <__aeabi_dmul>
   b5a46:	a378      	add	r3, pc, #480	; (adr r3, b5c28 <__ieee754_pow+0x570>)
   b5a48:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a4c:	f000 fdec 	bl	b6628 <__adddf3>
   b5a50:	4622      	mov	r2, r4
   b5a52:	4680      	mov	r8, r0
   b5a54:	4689      	mov	r9, r1
   b5a56:	462b      	mov	r3, r5
   b5a58:	4620      	mov	r0, r4
   b5a5a:	4629      	mov	r1, r5
   b5a5c:	f000 ff9a 	bl	b6994 <__aeabi_dmul>
   b5a60:	4602      	mov	r2, r0
   b5a62:	460b      	mov	r3, r1
   b5a64:	4640      	mov	r0, r8
   b5a66:	4649      	mov	r1, r9
   b5a68:	f000 ff94 	bl	b6994 <__aeabi_dmul>
   b5a6c:	4652      	mov	r2, sl
   b5a6e:	4604      	mov	r4, r0
   b5a70:	460d      	mov	r5, r1
   b5a72:	465b      	mov	r3, fp
   b5a74:	ec51 0b18 	vmov	r0, r1, d8
   b5a78:	f000 fdd6 	bl	b6628 <__adddf3>
   b5a7c:	ec53 2b19 	vmov	r2, r3, d9
   b5a80:	f000 ff88 	bl	b6994 <__aeabi_dmul>
   b5a84:	4622      	mov	r2, r4
   b5a86:	462b      	mov	r3, r5
   b5a88:	f000 fdce 	bl	b6628 <__adddf3>
   b5a8c:	4652      	mov	r2, sl
   b5a8e:	4680      	mov	r8, r0
   b5a90:	4689      	mov	r9, r1
   b5a92:	465b      	mov	r3, fp
   b5a94:	4650      	mov	r0, sl
   b5a96:	4659      	mov	r1, fp
   b5a98:	f000 ff7c 	bl	b6994 <__aeabi_dmul>
   b5a9c:	4602      	mov	r2, r0
   b5a9e:	460b      	mov	r3, r1
   b5aa0:	ec43 2b1a 	vmov	d10, r2, r3
   b5aa4:	4b6f      	ldr	r3, [pc, #444]	; (b5c64 <__ieee754_pow+0x5ac>)
   b5aa6:	2200      	movs	r2, #0
   b5aa8:	f000 fdbe 	bl	b6628 <__adddf3>
   b5aac:	4642      	mov	r2, r8
   b5aae:	464b      	mov	r3, r9
   b5ab0:	f000 fdba 	bl	b6628 <__adddf3>
   b5ab4:	2400      	movs	r4, #0
   b5ab6:	460d      	mov	r5, r1
   b5ab8:	4622      	mov	r2, r4
   b5aba:	462b      	mov	r3, r5
   b5abc:	4650      	mov	r0, sl
   b5abe:	4659      	mov	r1, fp
   b5ac0:	f000 ff68 	bl	b6994 <__aeabi_dmul>
   b5ac4:	4b67      	ldr	r3, [pc, #412]	; (b5c64 <__ieee754_pow+0x5ac>)
   b5ac6:	4682      	mov	sl, r0
   b5ac8:	468b      	mov	fp, r1
   b5aca:	2200      	movs	r2, #0
   b5acc:	4620      	mov	r0, r4
   b5ace:	4629      	mov	r1, r5
   b5ad0:	f000 fda8 	bl	b6624 <__aeabi_dsub>
   b5ad4:	ec53 2b1a 	vmov	r2, r3, d10
   b5ad8:	f000 fda4 	bl	b6624 <__aeabi_dsub>
   b5adc:	4602      	mov	r2, r0
   b5ade:	460b      	mov	r3, r1
   b5ae0:	4640      	mov	r0, r8
   b5ae2:	4649      	mov	r1, r9
   b5ae4:	f000 fd9e 	bl	b6624 <__aeabi_dsub>
   b5ae8:	ec53 2b18 	vmov	r2, r3, d8
   b5aec:	f000 ff52 	bl	b6994 <__aeabi_dmul>
   b5af0:	4622      	mov	r2, r4
   b5af2:	462b      	mov	r3, r5
   b5af4:	4604      	mov	r4, r0
   b5af6:	460d      	mov	r5, r1
   b5af8:	ec51 0b19 	vmov	r0, r1, d9
   b5afc:	f000 ff4a 	bl	b6994 <__aeabi_dmul>
   b5b00:	4602      	mov	r2, r0
   b5b02:	460b      	mov	r3, r1
   b5b04:	4620      	mov	r0, r4
   b5b06:	4629      	mov	r1, r5
   b5b08:	f000 fd8e 	bl	b6628 <__adddf3>
   b5b0c:	4680      	mov	r8, r0
   b5b0e:	4689      	mov	r9, r1
   b5b10:	4642      	mov	r2, r8
   b5b12:	464b      	mov	r3, r9
   b5b14:	4650      	mov	r0, sl
   b5b16:	4659      	mov	r1, fp
   b5b18:	f000 fd86 	bl	b6628 <__adddf3>
   b5b1c:	a344      	add	r3, pc, #272	; (adr r3, b5c30 <__ieee754_pow+0x578>)
   b5b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b22:	2000      	movs	r0, #0
   b5b24:	4604      	mov	r4, r0
   b5b26:	460d      	mov	r5, r1
   b5b28:	f000 ff34 	bl	b6994 <__aeabi_dmul>
   b5b2c:	4652      	mov	r2, sl
   b5b2e:	ec41 0b19 	vmov	d9, r0, r1
   b5b32:	465b      	mov	r3, fp
   b5b34:	4620      	mov	r0, r4
   b5b36:	4629      	mov	r1, r5
   b5b38:	f000 fd74 	bl	b6624 <__aeabi_dsub>
   b5b3c:	4602      	mov	r2, r0
   b5b3e:	460b      	mov	r3, r1
   b5b40:	4640      	mov	r0, r8
   b5b42:	4649      	mov	r1, r9
   b5b44:	f000 fd6e 	bl	b6624 <__aeabi_dsub>
   b5b48:	a33b      	add	r3, pc, #236	; (adr r3, b5c38 <__ieee754_pow+0x580>)
   b5b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b4e:	f000 ff21 	bl	b6994 <__aeabi_dmul>
   b5b52:	4602      	mov	r2, r0
   b5b54:	460b      	mov	r3, r1
   b5b56:	4620      	mov	r0, r4
   b5b58:	4629      	mov	r1, r5
   b5b5a:	4614      	mov	r4, r2
   b5b5c:	461d      	mov	r5, r3
   b5b5e:	a338      	add	r3, pc, #224	; (adr r3, b5c40 <__ieee754_pow+0x588>)
   b5b60:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b64:	f000 ff16 	bl	b6994 <__aeabi_dmul>
   b5b68:	4602      	mov	r2, r0
   b5b6a:	460b      	mov	r3, r1
   b5b6c:	4620      	mov	r0, r4
   b5b6e:	4629      	mov	r1, r5
   b5b70:	f000 fd5a 	bl	b6628 <__adddf3>
   b5b74:	ec53 2b1d 	vmov	r2, r3, d13
   b5b78:	f000 fd56 	bl	b6628 <__adddf3>
   b5b7c:	4680      	mov	r8, r0
   b5b7e:	9805      	ldr	r0, [sp, #20]
   b5b80:	4689      	mov	r9, r1
   b5b82:	f000 fe9d 	bl	b68c0 <__aeabi_i2d>
   b5b86:	4642      	mov	r2, r8
   b5b88:	4682      	mov	sl, r0
   b5b8a:	468b      	mov	fp, r1
   b5b8c:	464b      	mov	r3, r9
   b5b8e:	ec51 0b19 	vmov	r0, r1, d9
   b5b92:	f000 fd49 	bl	b6628 <__adddf3>
   b5b96:	ec53 2b1c 	vmov	r2, r3, d12
   b5b9a:	f000 fd45 	bl	b6628 <__adddf3>
   b5b9e:	4652      	mov	r2, sl
   b5ba0:	465b      	mov	r3, fp
   b5ba2:	f000 fd41 	bl	b6628 <__adddf3>
   b5ba6:	4652      	mov	r2, sl
   b5ba8:	465b      	mov	r3, fp
   b5baa:	2000      	movs	r0, #0
   b5bac:	4604      	mov	r4, r0
   b5bae:	460d      	mov	r5, r1
   b5bb0:	f000 fd38 	bl	b6624 <__aeabi_dsub>
   b5bb4:	ec53 2b1c 	vmov	r2, r3, d12
   b5bb8:	f000 fd34 	bl	b6624 <__aeabi_dsub>
   b5bbc:	ec53 2b19 	vmov	r2, r3, d9
   b5bc0:	f000 fd30 	bl	b6624 <__aeabi_dsub>
   b5bc4:	4602      	mov	r2, r0
   b5bc6:	460b      	mov	r3, r1
   b5bc8:	4640      	mov	r0, r8
   b5bca:	4649      	mov	r1, r9
   b5bcc:	f000 fd2a 	bl	b6624 <__aeabi_dsub>
   b5bd0:	9b00      	ldr	r3, [sp, #0]
   b5bd2:	9a04      	ldr	r2, [sp, #16]
   b5bd4:	3b01      	subs	r3, #1
   b5bd6:	4313      	orrs	r3, r2
   b5bd8:	4682      	mov	sl, r0
   b5bda:	468b      	mov	fp, r1
   b5bdc:	f040 81b6 	bne.w	b5f4c <__ieee754_pow+0x894>
   b5be0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b5c48 <__ieee754_pow+0x590>
   b5be4:	eeb0 8a47 	vmov.f32	s16, s14
   b5be8:	eef0 8a67 	vmov.f32	s17, s15
   b5bec:	e03c      	b.n	b5c68 <__ieee754_pow+0x5b0>
   b5bee:	bf00      	nop
   b5bf0:	00000000 	.word	0x00000000
   b5bf4:	3ff00000 	.word	0x3ff00000
	...
   b5c00:	4a454eef 	.word	0x4a454eef
   b5c04:	3fca7e28 	.word	0x3fca7e28
   b5c08:	93c9db65 	.word	0x93c9db65
   b5c0c:	3fcd864a 	.word	0x3fcd864a
   b5c10:	a91d4101 	.word	0xa91d4101
   b5c14:	3fd17460 	.word	0x3fd17460
   b5c18:	518f264d 	.word	0x518f264d
   b5c1c:	3fd55555 	.word	0x3fd55555
   b5c20:	db6fabff 	.word	0xdb6fabff
   b5c24:	3fdb6db6 	.word	0x3fdb6db6
   b5c28:	33333303 	.word	0x33333303
   b5c2c:	3fe33333 	.word	0x3fe33333
   b5c30:	e0000000 	.word	0xe0000000
   b5c34:	3feec709 	.word	0x3feec709
   b5c38:	dc3a03fd 	.word	0xdc3a03fd
   b5c3c:	3feec709 	.word	0x3feec709
   b5c40:	145b01f5 	.word	0x145b01f5
   b5c44:	be3e2fe0 	.word	0xbe3e2fe0
   b5c48:	00000000 	.word	0x00000000
   b5c4c:	bff00000 	.word	0xbff00000
   b5c50:	7ff00000 	.word	0x7ff00000
   b5c54:	43400000 	.word	0x43400000
   b5c58:	0003988e 	.word	0x0003988e
   b5c5c:	000bb679 	.word	0x000bb679
   b5c60:	3ff00000 	.word	0x3ff00000
   b5c64:	40080000 	.word	0x40080000
   b5c68:	2300      	movs	r3, #0
   b5c6a:	e9cd 6700 	strd	r6, r7, [sp]
   b5c6e:	9300      	str	r3, [sp, #0]
   b5c70:	e9dd 8900 	ldrd	r8, r9, [sp]
   b5c74:	4630      	mov	r0, r6
   b5c76:	4642      	mov	r2, r8
   b5c78:	464b      	mov	r3, r9
   b5c7a:	4639      	mov	r1, r7
   b5c7c:	f000 fcd2 	bl	b6624 <__aeabi_dsub>
   b5c80:	4622      	mov	r2, r4
   b5c82:	462b      	mov	r3, r5
   b5c84:	f000 fe86 	bl	b6994 <__aeabi_dmul>
   b5c88:	4632      	mov	r2, r6
   b5c8a:	463b      	mov	r3, r7
   b5c8c:	4606      	mov	r6, r0
   b5c8e:	460f      	mov	r7, r1
   b5c90:	4650      	mov	r0, sl
   b5c92:	4659      	mov	r1, fp
   b5c94:	f000 fe7e 	bl	b6994 <__aeabi_dmul>
   b5c98:	4602      	mov	r2, r0
   b5c9a:	460b      	mov	r3, r1
   b5c9c:	4630      	mov	r0, r6
   b5c9e:	4639      	mov	r1, r7
   b5ca0:	f000 fcc2 	bl	b6628 <__adddf3>
   b5ca4:	4642      	mov	r2, r8
   b5ca6:	464b      	mov	r3, r9
   b5ca8:	4606      	mov	r6, r0
   b5caa:	460f      	mov	r7, r1
   b5cac:	4620      	mov	r0, r4
   b5cae:	4629      	mov	r1, r5
   b5cb0:	f000 fe70 	bl	b6994 <__aeabi_dmul>
   b5cb4:	4604      	mov	r4, r0
   b5cb6:	460d      	mov	r5, r1
   b5cb8:	462b      	mov	r3, r5
   b5cba:	4630      	mov	r0, r6
   b5cbc:	4639      	mov	r1, r7
   b5cbe:	4622      	mov	r2, r4
   b5cc0:	f000 fcb2 	bl	b6628 <__adddf3>
   b5cc4:	4bc2      	ldr	r3, [pc, #776]	; (b5fd0 <__ieee754_pow+0x918>)
   b5cc6:	4299      	cmp	r1, r3
   b5cc8:	4680      	mov	r8, r0
   b5cca:	4689      	mov	r9, r1
   b5ccc:	468a      	mov	sl, r1
   b5cce:	f340 8118 	ble.w	b5f02 <__ieee754_pow+0x84a>
   b5cd2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b5cd6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b5cda:	4303      	orrs	r3, r0
   b5cdc:	f040 8207 	bne.w	b60ee <__ieee754_pow+0xa36>
   b5ce0:	a3a3      	add	r3, pc, #652	; (adr r3, b5f70 <__ieee754_pow+0x8b8>)
   b5ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5ce6:	4630      	mov	r0, r6
   b5ce8:	4639      	mov	r1, r7
   b5cea:	f000 fc9d 	bl	b6628 <__adddf3>
   b5cee:	4602      	mov	r2, r0
   b5cf0:	460b      	mov	r3, r1
   b5cf2:	4640      	mov	r0, r8
   b5cf4:	4649      	mov	r1, r9
   b5cf6:	4690      	mov	r8, r2
   b5cf8:	4699      	mov	r9, r3
   b5cfa:	4622      	mov	r2, r4
   b5cfc:	462b      	mov	r3, r5
   b5cfe:	f000 fc91 	bl	b6624 <__aeabi_dsub>
   b5d02:	4602      	mov	r2, r0
   b5d04:	460b      	mov	r3, r1
   b5d06:	4640      	mov	r0, r8
   b5d08:	4649      	mov	r1, r9
   b5d0a:	f001 f8d3 	bl	b6eb4 <__aeabi_dcmpgt>
   b5d0e:	2800      	cmp	r0, #0
   b5d10:	f040 81ed 	bne.w	b60ee <__ieee754_pow+0xa36>
   b5d14:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b5d18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b5d1c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b5d20:	fa42 f303 	asr.w	r3, r2, r3
   b5d24:	4453      	add	r3, sl
   b5d26:	49ab      	ldr	r1, [pc, #684]	; (b5fd4 <__ieee754_pow+0x91c>)
   b5d28:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b5d2c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b5d30:	fa41 fc02 	asr.w	ip, r1, r2
   b5d34:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b5d38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5d3c:	f1c2 0214 	rsb	r2, r2, #20
   b5d40:	fa41 f202 	asr.w	r2, r1, r2
   b5d44:	2000      	movs	r0, #0
   b5d46:	ea23 010c 	bic.w	r1, r3, ip
   b5d4a:	f1ba 0f00 	cmp.w	sl, #0
   b5d4e:	9200      	str	r2, [sp, #0]
   b5d50:	460b      	mov	r3, r1
   b5d52:	4602      	mov	r2, r0
   b5d54:	da02      	bge.n	b5d5c <__ieee754_pow+0x6a4>
   b5d56:	9900      	ldr	r1, [sp, #0]
   b5d58:	4249      	negs	r1, r1
   b5d5a:	9100      	str	r1, [sp, #0]
   b5d5c:	4620      	mov	r0, r4
   b5d5e:	4629      	mov	r1, r5
   b5d60:	f000 fc60 	bl	b6624 <__aeabi_dsub>
   b5d64:	9b00      	ldr	r3, [sp, #0]
   b5d66:	051b      	lsls	r3, r3, #20
   b5d68:	9302      	str	r3, [sp, #8]
   b5d6a:	4602      	mov	r2, r0
   b5d6c:	460b      	mov	r3, r1
   b5d6e:	4604      	mov	r4, r0
   b5d70:	460d      	mov	r5, r1
   b5d72:	4630      	mov	r0, r6
   b5d74:	4639      	mov	r1, r7
   b5d76:	f000 fc57 	bl	b6628 <__adddf3>
   b5d7a:	4689      	mov	r9, r1
   b5d7c:	f04f 0800 	mov.w	r8, #0
   b5d80:	a37d      	add	r3, pc, #500	; (adr r3, b5f78 <__ieee754_pow+0x8c0>)
   b5d82:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d86:	4640      	mov	r0, r8
   b5d88:	4649      	mov	r1, r9
   b5d8a:	f000 fe03 	bl	b6994 <__aeabi_dmul>
   b5d8e:	4622      	mov	r2, r4
   b5d90:	462b      	mov	r3, r5
   b5d92:	4682      	mov	sl, r0
   b5d94:	468b      	mov	fp, r1
   b5d96:	4640      	mov	r0, r8
   b5d98:	4649      	mov	r1, r9
   b5d9a:	f000 fc43 	bl	b6624 <__aeabi_dsub>
   b5d9e:	4602      	mov	r2, r0
   b5da0:	460b      	mov	r3, r1
   b5da2:	4630      	mov	r0, r6
   b5da4:	4639      	mov	r1, r7
   b5da6:	f000 fc3d 	bl	b6624 <__aeabi_dsub>
   b5daa:	a375      	add	r3, pc, #468	; (adr r3, b5f80 <__ieee754_pow+0x8c8>)
   b5dac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5db0:	f000 fdf0 	bl	b6994 <__aeabi_dmul>
   b5db4:	a374      	add	r3, pc, #464	; (adr r3, b5f88 <__ieee754_pow+0x8d0>)
   b5db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5dba:	4604      	mov	r4, r0
   b5dbc:	460d      	mov	r5, r1
   b5dbe:	4640      	mov	r0, r8
   b5dc0:	4649      	mov	r1, r9
   b5dc2:	f000 fde7 	bl	b6994 <__aeabi_dmul>
   b5dc6:	4602      	mov	r2, r0
   b5dc8:	460b      	mov	r3, r1
   b5dca:	4620      	mov	r0, r4
   b5dcc:	4629      	mov	r1, r5
   b5dce:	f000 fc2b 	bl	b6628 <__adddf3>
   b5dd2:	4606      	mov	r6, r0
   b5dd4:	460f      	mov	r7, r1
   b5dd6:	4632      	mov	r2, r6
   b5dd8:	463b      	mov	r3, r7
   b5dda:	4650      	mov	r0, sl
   b5ddc:	4659      	mov	r1, fp
   b5dde:	f000 fc23 	bl	b6628 <__adddf3>
   b5de2:	4652      	mov	r2, sl
   b5de4:	465b      	mov	r3, fp
   b5de6:	4604      	mov	r4, r0
   b5de8:	460d      	mov	r5, r1
   b5dea:	f000 fc1b 	bl	b6624 <__aeabi_dsub>
   b5dee:	4602      	mov	r2, r0
   b5df0:	460b      	mov	r3, r1
   b5df2:	4630      	mov	r0, r6
   b5df4:	4639      	mov	r1, r7
   b5df6:	f000 fc15 	bl	b6624 <__aeabi_dsub>
   b5dfa:	4622      	mov	r2, r4
   b5dfc:	4680      	mov	r8, r0
   b5dfe:	4689      	mov	r9, r1
   b5e00:	462b      	mov	r3, r5
   b5e02:	4620      	mov	r0, r4
   b5e04:	4629      	mov	r1, r5
   b5e06:	f000 fdc5 	bl	b6994 <__aeabi_dmul>
   b5e0a:	a361      	add	r3, pc, #388	; (adr r3, b5f90 <__ieee754_pow+0x8d8>)
   b5e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e10:	4606      	mov	r6, r0
   b5e12:	460f      	mov	r7, r1
   b5e14:	f000 fdbe 	bl	b6994 <__aeabi_dmul>
   b5e18:	a35f      	add	r3, pc, #380	; (adr r3, b5f98 <__ieee754_pow+0x8e0>)
   b5e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e1e:	f000 fc01 	bl	b6624 <__aeabi_dsub>
   b5e22:	4632      	mov	r2, r6
   b5e24:	463b      	mov	r3, r7
   b5e26:	f000 fdb5 	bl	b6994 <__aeabi_dmul>
   b5e2a:	a35d      	add	r3, pc, #372	; (adr r3, b5fa0 <__ieee754_pow+0x8e8>)
   b5e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e30:	f000 fbfa 	bl	b6628 <__adddf3>
   b5e34:	4632      	mov	r2, r6
   b5e36:	463b      	mov	r3, r7
   b5e38:	f000 fdac 	bl	b6994 <__aeabi_dmul>
   b5e3c:	a35a      	add	r3, pc, #360	; (adr r3, b5fa8 <__ieee754_pow+0x8f0>)
   b5e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e42:	f000 fbef 	bl	b6624 <__aeabi_dsub>
   b5e46:	4632      	mov	r2, r6
   b5e48:	463b      	mov	r3, r7
   b5e4a:	f000 fda3 	bl	b6994 <__aeabi_dmul>
   b5e4e:	a358      	add	r3, pc, #352	; (adr r3, b5fb0 <__ieee754_pow+0x8f8>)
   b5e50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e54:	f000 fbe8 	bl	b6628 <__adddf3>
   b5e58:	4632      	mov	r2, r6
   b5e5a:	463b      	mov	r3, r7
   b5e5c:	f000 fd9a 	bl	b6994 <__aeabi_dmul>
   b5e60:	4602      	mov	r2, r0
   b5e62:	460b      	mov	r3, r1
   b5e64:	4620      	mov	r0, r4
   b5e66:	4629      	mov	r1, r5
   b5e68:	f000 fbdc 	bl	b6624 <__aeabi_dsub>
   b5e6c:	4606      	mov	r6, r0
   b5e6e:	460f      	mov	r7, r1
   b5e70:	4632      	mov	r2, r6
   b5e72:	463b      	mov	r3, r7
   b5e74:	4620      	mov	r0, r4
   b5e76:	4629      	mov	r1, r5
   b5e78:	f000 fd8c 	bl	b6994 <__aeabi_dmul>
   b5e7c:	4602      	mov	r2, r0
   b5e7e:	460b      	mov	r3, r1
   b5e80:	4630      	mov	r0, r6
   b5e82:	4639      	mov	r1, r7
   b5e84:	4616      	mov	r6, r2
   b5e86:	461f      	mov	r7, r3
   b5e88:	2200      	movs	r2, #0
   b5e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b5e8e:	f000 fbc9 	bl	b6624 <__aeabi_dsub>
   b5e92:	4602      	mov	r2, r0
   b5e94:	460b      	mov	r3, r1
   b5e96:	4630      	mov	r0, r6
   b5e98:	4639      	mov	r1, r7
   b5e9a:	f000 fea5 	bl	b6be8 <__aeabi_ddiv>
   b5e9e:	4642      	mov	r2, r8
   b5ea0:	4606      	mov	r6, r0
   b5ea2:	460f      	mov	r7, r1
   b5ea4:	464b      	mov	r3, r9
   b5ea6:	4620      	mov	r0, r4
   b5ea8:	4629      	mov	r1, r5
   b5eaa:	f000 fd73 	bl	b6994 <__aeabi_dmul>
   b5eae:	4642      	mov	r2, r8
   b5eb0:	464b      	mov	r3, r9
   b5eb2:	f000 fbb9 	bl	b6628 <__adddf3>
   b5eb6:	4602      	mov	r2, r0
   b5eb8:	460b      	mov	r3, r1
   b5eba:	4630      	mov	r0, r6
   b5ebc:	4639      	mov	r1, r7
   b5ebe:	f000 fbb1 	bl	b6624 <__aeabi_dsub>
   b5ec2:	4622      	mov	r2, r4
   b5ec4:	462b      	mov	r3, r5
   b5ec6:	f000 fbad 	bl	b6624 <__aeabi_dsub>
   b5eca:	4602      	mov	r2, r0
   b5ecc:	460b      	mov	r3, r1
   b5ece:	2000      	movs	r0, #0
   b5ed0:	4941      	ldr	r1, [pc, #260]	; (b5fd8 <__ieee754_pow+0x920>)
   b5ed2:	f000 fba7 	bl	b6624 <__aeabi_dsub>
   b5ed6:	9a02      	ldr	r2, [sp, #8]
   b5ed8:	460b      	mov	r3, r1
   b5eda:	4413      	add	r3, r2
   b5edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b5ee0:	f2c0 8143 	blt.w	b616a <__ieee754_pow+0xab2>
   b5ee4:	4619      	mov	r1, r3
   b5ee6:	ec53 2b18 	vmov	r2, r3, d8
   b5eea:	f000 fd53 	bl	b6994 <__aeabi_dmul>
   b5eee:	ec41 0b10 	vmov	d0, r0, r1
   b5ef2:	e42d      	b.n	b5750 <__ieee754_pow+0x98>
   b5ef4:	f1bb 0f00 	cmp.w	fp, #0
   b5ef8:	f6ff aca0 	blt.w	b583c <__ieee754_pow+0x184>
   b5efc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b5fb8 <__ieee754_pow+0x900>
   b5f00:	e426      	b.n	b5750 <__ieee754_pow+0x98>
   b5f02:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b5fe0 <__ieee754_pow+0x928>
   b5f06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b5f0a:	4563      	cmp	r3, ip
   b5f0c:	f340 80e7 	ble.w	b60de <__ieee754_pow+0xa26>
   b5f10:	4b32      	ldr	r3, [pc, #200]	; (b5fdc <__ieee754_pow+0x924>)
   b5f12:	440b      	add	r3, r1
   b5f14:	4303      	orrs	r3, r0
   b5f16:	d10a      	bne.n	b5f2e <__ieee754_pow+0x876>
   b5f18:	4622      	mov	r2, r4
   b5f1a:	462b      	mov	r3, r5
   b5f1c:	f000 fb82 	bl	b6624 <__aeabi_dsub>
   b5f20:	4632      	mov	r2, r6
   b5f22:	463b      	mov	r3, r7
   b5f24:	f000 ffbc 	bl	b6ea0 <__aeabi_dcmpge>
   b5f28:	2800      	cmp	r0, #0
   b5f2a:	f43f aef3 	beq.w	b5d14 <__ieee754_pow+0x65c>
   b5f2e:	a324      	add	r3, pc, #144	; (adr r3, b5fc0 <__ieee754_pow+0x908>)
   b5f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f34:	ec51 0b18 	vmov	r0, r1, d8
   b5f38:	f000 fd2c 	bl	b6994 <__aeabi_dmul>
   b5f3c:	a320      	add	r3, pc, #128	; (adr r3, b5fc0 <__ieee754_pow+0x908>)
   b5f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f42:	f000 fd27 	bl	b6994 <__aeabi_dmul>
   b5f46:	ec41 0b10 	vmov	d0, r0, r1
   b5f4a:	e401      	b.n	b5750 <__ieee754_pow+0x98>
   b5f4c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b5fc8 <__ieee754_pow+0x910>
   b5f50:	eeb0 8a47 	vmov.f32	s16, s14
   b5f54:	eef0 8a67 	vmov.f32	s17, s15
   b5f58:	e686      	b.n	b5c68 <__ieee754_pow+0x5b0>
   b5f5a:	f1bb 0f00 	cmp.w	fp, #0
   b5f5e:	dacd      	bge.n	b5efc <__ieee754_pow+0x844>
   b5f60:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b5f64:	ee00 6a10 	vmov	s0, r6
   b5f68:	ee00 3a90 	vmov	s1, r3
   b5f6c:	f7ff bbf0 	b.w	b5750 <__ieee754_pow+0x98>
   b5f70:	652b82fe 	.word	0x652b82fe
   b5f74:	3c971547 	.word	0x3c971547
   b5f78:	00000000 	.word	0x00000000
   b5f7c:	3fe62e43 	.word	0x3fe62e43
   b5f80:	fefa39ef 	.word	0xfefa39ef
   b5f84:	3fe62e42 	.word	0x3fe62e42
   b5f88:	0ca86c39 	.word	0x0ca86c39
   b5f8c:	be205c61 	.word	0xbe205c61
   b5f90:	72bea4d0 	.word	0x72bea4d0
   b5f94:	3e663769 	.word	0x3e663769
   b5f98:	c5d26bf1 	.word	0xc5d26bf1
   b5f9c:	3ebbbd41 	.word	0x3ebbbd41
   b5fa0:	af25de2c 	.word	0xaf25de2c
   b5fa4:	3f11566a 	.word	0x3f11566a
   b5fa8:	16bebd93 	.word	0x16bebd93
   b5fac:	3f66c16c 	.word	0x3f66c16c
   b5fb0:	5555553e 	.word	0x5555553e
   b5fb4:	3fc55555 	.word	0x3fc55555
	...
   b5fc0:	c2f8f359 	.word	0xc2f8f359
   b5fc4:	01a56e1f 	.word	0x01a56e1f
   b5fc8:	00000000 	.word	0x00000000
   b5fcc:	3ff00000 	.word	0x3ff00000
   b5fd0:	408fffff 	.word	0x408fffff
   b5fd4:	000fffff 	.word	0x000fffff
   b5fd8:	3ff00000 	.word	0x3ff00000
   b5fdc:	3f6f3400 	.word	0x3f6f3400
   b5fe0:	4090cbff 	.word	0x4090cbff
   b5fe4:	4598      	cmp	r8, r3
   b5fe6:	db85      	blt.n	b5ef4 <__ieee754_pow+0x83c>
   b5fe8:	4b7d      	ldr	r3, [pc, #500]	; (b61e0 <__ieee754_pow+0xb28>)
   b5fea:	4598      	cmp	r8, r3
   b5fec:	f73f ac22 	bgt.w	b5834 <__ieee754_pow+0x17c>
   b5ff0:	ec51 0b10 	vmov	r0, r1, d0
   b5ff4:	4b7a      	ldr	r3, [pc, #488]	; (b61e0 <__ieee754_pow+0xb28>)
   b5ff6:	2200      	movs	r2, #0
   b5ff8:	f000 fb14 	bl	b6624 <__aeabi_dsub>
   b5ffc:	a368      	add	r3, pc, #416	; (adr r3, b61a0 <__ieee754_pow+0xae8>)
   b5ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6002:	4604      	mov	r4, r0
   b6004:	460d      	mov	r5, r1
   b6006:	f000 fcc5 	bl	b6994 <__aeabi_dmul>
   b600a:	a367      	add	r3, pc, #412	; (adr r3, b61a8 <__ieee754_pow+0xaf0>)
   b600c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6010:	4682      	mov	sl, r0
   b6012:	468b      	mov	fp, r1
   b6014:	4620      	mov	r0, r4
   b6016:	4629      	mov	r1, r5
   b6018:	f000 fcbc 	bl	b6994 <__aeabi_dmul>
   b601c:	4b71      	ldr	r3, [pc, #452]	; (b61e4 <__ieee754_pow+0xb2c>)
   b601e:	ec41 0b18 	vmov	d8, r0, r1
   b6022:	2200      	movs	r2, #0
   b6024:	4620      	mov	r0, r4
   b6026:	4629      	mov	r1, r5
   b6028:	f000 fcb4 	bl	b6994 <__aeabi_dmul>
   b602c:	4602      	mov	r2, r0
   b602e:	460b      	mov	r3, r1
   b6030:	a15f      	add	r1, pc, #380	; (adr r1, b61b0 <__ieee754_pow+0xaf8>)
   b6032:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6036:	f000 faf5 	bl	b6624 <__aeabi_dsub>
   b603a:	4622      	mov	r2, r4
   b603c:	462b      	mov	r3, r5
   b603e:	f000 fca9 	bl	b6994 <__aeabi_dmul>
   b6042:	4602      	mov	r2, r0
   b6044:	460b      	mov	r3, r1
   b6046:	2000      	movs	r0, #0
   b6048:	4967      	ldr	r1, [pc, #412]	; (b61e8 <__ieee754_pow+0xb30>)
   b604a:	f000 faeb 	bl	b6624 <__aeabi_dsub>
   b604e:	4622      	mov	r2, r4
   b6050:	4680      	mov	r8, r0
   b6052:	4689      	mov	r9, r1
   b6054:	462b      	mov	r3, r5
   b6056:	4620      	mov	r0, r4
   b6058:	4629      	mov	r1, r5
   b605a:	f000 fc9b 	bl	b6994 <__aeabi_dmul>
   b605e:	4602      	mov	r2, r0
   b6060:	460b      	mov	r3, r1
   b6062:	4640      	mov	r0, r8
   b6064:	4649      	mov	r1, r9
   b6066:	f000 fc95 	bl	b6994 <__aeabi_dmul>
   b606a:	a353      	add	r3, pc, #332	; (adr r3, b61b8 <__ieee754_pow+0xb00>)
   b606c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6070:	f000 fc90 	bl	b6994 <__aeabi_dmul>
   b6074:	4602      	mov	r2, r0
   b6076:	460b      	mov	r3, r1
   b6078:	ec51 0b18 	vmov	r0, r1, d8
   b607c:	f000 fad2 	bl	b6624 <__aeabi_dsub>
   b6080:	4680      	mov	r8, r0
   b6082:	4689      	mov	r9, r1
   b6084:	4642      	mov	r2, r8
   b6086:	464b      	mov	r3, r9
   b6088:	4650      	mov	r0, sl
   b608a:	4659      	mov	r1, fp
   b608c:	f000 facc 	bl	b6628 <__adddf3>
   b6090:	2000      	movs	r0, #0
   b6092:	4652      	mov	r2, sl
   b6094:	465b      	mov	r3, fp
   b6096:	4604      	mov	r4, r0
   b6098:	460d      	mov	r5, r1
   b609a:	e591      	b.n	b5bc0 <__ieee754_pow+0x508>
   b609c:	4622      	mov	r2, r4
   b609e:	462b      	mov	r3, r5
   b60a0:	4620      	mov	r0, r4
   b60a2:	4629      	mov	r1, r5
   b60a4:	f000 fc76 	bl	b6994 <__aeabi_dmul>
   b60a8:	ec41 0b10 	vmov	d0, r0, r1
   b60ac:	f7ff bb50 	b.w	b5750 <__ieee754_pow+0x98>
   b60b0:	494b      	ldr	r1, [pc, #300]	; (b61e0 <__ieee754_pow+0xb28>)
   b60b2:	2000      	movs	r0, #0
   b60b4:	4622      	mov	r2, r4
   b60b6:	462b      	mov	r3, r5
   b60b8:	f000 fd96 	bl	b6be8 <__aeabi_ddiv>
   b60bc:	ec41 0b10 	vmov	d0, r0, r1
   b60c0:	f7ff bb46 	b.w	b5750 <__ieee754_pow+0x98>
   b60c4:	2b00      	cmp	r3, #0
   b60c6:	d144      	bne.n	b6152 <__ieee754_pow+0xa9a>
   b60c8:	f1c1 0114 	rsb	r1, r1, #20
   b60cc:	fa4a f001 	asr.w	r0, sl, r1
   b60d0:	fa00 f101 	lsl.w	r1, r0, r1
   b60d4:	4551      	cmp	r1, sl
   b60d6:	d05a      	beq.n	b618e <__ieee754_pow+0xad6>
   b60d8:	9300      	str	r3, [sp, #0]
   b60da:	f7ff bb17 	b.w	b570c <__ieee754_pow+0x54>
   b60de:	4a42      	ldr	r2, [pc, #264]	; (b61e8 <__ieee754_pow+0xb30>)
   b60e0:	4293      	cmp	r3, r2
   b60e2:	dc5b      	bgt.n	b619c <__ieee754_pow+0xae4>
   b60e4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b60e8:	9102      	str	r1, [sp, #8]
   b60ea:	9100      	str	r1, [sp, #0]
   b60ec:	e646      	b.n	b5d7c <__ieee754_pow+0x6c4>
   b60ee:	a334      	add	r3, pc, #208	; (adr r3, b61c0 <__ieee754_pow+0xb08>)
   b60f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b60f4:	ec51 0b18 	vmov	r0, r1, d8
   b60f8:	f000 fc4c 	bl	b6994 <__aeabi_dmul>
   b60fc:	a330      	add	r3, pc, #192	; (adr r3, b61c0 <__ieee754_pow+0xb08>)
   b60fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6102:	f000 fc47 	bl	b6994 <__aeabi_dmul>
   b6106:	ec41 0b10 	vmov	d0, r0, r1
   b610a:	f7ff bb21 	b.w	b5750 <__ieee754_pow+0x98>
   b610e:	9b00      	ldr	r3, [sp, #0]
   b6110:	2b01      	cmp	r3, #1
   b6112:	f47f ab1d 	bne.w	b5750 <__ieee754_pow+0x98>
   b6116:	ee10 1a90 	vmov	r1, s1
   b611a:	ee10 2a10 	vmov	r2, s0
   b611e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6122:	ec43 2b10 	vmov	d0, r2, r3
   b6126:	f7ff bb13 	b.w	b5750 <__ieee754_pow+0x98>
   b612a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b61c8 <__ieee754_pow+0xb10>
   b612e:	eeb0 ca47 	vmov.f32	s24, s14
   b6132:	eef0 ca67 	vmov.f32	s25, s15
   b6136:	ed9f 7b26 	vldr	d7, [pc, #152]	; b61d0 <__ieee754_pow+0xb18>
   b613a:	eeb0 da47 	vmov.f32	s26, s14
   b613e:	eef0 da67 	vmov.f32	s27, s15
   b6142:	ed9f 7b25 	vldr	d7, [pc, #148]	; b61d8 <__ieee754_pow+0xb20>
   b6146:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b614a:	ec53 2b17 	vmov	r2, r3, d7
   b614e:	f7ff bbeb 	b.w	b5928 <__ieee754_pow+0x270>
   b6152:	ec45 4b10 	vmov	d0, r4, r5
   b6156:	9200      	str	r2, [sp, #0]
   b6158:	f000 f914 	bl	b6384 <fabs>
   b615c:	9a00      	ldr	r2, [sp, #0]
   b615e:	2a00      	cmp	r2, #0
   b6160:	f47f ab92 	bne.w	b5888 <__ieee754_pow+0x1d0>
   b6164:	9200      	str	r2, [sp, #0]
   b6166:	f7ff bb26 	b.w	b57b6 <__ieee754_pow+0xfe>
   b616a:	ec41 0b10 	vmov	d0, r0, r1
   b616e:	9800      	ldr	r0, [sp, #0]
   b6170:	f000 f9c2 	bl	b64f8 <scalbn>
   b6174:	ec51 0b10 	vmov	r0, r1, d0
   b6178:	e6b5      	b.n	b5ee6 <__ieee754_pow+0x82e>
   b617a:	f000 0001 	and.w	r0, r0, #1
   b617e:	f1c0 0102 	rsb	r1, r0, #2
   b6182:	9100      	str	r1, [sp, #0]
   b6184:	2b00      	cmp	r3, #0
   b6186:	f43f aac1 	beq.w	b570c <__ieee754_pow+0x54>
   b618a:	f7ff bb0d 	b.w	b57a8 <__ieee754_pow+0xf0>
   b618e:	f000 0001 	and.w	r0, r0, #1
   b6192:	f1c0 0302 	rsb	r3, r0, #2
   b6196:	9300      	str	r3, [sp, #0]
   b6198:	f7ff bab8 	b.w	b570c <__ieee754_pow+0x54>
   b619c:	151b      	asrs	r3, r3, #20
   b619e:	e5bb      	b.n	b5d18 <__ieee754_pow+0x660>
   b61a0:	60000000 	.word	0x60000000
   b61a4:	3ff71547 	.word	0x3ff71547
   b61a8:	f85ddf44 	.word	0xf85ddf44
   b61ac:	3e54ae0b 	.word	0x3e54ae0b
   b61b0:	55555555 	.word	0x55555555
   b61b4:	3fd55555 	.word	0x3fd55555
   b61b8:	652b82fe 	.word	0x652b82fe
   b61bc:	3ff71547 	.word	0x3ff71547
   b61c0:	8800759c 	.word	0x8800759c
   b61c4:	7e37e43c 	.word	0x7e37e43c
   b61c8:	40000000 	.word	0x40000000
   b61cc:	3fe2b803 	.word	0x3fe2b803
   b61d0:	43cfd006 	.word	0x43cfd006
   b61d4:	3e4cfdeb 	.word	0x3e4cfdeb
   b61d8:	00000000 	.word	0x00000000
   b61dc:	3ff80000 	.word	0x3ff80000
   b61e0:	3ff00000 	.word	0x3ff00000
   b61e4:	3fd00000 	.word	0x3fd00000
   b61e8:	3fe00000 	.word	0x3fe00000

000b61ec <__ieee754_sqrt>:
   b61ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b61f0:	4a63      	ldr	r2, [pc, #396]	; (b6380 <__ieee754_sqrt+0x194>)
   b61f2:	ec55 4b10 	vmov	r4, r5, d0
   b61f6:	43aa      	bics	r2, r5
   b61f8:	f000 809f 	beq.w	b633a <__ieee754_sqrt+0x14e>
   b61fc:	2d00      	cmp	r5, #0
   b61fe:	ee10 ca10 	vmov	ip, s0
   b6202:	462b      	mov	r3, r5
   b6204:	dd54      	ble.n	b62b0 <__ieee754_sqrt+0xc4>
   b6206:	1529      	asrs	r1, r5, #20
   b6208:	d063      	beq.n	b62d2 <__ieee754_sqrt+0xe6>
   b620a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b620e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b6212:	07c9      	lsls	r1, r1, #31
   b6214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6218:	d404      	bmi.n	b6224 <__ieee754_sqrt+0x38>
   b621a:	005b      	lsls	r3, r3, #1
   b621c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6220:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6224:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b6228:	2600      	movs	r6, #0
   b622a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b622e:	107f      	asrs	r7, r7, #1
   b6230:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6234:	f04f 0e16 	mov.w	lr, #22
   b6238:	4634      	mov	r4, r6
   b623a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b623e:	18a1      	adds	r1, r4, r2
   b6240:	4299      	cmp	r1, r3
   b6242:	dc02      	bgt.n	b624a <__ieee754_sqrt+0x5e>
   b6244:	1a5b      	subs	r3, r3, r1
   b6246:	188c      	adds	r4, r1, r2
   b6248:	4416      	add	r6, r2
   b624a:	005b      	lsls	r3, r3, #1
   b624c:	f1be 0e01 	subs.w	lr, lr, #1
   b6250:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6254:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b6258:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b625c:	d1ef      	bne.n	b623e <__ieee754_sqrt+0x52>
   b625e:	4675      	mov	r5, lr
   b6260:	2020      	movs	r0, #32
   b6262:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b6266:	e00a      	b.n	b627e <__ieee754_sqrt+0x92>
   b6268:	d044      	beq.n	b62f4 <__ieee754_sqrt+0x108>
   b626a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b626e:	3801      	subs	r0, #1
   b6270:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b6274:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6278:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b627c:	d043      	beq.n	b6306 <__ieee754_sqrt+0x11a>
   b627e:	42a3      	cmp	r3, r4
   b6280:	eb02 010e 	add.w	r1, r2, lr
   b6284:	ddf0      	ble.n	b6268 <__ieee754_sqrt+0x7c>
   b6286:	2900      	cmp	r1, #0
   b6288:	eb01 0e02 	add.w	lr, r1, r2
   b628c:	db0a      	blt.n	b62a4 <__ieee754_sqrt+0xb8>
   b628e:	46a0      	mov	r8, r4
   b6290:	1b1b      	subs	r3, r3, r4
   b6292:	4561      	cmp	r1, ip
   b6294:	bf88      	it	hi
   b6296:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b629a:	ebac 0c01 	sub.w	ip, ip, r1
   b629e:	4415      	add	r5, r2
   b62a0:	4644      	mov	r4, r8
   b62a2:	e7e2      	b.n	b626a <__ieee754_sqrt+0x7e>
   b62a4:	f1be 0f00 	cmp.w	lr, #0
   b62a8:	dbf1      	blt.n	b628e <__ieee754_sqrt+0xa2>
   b62aa:	f104 0801 	add.w	r8, r4, #1
   b62ae:	e7ef      	b.n	b6290 <__ieee754_sqrt+0xa4>
   b62b0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b62b4:	4322      	orrs	r2, r4
   b62b6:	d038      	beq.n	b632a <__ieee754_sqrt+0x13e>
   b62b8:	2d00      	cmp	r5, #0
   b62ba:	d14e      	bne.n	b635a <__ieee754_sqrt+0x16e>
   b62bc:	4629      	mov	r1, r5
   b62be:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b62c2:	3915      	subs	r1, #21
   b62c4:	4613      	mov	r3, r2
   b62c6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b62ca:	2a00      	cmp	r2, #0
   b62cc:	d0f7      	beq.n	b62be <__ieee754_sqrt+0xd2>
   b62ce:	02d6      	lsls	r6, r2, #11
   b62d0:	d450      	bmi.n	b6374 <__ieee754_sqrt+0x188>
   b62d2:	2000      	movs	r0, #0
   b62d4:	005b      	lsls	r3, r3, #1
   b62d6:	02dd      	lsls	r5, r3, #11
   b62d8:	4604      	mov	r4, r0
   b62da:	f100 0001 	add.w	r0, r0, #1
   b62de:	d5f9      	bpl.n	b62d4 <__ieee754_sqrt+0xe8>
   b62e0:	461a      	mov	r2, r3
   b62e2:	4663      	mov	r3, ip
   b62e4:	fa0c fc00 	lsl.w	ip, ip, r0
   b62e8:	f1c0 0020 	rsb	r0, r0, #32
   b62ec:	40c3      	lsrs	r3, r0
   b62ee:	1b09      	subs	r1, r1, r4
   b62f0:	4313      	orrs	r3, r2
   b62f2:	e78a      	b.n	b620a <__ieee754_sqrt+0x1e>
   b62f4:	4561      	cmp	r1, ip
   b62f6:	d8b8      	bhi.n	b626a <__ieee754_sqrt+0x7e>
   b62f8:	2900      	cmp	r1, #0
   b62fa:	eb01 0e02 	add.w	lr, r1, r2
   b62fe:	dbd1      	blt.n	b62a4 <__ieee754_sqrt+0xb8>
   b6300:	4698      	mov	r8, r3
   b6302:	2300      	movs	r3, #0
   b6304:	e7c9      	b.n	b629a <__ieee754_sqrt+0xae>
   b6306:	ea53 030c 	orrs.w	r3, r3, ip
   b630a:	d110      	bne.n	b632e <__ieee754_sqrt+0x142>
   b630c:	0868      	lsrs	r0, r5, #1
   b630e:	1071      	asrs	r1, r6, #1
   b6310:	07f3      	lsls	r3, r6, #31
   b6312:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b6316:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b631a:	bf48      	it	mi
   b631c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b6320:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b6324:	4602      	mov	r2, r0
   b6326:	ec43 2b10 	vmov	d0, r2, r3
   b632a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b632e:	1c6a      	adds	r2, r5, #1
   b6330:	bf16      	itet	ne
   b6332:	1c68      	addne	r0, r5, #1
   b6334:	3601      	addeq	r6, #1
   b6336:	0840      	lsrne	r0, r0, #1
   b6338:	e7e9      	b.n	b630e <__ieee754_sqrt+0x122>
   b633a:	ee10 2a10 	vmov	r2, s0
   b633e:	ee10 0a10 	vmov	r0, s0
   b6342:	462b      	mov	r3, r5
   b6344:	4629      	mov	r1, r5
   b6346:	f000 fb25 	bl	b6994 <__aeabi_dmul>
   b634a:	4622      	mov	r2, r4
   b634c:	462b      	mov	r3, r5
   b634e:	f000 f96b 	bl	b6628 <__adddf3>
   b6352:	ec41 0b10 	vmov	d0, r0, r1
   b6356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b635a:	ee10 2a10 	vmov	r2, s0
   b635e:	4620      	mov	r0, r4
   b6360:	4629      	mov	r1, r5
   b6362:	f000 f95f 	bl	b6624 <__aeabi_dsub>
   b6366:	4602      	mov	r2, r0
   b6368:	460b      	mov	r3, r1
   b636a:	f000 fc3d 	bl	b6be8 <__aeabi_ddiv>
   b636e:	ec41 0b10 	vmov	d0, r0, r1
   b6372:	e7da      	b.n	b632a <__ieee754_sqrt+0x13e>
   b6374:	4663      	mov	r3, ip
   b6376:	2020      	movs	r0, #32
   b6378:	f04f 34ff 	mov.w	r4, #4294967295
   b637c:	e7b6      	b.n	b62ec <__ieee754_sqrt+0x100>
   b637e:	bf00      	nop
   b6380:	7ff00000 	.word	0x7ff00000

000b6384 <fabs>:
   b6384:	ec51 0b10 	vmov	r0, r1, d0
   b6388:	ee10 2a10 	vmov	r2, s0
   b638c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6390:	ec43 2b10 	vmov	d0, r2, r3
   b6394:	4770      	bx	lr
   b6396:	bf00      	nop

000b6398 <finite>:
   b6398:	b082      	sub	sp, #8
   b639a:	ed8d 0b00 	vstr	d0, [sp]
   b639e:	9801      	ldr	r0, [sp, #4]
   b63a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b63a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b63a8:	0fc0      	lsrs	r0, r0, #31
   b63aa:	b002      	add	sp, #8
   b63ac:	4770      	bx	lr
   b63ae:	bf00      	nop

000b63b0 <nan>:
   b63b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; b63b8 <nan+0x8>
   b63b4:	4770      	bx	lr
   b63b6:	bf00      	nop
   b63b8:	00000000 	.word	0x00000000
   b63bc:	7ff80000 	.word	0x7ff80000

000b63c0 <rint>:
   b63c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63c2:	ec53 2b10 	vmov	r2, r3, d0
   b63c6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b63ca:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b63ce:	2913      	cmp	r1, #19
   b63d0:	ee10 0a10 	vmov	r0, s0
   b63d4:	b083      	sub	sp, #12
   b63d6:	461c      	mov	r4, r3
   b63d8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b63dc:	dc3a      	bgt.n	b6454 <rint+0x94>
   b63de:	2900      	cmp	r1, #0
   b63e0:	db30      	blt.n	b6444 <rint+0x84>
   b63e2:	4d42      	ldr	r5, [pc, #264]	; (b64ec <rint+0x12c>)
   b63e4:	fa45 fc01 	asr.w	ip, r5, r1
   b63e8:	ea03 050c 	and.w	r5, r3, ip
   b63ec:	4315      	orrs	r5, r2
   b63ee:	d02d      	beq.n	b644c <rint+0x8c>
   b63f0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b63f4:	4318      	orrs	r0, r3
   b63f6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b63fa:	d00c      	beq.n	b6416 <rint+0x56>
   b63fc:	ea24 0c0c 	bic.w	ip, r4, ip
   b6400:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b6404:	2913      	cmp	r1, #19
   b6406:	fa44 f101 	asr.w	r1, r4, r1
   b640a:	bf0c      	ite	eq
   b640c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b6410:	2000      	movne	r0, #0
   b6412:	ea4c 0401 	orr.w	r4, ip, r1
   b6416:	4936      	ldr	r1, [pc, #216]	; (b64f0 <rint+0x130>)
   b6418:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b641c:	4623      	mov	r3, r4
   b641e:	e9de 4500 	ldrd	r4, r5, [lr]
   b6422:	4602      	mov	r2, r0
   b6424:	4629      	mov	r1, r5
   b6426:	4620      	mov	r0, r4
   b6428:	f000 f8fe 	bl	b6628 <__adddf3>
   b642c:	e9cd 0100 	strd	r0, r1, [sp]
   b6430:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6434:	4622      	mov	r2, r4
   b6436:	462b      	mov	r3, r5
   b6438:	f000 f8f4 	bl	b6624 <__aeabi_dsub>
   b643c:	ec41 0b10 	vmov	d0, r0, r1
   b6440:	b003      	add	sp, #12
   b6442:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6444:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b6448:	4311      	orrs	r1, r2
   b644a:	d124      	bne.n	b6496 <rint+0xd6>
   b644c:	ec43 2b10 	vmov	d0, r2, r3
   b6450:	b003      	add	sp, #12
   b6452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6454:	2933      	cmp	r1, #51	; 0x33
   b6456:	dd08      	ble.n	b646a <rint+0xaa>
   b6458:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b645c:	d1f6      	bne.n	b644c <rint+0x8c>
   b645e:	4619      	mov	r1, r3
   b6460:	f000 f8e2 	bl	b6628 <__adddf3>
   b6464:	ec41 0b10 	vmov	d0, r0, r1
   b6468:	e7f2      	b.n	b6450 <rint+0x90>
   b646a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b646e:	f04f 31ff 	mov.w	r1, #4294967295
   b6472:	fa21 f10c 	lsr.w	r1, r1, ip
   b6476:	420a      	tst	r2, r1
   b6478:	d0e8      	beq.n	b644c <rint+0x8c>
   b647a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b647e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b6482:	d0c8      	beq.n	b6416 <rint+0x56>
   b6484:	ea20 0303 	bic.w	r3, r0, r3
   b6488:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b648c:	fa40 fc0c 	asr.w	ip, r0, ip
   b6490:	ea43 000c 	orr.w	r0, r3, ip
   b6494:	e7bf      	b.n	b6416 <rint+0x56>
   b6496:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b649a:	4318      	orrs	r0, r3
   b649c:	4a14      	ldr	r2, [pc, #80]	; (b64f0 <rint+0x130>)
   b649e:	4243      	negs	r3, r0
   b64a0:	4303      	orrs	r3, r0
   b64a2:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b64a6:	0b1b      	lsrs	r3, r3, #12
   b64a8:	0c62      	lsrs	r2, r4, #17
   b64aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b64ae:	0452      	lsls	r2, r2, #17
   b64b0:	ea43 0702 	orr.w	r7, r3, r2
   b64b4:	463b      	mov	r3, r7
   b64b6:	e9de 6700 	ldrd	r6, r7, [lr]
   b64ba:	ee10 2a10 	vmov	r2, s0
   b64be:	4630      	mov	r0, r6
   b64c0:	4639      	mov	r1, r7
   b64c2:	f000 f8b1 	bl	b6628 <__adddf3>
   b64c6:	e9cd 0100 	strd	r0, r1, [sp]
   b64ca:	4632      	mov	r2, r6
   b64cc:	463b      	mov	r3, r7
   b64ce:	e9dd 0100 	ldrd	r0, r1, [sp]
   b64d2:	f000 f8a7 	bl	b6624 <__aeabi_dsub>
   b64d6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b64da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b64de:	4602      	mov	r2, r0
   b64e0:	ea41 0304 	orr.w	r3, r1, r4
   b64e4:	ec43 2b10 	vmov	d0, r2, r3
   b64e8:	b003      	add	sp, #12
   b64ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b64ec:	000fffff 	.word	0x000fffff
   b64f0:	000b7328 	.word	0x000b7328
   b64f4:	00000000 	.word	0x00000000

000b64f8 <scalbn>:
   b64f8:	b538      	push	{r3, r4, r5, lr}
   b64fa:	ec53 2b10 	vmov	r2, r3, d0
   b64fe:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b6502:	4604      	mov	r4, r0
   b6504:	469c      	mov	ip, r3
   b6506:	bb89      	cbnz	r1, b656c <scalbn+0x74>
   b6508:	ee10 1a10 	vmov	r1, s0
   b650c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b6510:	ea5c 0101 	orrs.w	r1, ip, r1
   b6514:	d029      	beq.n	b656a <scalbn+0x72>
   b6516:	4619      	mov	r1, r3
   b6518:	2200      	movs	r2, #0
   b651a:	4b3d      	ldr	r3, [pc, #244]	; (b6610 <scalbn+0x118>)
   b651c:	4d3d      	ldr	r5, [pc, #244]	; (b6614 <scalbn+0x11c>)
   b651e:	ee10 0a10 	vmov	r0, s0
   b6522:	f000 fa37 	bl	b6994 <__aeabi_dmul>
   b6526:	42ac      	cmp	r4, r5
   b6528:	4602      	mov	r2, r0
   b652a:	460b      	mov	r3, r1
   b652c:	db16      	blt.n	b655c <scalbn+0x64>
   b652e:	468c      	mov	ip, r1
   b6530:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b6534:	3936      	subs	r1, #54	; 0x36
   b6536:	4421      	add	r1, r4
   b6538:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b653c:	4281      	cmp	r1, r0
   b653e:	dc21      	bgt.n	b6584 <scalbn+0x8c>
   b6540:	2900      	cmp	r1, #0
   b6542:	dc47      	bgt.n	b65d4 <scalbn+0xdc>
   b6544:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b6548:	da34      	bge.n	b65b4 <scalbn+0xbc>
   b654a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b654e:	428c      	cmp	r4, r1
   b6550:	dc18      	bgt.n	b6584 <scalbn+0x8c>
   b6552:	2b00      	cmp	r3, #0
   b6554:	a126      	add	r1, pc, #152	; (adr r1, b65f0 <scalbn+0xf8>)
   b6556:	e9d1 0100 	ldrd	r0, r1, [r1]
   b655a:	db44      	blt.n	b65e6 <scalbn+0xee>
   b655c:	a324      	add	r3, pc, #144	; (adr r3, b65f0 <scalbn+0xf8>)
   b655e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6562:	f000 fa17 	bl	b6994 <__aeabi_dmul>
   b6566:	ec41 0b10 	vmov	d0, r0, r1
   b656a:	bd38      	pop	{r3, r4, r5, pc}
   b656c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b6570:	4281      	cmp	r1, r0
   b6572:	d1e0      	bne.n	b6536 <scalbn+0x3e>
   b6574:	ee10 0a10 	vmov	r0, s0
   b6578:	4619      	mov	r1, r3
   b657a:	f000 f855 	bl	b6628 <__adddf3>
   b657e:	ec41 0b10 	vmov	d0, r0, r1
   b6582:	bd38      	pop	{r3, r4, r5, pc}
   b6584:	2b00      	cmp	r3, #0
   b6586:	a11c      	add	r1, pc, #112	; (adr r1, b65f8 <scalbn+0x100>)
   b6588:	e9d1 0100 	ldrd	r0, r1, [r1]
   b658c:	db07      	blt.n	b659e <scalbn+0xa6>
   b658e:	a31a      	add	r3, pc, #104	; (adr r3, b65f8 <scalbn+0x100>)
   b6590:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6594:	f000 f9fe 	bl	b6994 <__aeabi_dmul>
   b6598:	ec41 0b10 	vmov	d0, r0, r1
   b659c:	bd38      	pop	{r3, r4, r5, pc}
   b659e:	a118      	add	r1, pc, #96	; (adr r1, b6600 <scalbn+0x108>)
   b65a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b65a4:	a314      	add	r3, pc, #80	; (adr r3, b65f8 <scalbn+0x100>)
   b65a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65aa:	f000 f9f3 	bl	b6994 <__aeabi_dmul>
   b65ae:	ec41 0b10 	vmov	d0, r0, r1
   b65b2:	e7f3      	b.n	b659c <scalbn+0xa4>
   b65b4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b65b8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b65bc:	3136      	adds	r1, #54	; 0x36
   b65be:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b65c2:	4610      	mov	r0, r2
   b65c4:	4619      	mov	r1, r3
   b65c6:	2200      	movs	r2, #0
   b65c8:	4b13      	ldr	r3, [pc, #76]	; (b6618 <scalbn+0x120>)
   b65ca:	f000 f9e3 	bl	b6994 <__aeabi_dmul>
   b65ce:	ec41 0b10 	vmov	d0, r0, r1
   b65d2:	bd38      	pop	{r3, r4, r5, pc}
   b65d4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b65d8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b65dc:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b65e0:	ec43 2b10 	vmov	d0, r2, r3
   b65e4:	bd38      	pop	{r3, r4, r5, pc}
   b65e6:	a108      	add	r1, pc, #32	; (adr r1, b6608 <scalbn+0x110>)
   b65e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b65ec:	e7b6      	b.n	b655c <scalbn+0x64>
   b65ee:	bf00      	nop
   b65f0:	c2f8f359 	.word	0xc2f8f359
   b65f4:	01a56e1f 	.word	0x01a56e1f
   b65f8:	8800759c 	.word	0x8800759c
   b65fc:	7e37e43c 	.word	0x7e37e43c
   b6600:	8800759c 	.word	0x8800759c
   b6604:	fe37e43c 	.word	0xfe37e43c
   b6608:	c2f8f359 	.word	0xc2f8f359
   b660c:	81a56e1f 	.word	0x81a56e1f
   b6610:	43500000 	.word	0x43500000
   b6614:	ffff3cb0 	.word	0xffff3cb0
   b6618:	3c900000 	.word	0x3c900000

000b661c <__aeabi_drsub>:
   b661c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6620:	e002      	b.n	b6628 <__adddf3>
   b6622:	bf00      	nop

000b6624 <__aeabi_dsub>:
   b6624:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6628 <__adddf3>:
   b6628:	b530      	push	{r4, r5, lr}
   b662a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b662e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6632:	ea94 0f05 	teq	r4, r5
   b6636:	bf08      	it	eq
   b6638:	ea90 0f02 	teqeq	r0, r2
   b663c:	bf1f      	itttt	ne
   b663e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6642:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6646:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b664a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b664e:	f000 80e2 	beq.w	b6816 <__adddf3+0x1ee>
   b6652:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6656:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b665a:	bfb8      	it	lt
   b665c:	426d      	neglt	r5, r5
   b665e:	dd0c      	ble.n	b667a <__adddf3+0x52>
   b6660:	442c      	add	r4, r5
   b6662:	ea80 0202 	eor.w	r2, r0, r2
   b6666:	ea81 0303 	eor.w	r3, r1, r3
   b666a:	ea82 0000 	eor.w	r0, r2, r0
   b666e:	ea83 0101 	eor.w	r1, r3, r1
   b6672:	ea80 0202 	eor.w	r2, r0, r2
   b6676:	ea81 0303 	eor.w	r3, r1, r3
   b667a:	2d36      	cmp	r5, #54	; 0x36
   b667c:	bf88      	it	hi
   b667e:	bd30      	pophi	{r4, r5, pc}
   b6680:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6684:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6688:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b668c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6690:	d002      	beq.n	b6698 <__adddf3+0x70>
   b6692:	4240      	negs	r0, r0
   b6694:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6698:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b669c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b66a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b66a4:	d002      	beq.n	b66ac <__adddf3+0x84>
   b66a6:	4252      	negs	r2, r2
   b66a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b66ac:	ea94 0f05 	teq	r4, r5
   b66b0:	f000 80a7 	beq.w	b6802 <__adddf3+0x1da>
   b66b4:	f1a4 0401 	sub.w	r4, r4, #1
   b66b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b66bc:	db0d      	blt.n	b66da <__adddf3+0xb2>
   b66be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b66c2:	fa22 f205 	lsr.w	r2, r2, r5
   b66c6:	1880      	adds	r0, r0, r2
   b66c8:	f141 0100 	adc.w	r1, r1, #0
   b66cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b66d0:	1880      	adds	r0, r0, r2
   b66d2:	fa43 f305 	asr.w	r3, r3, r5
   b66d6:	4159      	adcs	r1, r3
   b66d8:	e00e      	b.n	b66f8 <__adddf3+0xd0>
   b66da:	f1a5 0520 	sub.w	r5, r5, #32
   b66de:	f10e 0e20 	add.w	lr, lr, #32
   b66e2:	2a01      	cmp	r2, #1
   b66e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b66e8:	bf28      	it	cs
   b66ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b66ee:	fa43 f305 	asr.w	r3, r3, r5
   b66f2:	18c0      	adds	r0, r0, r3
   b66f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b66f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b66fc:	d507      	bpl.n	b670e <__adddf3+0xe6>
   b66fe:	f04f 0e00 	mov.w	lr, #0
   b6702:	f1dc 0c00 	rsbs	ip, ip, #0
   b6706:	eb7e 0000 	sbcs.w	r0, lr, r0
   b670a:	eb6e 0101 	sbc.w	r1, lr, r1
   b670e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6712:	d31b      	bcc.n	b674c <__adddf3+0x124>
   b6714:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6718:	d30c      	bcc.n	b6734 <__adddf3+0x10c>
   b671a:	0849      	lsrs	r1, r1, #1
   b671c:	ea5f 0030 	movs.w	r0, r0, rrx
   b6720:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6724:	f104 0401 	add.w	r4, r4, #1
   b6728:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b672c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6730:	f080 809a 	bcs.w	b6868 <__adddf3+0x240>
   b6734:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6738:	bf08      	it	eq
   b673a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b673e:	f150 0000 	adcs.w	r0, r0, #0
   b6742:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6746:	ea41 0105 	orr.w	r1, r1, r5
   b674a:	bd30      	pop	{r4, r5, pc}
   b674c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6750:	4140      	adcs	r0, r0
   b6752:	eb41 0101 	adc.w	r1, r1, r1
   b6756:	3c01      	subs	r4, #1
   b6758:	bf28      	it	cs
   b675a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b675e:	d2e9      	bcs.n	b6734 <__adddf3+0x10c>
   b6760:	f091 0f00 	teq	r1, #0
   b6764:	bf04      	itt	eq
   b6766:	4601      	moveq	r1, r0
   b6768:	2000      	moveq	r0, #0
   b676a:	fab1 f381 	clz	r3, r1
   b676e:	bf08      	it	eq
   b6770:	3320      	addeq	r3, #32
   b6772:	f1a3 030b 	sub.w	r3, r3, #11
   b6776:	f1b3 0220 	subs.w	r2, r3, #32
   b677a:	da0c      	bge.n	b6796 <__adddf3+0x16e>
   b677c:	320c      	adds	r2, #12
   b677e:	dd08      	ble.n	b6792 <__adddf3+0x16a>
   b6780:	f102 0c14 	add.w	ip, r2, #20
   b6784:	f1c2 020c 	rsb	r2, r2, #12
   b6788:	fa01 f00c 	lsl.w	r0, r1, ip
   b678c:	fa21 f102 	lsr.w	r1, r1, r2
   b6790:	e00c      	b.n	b67ac <__adddf3+0x184>
   b6792:	f102 0214 	add.w	r2, r2, #20
   b6796:	bfd8      	it	le
   b6798:	f1c2 0c20 	rsble	ip, r2, #32
   b679c:	fa01 f102 	lsl.w	r1, r1, r2
   b67a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b67a4:	bfdc      	itt	le
   b67a6:	ea41 010c 	orrle.w	r1, r1, ip
   b67aa:	4090      	lslle	r0, r2
   b67ac:	1ae4      	subs	r4, r4, r3
   b67ae:	bfa2      	ittt	ge
   b67b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b67b4:	4329      	orrge	r1, r5
   b67b6:	bd30      	popge	{r4, r5, pc}
   b67b8:	ea6f 0404 	mvn.w	r4, r4
   b67bc:	3c1f      	subs	r4, #31
   b67be:	da1c      	bge.n	b67fa <__adddf3+0x1d2>
   b67c0:	340c      	adds	r4, #12
   b67c2:	dc0e      	bgt.n	b67e2 <__adddf3+0x1ba>
   b67c4:	f104 0414 	add.w	r4, r4, #20
   b67c8:	f1c4 0220 	rsb	r2, r4, #32
   b67cc:	fa20 f004 	lsr.w	r0, r0, r4
   b67d0:	fa01 f302 	lsl.w	r3, r1, r2
   b67d4:	ea40 0003 	orr.w	r0, r0, r3
   b67d8:	fa21 f304 	lsr.w	r3, r1, r4
   b67dc:	ea45 0103 	orr.w	r1, r5, r3
   b67e0:	bd30      	pop	{r4, r5, pc}
   b67e2:	f1c4 040c 	rsb	r4, r4, #12
   b67e6:	f1c4 0220 	rsb	r2, r4, #32
   b67ea:	fa20 f002 	lsr.w	r0, r0, r2
   b67ee:	fa01 f304 	lsl.w	r3, r1, r4
   b67f2:	ea40 0003 	orr.w	r0, r0, r3
   b67f6:	4629      	mov	r1, r5
   b67f8:	bd30      	pop	{r4, r5, pc}
   b67fa:	fa21 f004 	lsr.w	r0, r1, r4
   b67fe:	4629      	mov	r1, r5
   b6800:	bd30      	pop	{r4, r5, pc}
   b6802:	f094 0f00 	teq	r4, #0
   b6806:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b680a:	bf06      	itte	eq
   b680c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6810:	3401      	addeq	r4, #1
   b6812:	3d01      	subne	r5, #1
   b6814:	e74e      	b.n	b66b4 <__adddf3+0x8c>
   b6816:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b681a:	bf18      	it	ne
   b681c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6820:	d029      	beq.n	b6876 <__adddf3+0x24e>
   b6822:	ea94 0f05 	teq	r4, r5
   b6826:	bf08      	it	eq
   b6828:	ea90 0f02 	teqeq	r0, r2
   b682c:	d005      	beq.n	b683a <__adddf3+0x212>
   b682e:	ea54 0c00 	orrs.w	ip, r4, r0
   b6832:	bf04      	itt	eq
   b6834:	4619      	moveq	r1, r3
   b6836:	4610      	moveq	r0, r2
   b6838:	bd30      	pop	{r4, r5, pc}
   b683a:	ea91 0f03 	teq	r1, r3
   b683e:	bf1e      	ittt	ne
   b6840:	2100      	movne	r1, #0
   b6842:	2000      	movne	r0, #0
   b6844:	bd30      	popne	{r4, r5, pc}
   b6846:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b684a:	d105      	bne.n	b6858 <__adddf3+0x230>
   b684c:	0040      	lsls	r0, r0, #1
   b684e:	4149      	adcs	r1, r1
   b6850:	bf28      	it	cs
   b6852:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6856:	bd30      	pop	{r4, r5, pc}
   b6858:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b685c:	bf3c      	itt	cc
   b685e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6862:	bd30      	popcc	{r4, r5, pc}
   b6864:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6868:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b686c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6870:	f04f 0000 	mov.w	r0, #0
   b6874:	bd30      	pop	{r4, r5, pc}
   b6876:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b687a:	bf1a      	itte	ne
   b687c:	4619      	movne	r1, r3
   b687e:	4610      	movne	r0, r2
   b6880:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6884:	bf1c      	itt	ne
   b6886:	460b      	movne	r3, r1
   b6888:	4602      	movne	r2, r0
   b688a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b688e:	bf06      	itte	eq
   b6890:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6894:	ea91 0f03 	teqeq	r1, r3
   b6898:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b689c:	bd30      	pop	{r4, r5, pc}
   b689e:	bf00      	nop

000b68a0 <__aeabi_ui2d>:
   b68a0:	f090 0f00 	teq	r0, #0
   b68a4:	bf04      	itt	eq
   b68a6:	2100      	moveq	r1, #0
   b68a8:	4770      	bxeq	lr
   b68aa:	b530      	push	{r4, r5, lr}
   b68ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b68b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b68b4:	f04f 0500 	mov.w	r5, #0
   b68b8:	f04f 0100 	mov.w	r1, #0
   b68bc:	e750      	b.n	b6760 <__adddf3+0x138>
   b68be:	bf00      	nop

000b68c0 <__aeabi_i2d>:
   b68c0:	f090 0f00 	teq	r0, #0
   b68c4:	bf04      	itt	eq
   b68c6:	2100      	moveq	r1, #0
   b68c8:	4770      	bxeq	lr
   b68ca:	b530      	push	{r4, r5, lr}
   b68cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b68d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b68d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b68d8:	bf48      	it	mi
   b68da:	4240      	negmi	r0, r0
   b68dc:	f04f 0100 	mov.w	r1, #0
   b68e0:	e73e      	b.n	b6760 <__adddf3+0x138>
   b68e2:	bf00      	nop

000b68e4 <__aeabi_f2d>:
   b68e4:	0042      	lsls	r2, r0, #1
   b68e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b68ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b68ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b68f2:	bf1f      	itttt	ne
   b68f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b68f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b68fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6900:	4770      	bxne	lr
   b6902:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6906:	bf08      	it	eq
   b6908:	4770      	bxeq	lr
   b690a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b690e:	bf04      	itt	eq
   b6910:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6914:	4770      	bxeq	lr
   b6916:	b530      	push	{r4, r5, lr}
   b6918:	f44f 7460 	mov.w	r4, #896	; 0x380
   b691c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6920:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6924:	e71c      	b.n	b6760 <__adddf3+0x138>
   b6926:	bf00      	nop

000b6928 <__aeabi_ul2d>:
   b6928:	ea50 0201 	orrs.w	r2, r0, r1
   b692c:	bf08      	it	eq
   b692e:	4770      	bxeq	lr
   b6930:	b530      	push	{r4, r5, lr}
   b6932:	f04f 0500 	mov.w	r5, #0
   b6936:	e00a      	b.n	b694e <__aeabi_l2d+0x16>

000b6938 <__aeabi_l2d>:
   b6938:	ea50 0201 	orrs.w	r2, r0, r1
   b693c:	bf08      	it	eq
   b693e:	4770      	bxeq	lr
   b6940:	b530      	push	{r4, r5, lr}
   b6942:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6946:	d502      	bpl.n	b694e <__aeabi_l2d+0x16>
   b6948:	4240      	negs	r0, r0
   b694a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b694e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6952:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6956:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b695a:	f43f aed8 	beq.w	b670e <__adddf3+0xe6>
   b695e:	f04f 0203 	mov.w	r2, #3
   b6962:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6966:	bf18      	it	ne
   b6968:	3203      	addne	r2, #3
   b696a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b696e:	bf18      	it	ne
   b6970:	3203      	addne	r2, #3
   b6972:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6976:	f1c2 0320 	rsb	r3, r2, #32
   b697a:	fa00 fc03 	lsl.w	ip, r0, r3
   b697e:	fa20 f002 	lsr.w	r0, r0, r2
   b6982:	fa01 fe03 	lsl.w	lr, r1, r3
   b6986:	ea40 000e 	orr.w	r0, r0, lr
   b698a:	fa21 f102 	lsr.w	r1, r1, r2
   b698e:	4414      	add	r4, r2
   b6990:	e6bd      	b.n	b670e <__adddf3+0xe6>
   b6992:	bf00      	nop

000b6994 <__aeabi_dmul>:
   b6994:	b570      	push	{r4, r5, r6, lr}
   b6996:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b699a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b699e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b69a2:	bf1d      	ittte	ne
   b69a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b69a8:	ea94 0f0c 	teqne	r4, ip
   b69ac:	ea95 0f0c 	teqne	r5, ip
   b69b0:	f000 f8de 	bleq	b6b70 <__aeabi_dmul+0x1dc>
   b69b4:	442c      	add	r4, r5
   b69b6:	ea81 0603 	eor.w	r6, r1, r3
   b69ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b69be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b69c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b69c6:	bf18      	it	ne
   b69c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b69cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b69d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b69d4:	d038      	beq.n	b6a48 <__aeabi_dmul+0xb4>
   b69d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b69da:	f04f 0500 	mov.w	r5, #0
   b69de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b69e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b69e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b69ea:	f04f 0600 	mov.w	r6, #0
   b69ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b69f2:	f09c 0f00 	teq	ip, #0
   b69f6:	bf18      	it	ne
   b69f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b69fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6a00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6a04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6a08:	d204      	bcs.n	b6a14 <__aeabi_dmul+0x80>
   b6a0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6a0e:	416d      	adcs	r5, r5
   b6a10:	eb46 0606 	adc.w	r6, r6, r6
   b6a14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6a18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6a1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6a20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6a24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6a28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6a2c:	bf88      	it	hi
   b6a2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6a32:	d81e      	bhi.n	b6a72 <__aeabi_dmul+0xde>
   b6a34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6a38:	bf08      	it	eq
   b6a3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6a3e:	f150 0000 	adcs.w	r0, r0, #0
   b6a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6a46:	bd70      	pop	{r4, r5, r6, pc}
   b6a48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6a4c:	ea46 0101 	orr.w	r1, r6, r1
   b6a50:	ea40 0002 	orr.w	r0, r0, r2
   b6a54:	ea81 0103 	eor.w	r1, r1, r3
   b6a58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6a5c:	bfc2      	ittt	gt
   b6a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6a66:	bd70      	popgt	{r4, r5, r6, pc}
   b6a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6a6c:	f04f 0e00 	mov.w	lr, #0
   b6a70:	3c01      	subs	r4, #1
   b6a72:	f300 80ab 	bgt.w	b6bcc <__aeabi_dmul+0x238>
   b6a76:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6a7a:	bfde      	ittt	le
   b6a7c:	2000      	movle	r0, #0
   b6a7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6a82:	bd70      	pople	{r4, r5, r6, pc}
   b6a84:	f1c4 0400 	rsb	r4, r4, #0
   b6a88:	3c20      	subs	r4, #32
   b6a8a:	da35      	bge.n	b6af8 <__aeabi_dmul+0x164>
   b6a8c:	340c      	adds	r4, #12
   b6a8e:	dc1b      	bgt.n	b6ac8 <__aeabi_dmul+0x134>
   b6a90:	f104 0414 	add.w	r4, r4, #20
   b6a94:	f1c4 0520 	rsb	r5, r4, #32
   b6a98:	fa00 f305 	lsl.w	r3, r0, r5
   b6a9c:	fa20 f004 	lsr.w	r0, r0, r4
   b6aa0:	fa01 f205 	lsl.w	r2, r1, r5
   b6aa4:	ea40 0002 	orr.w	r0, r0, r2
   b6aa8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6aac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6ab0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6ab4:	fa21 f604 	lsr.w	r6, r1, r4
   b6ab8:	eb42 0106 	adc.w	r1, r2, r6
   b6abc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6ac0:	bf08      	it	eq
   b6ac2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6ac6:	bd70      	pop	{r4, r5, r6, pc}
   b6ac8:	f1c4 040c 	rsb	r4, r4, #12
   b6acc:	f1c4 0520 	rsb	r5, r4, #32
   b6ad0:	fa00 f304 	lsl.w	r3, r0, r4
   b6ad4:	fa20 f005 	lsr.w	r0, r0, r5
   b6ad8:	fa01 f204 	lsl.w	r2, r1, r4
   b6adc:	ea40 0002 	orr.w	r0, r0, r2
   b6ae0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6ae4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6ae8:	f141 0100 	adc.w	r1, r1, #0
   b6aec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6af0:	bf08      	it	eq
   b6af2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6af6:	bd70      	pop	{r4, r5, r6, pc}
   b6af8:	f1c4 0520 	rsb	r5, r4, #32
   b6afc:	fa00 f205 	lsl.w	r2, r0, r5
   b6b00:	ea4e 0e02 	orr.w	lr, lr, r2
   b6b04:	fa20 f304 	lsr.w	r3, r0, r4
   b6b08:	fa01 f205 	lsl.w	r2, r1, r5
   b6b0c:	ea43 0302 	orr.w	r3, r3, r2
   b6b10:	fa21 f004 	lsr.w	r0, r1, r4
   b6b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6b18:	fa21 f204 	lsr.w	r2, r1, r4
   b6b1c:	ea20 0002 	bic.w	r0, r0, r2
   b6b20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6b24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6b28:	bf08      	it	eq
   b6b2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6b2e:	bd70      	pop	{r4, r5, r6, pc}
   b6b30:	f094 0f00 	teq	r4, #0
   b6b34:	d10f      	bne.n	b6b56 <__aeabi_dmul+0x1c2>
   b6b36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6b3a:	0040      	lsls	r0, r0, #1
   b6b3c:	eb41 0101 	adc.w	r1, r1, r1
   b6b40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6b44:	bf08      	it	eq
   b6b46:	3c01      	subeq	r4, #1
   b6b48:	d0f7      	beq.n	b6b3a <__aeabi_dmul+0x1a6>
   b6b4a:	ea41 0106 	orr.w	r1, r1, r6
   b6b4e:	f095 0f00 	teq	r5, #0
   b6b52:	bf18      	it	ne
   b6b54:	4770      	bxne	lr
   b6b56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6b5a:	0052      	lsls	r2, r2, #1
   b6b5c:	eb43 0303 	adc.w	r3, r3, r3
   b6b60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6b64:	bf08      	it	eq
   b6b66:	3d01      	subeq	r5, #1
   b6b68:	d0f7      	beq.n	b6b5a <__aeabi_dmul+0x1c6>
   b6b6a:	ea43 0306 	orr.w	r3, r3, r6
   b6b6e:	4770      	bx	lr
   b6b70:	ea94 0f0c 	teq	r4, ip
   b6b74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6b78:	bf18      	it	ne
   b6b7a:	ea95 0f0c 	teqne	r5, ip
   b6b7e:	d00c      	beq.n	b6b9a <__aeabi_dmul+0x206>
   b6b80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6b84:	bf18      	it	ne
   b6b86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6b8a:	d1d1      	bne.n	b6b30 <__aeabi_dmul+0x19c>
   b6b8c:	ea81 0103 	eor.w	r1, r1, r3
   b6b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6b94:	f04f 0000 	mov.w	r0, #0
   b6b98:	bd70      	pop	{r4, r5, r6, pc}
   b6b9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6b9e:	bf06      	itte	eq
   b6ba0:	4610      	moveq	r0, r2
   b6ba2:	4619      	moveq	r1, r3
   b6ba4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6ba8:	d019      	beq.n	b6bde <__aeabi_dmul+0x24a>
   b6baa:	ea94 0f0c 	teq	r4, ip
   b6bae:	d102      	bne.n	b6bb6 <__aeabi_dmul+0x222>
   b6bb0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6bb4:	d113      	bne.n	b6bde <__aeabi_dmul+0x24a>
   b6bb6:	ea95 0f0c 	teq	r5, ip
   b6bba:	d105      	bne.n	b6bc8 <__aeabi_dmul+0x234>
   b6bbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6bc0:	bf1c      	itt	ne
   b6bc2:	4610      	movne	r0, r2
   b6bc4:	4619      	movne	r1, r3
   b6bc6:	d10a      	bne.n	b6bde <__aeabi_dmul+0x24a>
   b6bc8:	ea81 0103 	eor.w	r1, r1, r3
   b6bcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6bd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6bd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6bd8:	f04f 0000 	mov.w	r0, #0
   b6bdc:	bd70      	pop	{r4, r5, r6, pc}
   b6bde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6be2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6be6:	bd70      	pop	{r4, r5, r6, pc}

000b6be8 <__aeabi_ddiv>:
   b6be8:	b570      	push	{r4, r5, r6, lr}
   b6bea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6bee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6bf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6bf6:	bf1d      	ittte	ne
   b6bf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6bfc:	ea94 0f0c 	teqne	r4, ip
   b6c00:	ea95 0f0c 	teqne	r5, ip
   b6c04:	f000 f8a7 	bleq	b6d56 <__aeabi_ddiv+0x16e>
   b6c08:	eba4 0405 	sub.w	r4, r4, r5
   b6c0c:	ea81 0e03 	eor.w	lr, r1, r3
   b6c10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6c14:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6c18:	f000 8088 	beq.w	b6d2c <__aeabi_ddiv+0x144>
   b6c1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6c20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6c24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6c28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6c2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6c30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6c34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6c38:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6c3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6c40:	429d      	cmp	r5, r3
   b6c42:	bf08      	it	eq
   b6c44:	4296      	cmpeq	r6, r2
   b6c46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6c4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6c4e:	d202      	bcs.n	b6c56 <__aeabi_ddiv+0x6e>
   b6c50:	085b      	lsrs	r3, r3, #1
   b6c52:	ea4f 0232 	mov.w	r2, r2, rrx
   b6c56:	1ab6      	subs	r6, r6, r2
   b6c58:	eb65 0503 	sbc.w	r5, r5, r3
   b6c5c:	085b      	lsrs	r3, r3, #1
   b6c5e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6c62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6c66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6c6a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6c6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6c72:	bf22      	ittt	cs
   b6c74:	1ab6      	subcs	r6, r6, r2
   b6c76:	4675      	movcs	r5, lr
   b6c78:	ea40 000c 	orrcs.w	r0, r0, ip
   b6c7c:	085b      	lsrs	r3, r3, #1
   b6c7e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6c82:	ebb6 0e02 	subs.w	lr, r6, r2
   b6c86:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6c8a:	bf22      	ittt	cs
   b6c8c:	1ab6      	subcs	r6, r6, r2
   b6c8e:	4675      	movcs	r5, lr
   b6c90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6c94:	085b      	lsrs	r3, r3, #1
   b6c96:	ea4f 0232 	mov.w	r2, r2, rrx
   b6c9a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6c9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6ca2:	bf22      	ittt	cs
   b6ca4:	1ab6      	subcs	r6, r6, r2
   b6ca6:	4675      	movcs	r5, lr
   b6ca8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6cac:	085b      	lsrs	r3, r3, #1
   b6cae:	ea4f 0232 	mov.w	r2, r2, rrx
   b6cb2:	ebb6 0e02 	subs.w	lr, r6, r2
   b6cb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6cba:	bf22      	ittt	cs
   b6cbc:	1ab6      	subcs	r6, r6, r2
   b6cbe:	4675      	movcs	r5, lr
   b6cc0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6cc4:	ea55 0e06 	orrs.w	lr, r5, r6
   b6cc8:	d018      	beq.n	b6cfc <__aeabi_ddiv+0x114>
   b6cca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6cce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6cd2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6cd6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6cda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6cde:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6ce2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6ce6:	d1c0      	bne.n	b6c6a <__aeabi_ddiv+0x82>
   b6ce8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6cec:	d10b      	bne.n	b6d06 <__aeabi_ddiv+0x11e>
   b6cee:	ea41 0100 	orr.w	r1, r1, r0
   b6cf2:	f04f 0000 	mov.w	r0, #0
   b6cf6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6cfa:	e7b6      	b.n	b6c6a <__aeabi_ddiv+0x82>
   b6cfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6d00:	bf04      	itt	eq
   b6d02:	4301      	orreq	r1, r0
   b6d04:	2000      	moveq	r0, #0
   b6d06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6d0a:	bf88      	it	hi
   b6d0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6d10:	f63f aeaf 	bhi.w	b6a72 <__aeabi_dmul+0xde>
   b6d14:	ebb5 0c03 	subs.w	ip, r5, r3
   b6d18:	bf04      	itt	eq
   b6d1a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6d1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6d22:	f150 0000 	adcs.w	r0, r0, #0
   b6d26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6d2a:	bd70      	pop	{r4, r5, r6, pc}
   b6d2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6d30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6d34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6d38:	bfc2      	ittt	gt
   b6d3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6d3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6d42:	bd70      	popgt	{r4, r5, r6, pc}
   b6d44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6d48:	f04f 0e00 	mov.w	lr, #0
   b6d4c:	3c01      	subs	r4, #1
   b6d4e:	e690      	b.n	b6a72 <__aeabi_dmul+0xde>
   b6d50:	ea45 0e06 	orr.w	lr, r5, r6
   b6d54:	e68d      	b.n	b6a72 <__aeabi_dmul+0xde>
   b6d56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6d5a:	ea94 0f0c 	teq	r4, ip
   b6d5e:	bf08      	it	eq
   b6d60:	ea95 0f0c 	teqeq	r5, ip
   b6d64:	f43f af3b 	beq.w	b6bde <__aeabi_dmul+0x24a>
   b6d68:	ea94 0f0c 	teq	r4, ip
   b6d6c:	d10a      	bne.n	b6d84 <__aeabi_ddiv+0x19c>
   b6d6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6d72:	f47f af34 	bne.w	b6bde <__aeabi_dmul+0x24a>
   b6d76:	ea95 0f0c 	teq	r5, ip
   b6d7a:	f47f af25 	bne.w	b6bc8 <__aeabi_dmul+0x234>
   b6d7e:	4610      	mov	r0, r2
   b6d80:	4619      	mov	r1, r3
   b6d82:	e72c      	b.n	b6bde <__aeabi_dmul+0x24a>
   b6d84:	ea95 0f0c 	teq	r5, ip
   b6d88:	d106      	bne.n	b6d98 <__aeabi_ddiv+0x1b0>
   b6d8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6d8e:	f43f aefd 	beq.w	b6b8c <__aeabi_dmul+0x1f8>
   b6d92:	4610      	mov	r0, r2
   b6d94:	4619      	mov	r1, r3
   b6d96:	e722      	b.n	b6bde <__aeabi_dmul+0x24a>
   b6d98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6d9c:	bf18      	it	ne
   b6d9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6da2:	f47f aec5 	bne.w	b6b30 <__aeabi_dmul+0x19c>
   b6da6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6daa:	f47f af0d 	bne.w	b6bc8 <__aeabi_dmul+0x234>
   b6dae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6db2:	f47f aeeb 	bne.w	b6b8c <__aeabi_dmul+0x1f8>
   b6db6:	e712      	b.n	b6bde <__aeabi_dmul+0x24a>

000b6db8 <__gedf2>:
   b6db8:	f04f 3cff 	mov.w	ip, #4294967295
   b6dbc:	e006      	b.n	b6dcc <__cmpdf2+0x4>
   b6dbe:	bf00      	nop

000b6dc0 <__ledf2>:
   b6dc0:	f04f 0c01 	mov.w	ip, #1
   b6dc4:	e002      	b.n	b6dcc <__cmpdf2+0x4>
   b6dc6:	bf00      	nop

000b6dc8 <__cmpdf2>:
   b6dc8:	f04f 0c01 	mov.w	ip, #1
   b6dcc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6dd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6dd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6dd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6ddc:	bf18      	it	ne
   b6dde:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6de2:	d01b      	beq.n	b6e1c <__cmpdf2+0x54>
   b6de4:	b001      	add	sp, #4
   b6de6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6dea:	bf0c      	ite	eq
   b6dec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6df0:	ea91 0f03 	teqne	r1, r3
   b6df4:	bf02      	ittt	eq
   b6df6:	ea90 0f02 	teqeq	r0, r2
   b6dfa:	2000      	moveq	r0, #0
   b6dfc:	4770      	bxeq	lr
   b6dfe:	f110 0f00 	cmn.w	r0, #0
   b6e02:	ea91 0f03 	teq	r1, r3
   b6e06:	bf58      	it	pl
   b6e08:	4299      	cmppl	r1, r3
   b6e0a:	bf08      	it	eq
   b6e0c:	4290      	cmpeq	r0, r2
   b6e0e:	bf2c      	ite	cs
   b6e10:	17d8      	asrcs	r0, r3, #31
   b6e12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6e16:	f040 0001 	orr.w	r0, r0, #1
   b6e1a:	4770      	bx	lr
   b6e1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6e20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6e24:	d102      	bne.n	b6e2c <__cmpdf2+0x64>
   b6e26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6e2a:	d107      	bne.n	b6e3c <__cmpdf2+0x74>
   b6e2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6e30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6e34:	d1d6      	bne.n	b6de4 <__cmpdf2+0x1c>
   b6e36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6e3a:	d0d3      	beq.n	b6de4 <__cmpdf2+0x1c>
   b6e3c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6e40:	4770      	bx	lr
   b6e42:	bf00      	nop

000b6e44 <__aeabi_cdrcmple>:
   b6e44:	4684      	mov	ip, r0
   b6e46:	4610      	mov	r0, r2
   b6e48:	4662      	mov	r2, ip
   b6e4a:	468c      	mov	ip, r1
   b6e4c:	4619      	mov	r1, r3
   b6e4e:	4663      	mov	r3, ip
   b6e50:	e000      	b.n	b6e54 <__aeabi_cdcmpeq>
   b6e52:	bf00      	nop

000b6e54 <__aeabi_cdcmpeq>:
   b6e54:	b501      	push	{r0, lr}
   b6e56:	f7ff ffb7 	bl	b6dc8 <__cmpdf2>
   b6e5a:	2800      	cmp	r0, #0
   b6e5c:	bf48      	it	mi
   b6e5e:	f110 0f00 	cmnmi.w	r0, #0
   b6e62:	bd01      	pop	{r0, pc}

000b6e64 <__aeabi_dcmpeq>:
   b6e64:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6e68:	f7ff fff4 	bl	b6e54 <__aeabi_cdcmpeq>
   b6e6c:	bf0c      	ite	eq
   b6e6e:	2001      	moveq	r0, #1
   b6e70:	2000      	movne	r0, #0
   b6e72:	f85d fb08 	ldr.w	pc, [sp], #8
   b6e76:	bf00      	nop

000b6e78 <__aeabi_dcmplt>:
   b6e78:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6e7c:	f7ff ffea 	bl	b6e54 <__aeabi_cdcmpeq>
   b6e80:	bf34      	ite	cc
   b6e82:	2001      	movcc	r0, #1
   b6e84:	2000      	movcs	r0, #0
   b6e86:	f85d fb08 	ldr.w	pc, [sp], #8
   b6e8a:	bf00      	nop

000b6e8c <__aeabi_dcmple>:
   b6e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6e90:	f7ff ffe0 	bl	b6e54 <__aeabi_cdcmpeq>
   b6e94:	bf94      	ite	ls
   b6e96:	2001      	movls	r0, #1
   b6e98:	2000      	movhi	r0, #0
   b6e9a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6e9e:	bf00      	nop

000b6ea0 <__aeabi_dcmpge>:
   b6ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6ea4:	f7ff ffce 	bl	b6e44 <__aeabi_cdrcmple>
   b6ea8:	bf94      	ite	ls
   b6eaa:	2001      	movls	r0, #1
   b6eac:	2000      	movhi	r0, #0
   b6eae:	f85d fb08 	ldr.w	pc, [sp], #8
   b6eb2:	bf00      	nop

000b6eb4 <__aeabi_dcmpgt>:
   b6eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6eb8:	f7ff ffc4 	bl	b6e44 <__aeabi_cdrcmple>
   b6ebc:	bf34      	ite	cc
   b6ebe:	2001      	movcc	r0, #1
   b6ec0:	2000      	movcs	r0, #0
   b6ec2:	f85d fb08 	ldr.w	pc, [sp], #8
   b6ec6:	bf00      	nop

000b6ec8 <__aeabi_dcmpun>:
   b6ec8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6ecc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6ed0:	d102      	bne.n	b6ed8 <__aeabi_dcmpun+0x10>
   b6ed2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6ed6:	d10a      	bne.n	b6eee <__aeabi_dcmpun+0x26>
   b6ed8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6edc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6ee0:	d102      	bne.n	b6ee8 <__aeabi_dcmpun+0x20>
   b6ee2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6ee6:	d102      	bne.n	b6eee <__aeabi_dcmpun+0x26>
   b6ee8:	f04f 0000 	mov.w	r0, #0
   b6eec:	4770      	bx	lr
   b6eee:	f04f 0001 	mov.w	r0, #1
   b6ef2:	4770      	bx	lr

000b6ef4 <__aeabi_d2f>:
   b6ef4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6ef8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6efc:	bf24      	itt	cs
   b6efe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6f02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6f06:	d90d      	bls.n	b6f24 <__aeabi_d2f+0x30>
   b6f08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6f0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6f10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6f14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6f18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6f1c:	bf08      	it	eq
   b6f1e:	f020 0001 	biceq.w	r0, r0, #1
   b6f22:	4770      	bx	lr
   b6f24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6f28:	d121      	bne.n	b6f6e <__aeabi_d2f+0x7a>
   b6f2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6f2e:	bfbc      	itt	lt
   b6f30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6f34:	4770      	bxlt	lr
   b6f36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6f3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6f3e:	f1c2 0218 	rsb	r2, r2, #24
   b6f42:	f1c2 0c20 	rsb	ip, r2, #32
   b6f46:	fa10 f30c 	lsls.w	r3, r0, ip
   b6f4a:	fa20 f002 	lsr.w	r0, r0, r2
   b6f4e:	bf18      	it	ne
   b6f50:	f040 0001 	orrne.w	r0, r0, #1
   b6f54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6f58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6f5c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6f60:	ea40 000c 	orr.w	r0, r0, ip
   b6f64:	fa23 f302 	lsr.w	r3, r3, r2
   b6f68:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6f6c:	e7cc      	b.n	b6f08 <__aeabi_d2f+0x14>
   b6f6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6f72:	d107      	bne.n	b6f84 <__aeabi_d2f+0x90>
   b6f74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6f78:	bf1e      	ittt	ne
   b6f7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6f7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6f82:	4770      	bxne	lr
   b6f84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6f88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6f8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6f90:	4770      	bx	lr
   b6f92:	bf00      	nop

000b6f94 <atexit>:
   b6f94:	2300      	movs	r3, #0
   b6f96:	4601      	mov	r1, r0
   b6f98:	461a      	mov	r2, r3
   b6f9a:	4618      	mov	r0, r3
   b6f9c:	f000 b84c 	b.w	b7038 <__register_exitproc>

000b6fa0 <memcpy>:
   b6fa0:	440a      	add	r2, r1
   b6fa2:	4291      	cmp	r1, r2
   b6fa4:	f100 33ff 	add.w	r3, r0, #4294967295
   b6fa8:	d100      	bne.n	b6fac <memcpy+0xc>
   b6faa:	4770      	bx	lr
   b6fac:	b510      	push	{r4, lr}
   b6fae:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6fb6:	4291      	cmp	r1, r2
   b6fb8:	d1f9      	bne.n	b6fae <memcpy+0xe>
   b6fba:	bd10      	pop	{r4, pc}

000b6fbc <memset>:
   b6fbc:	4402      	add	r2, r0
   b6fbe:	4603      	mov	r3, r0
   b6fc0:	4293      	cmp	r3, r2
   b6fc2:	d100      	bne.n	b6fc6 <memset+0xa>
   b6fc4:	4770      	bx	lr
   b6fc6:	f803 1b01 	strb.w	r1, [r3], #1
   b6fca:	e7f9      	b.n	b6fc0 <memset+0x4>

000b6fcc <srand>:
   b6fcc:	b538      	push	{r3, r4, r5, lr}
   b6fce:	4b10      	ldr	r3, [pc, #64]	; (b7010 <srand+0x44>)
   b6fd0:	681d      	ldr	r5, [r3, #0]
   b6fd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6fd4:	4604      	mov	r4, r0
   b6fd6:	b9b3      	cbnz	r3, b7006 <srand+0x3a>
   b6fd8:	2018      	movs	r0, #24
   b6fda:	f7fd fd61 	bl	b4aa0 <malloc>
   b6fde:	4602      	mov	r2, r0
   b6fe0:	63a8      	str	r0, [r5, #56]	; 0x38
   b6fe2:	b920      	cbnz	r0, b6fee <srand+0x22>
   b6fe4:	4b0b      	ldr	r3, [pc, #44]	; (b7014 <srand+0x48>)
   b6fe6:	480c      	ldr	r0, [pc, #48]	; (b7018 <srand+0x4c>)
   b6fe8:	2142      	movs	r1, #66	; 0x42
   b6fea:	f7fd fd79 	bl	b4ae0 <__assert_func>
   b6fee:	490b      	ldr	r1, [pc, #44]	; (b701c <srand+0x50>)
   b6ff0:	4b0b      	ldr	r3, [pc, #44]	; (b7020 <srand+0x54>)
   b6ff2:	e9c0 1300 	strd	r1, r3, [r0]
   b6ff6:	4b0b      	ldr	r3, [pc, #44]	; (b7024 <srand+0x58>)
   b6ff8:	6083      	str	r3, [r0, #8]
   b6ffa:	230b      	movs	r3, #11
   b6ffc:	8183      	strh	r3, [r0, #12]
   b6ffe:	2100      	movs	r1, #0
   b7000:	2001      	movs	r0, #1
   b7002:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7006:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7008:	2200      	movs	r2, #0
   b700a:	611c      	str	r4, [r3, #16]
   b700c:	615a      	str	r2, [r3, #20]
   b700e:	bd38      	pop	{r3, r4, r5, pc}
   b7010:	2003e63c 	.word	0x2003e63c
   b7014:	000b7338 	.word	0x000b7338
   b7018:	000b734f 	.word	0x000b734f
   b701c:	abcd330e 	.word	0xabcd330e
   b7020:	e66d1234 	.word	0xe66d1234
   b7024:	0005deec 	.word	0x0005deec

000b7028 <strlen>:
   b7028:	4603      	mov	r3, r0
   b702a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b702e:	2a00      	cmp	r2, #0
   b7030:	d1fb      	bne.n	b702a <strlen+0x2>
   b7032:	1a18      	subs	r0, r3, r0
   b7034:	3801      	subs	r0, #1
   b7036:	4770      	bx	lr

000b7038 <__register_exitproc>:
   b7038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b703c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b70f8 <__register_exitproc+0xc0>
   b7040:	4606      	mov	r6, r0
   b7042:	f8d8 0000 	ldr.w	r0, [r8]
   b7046:	461f      	mov	r7, r3
   b7048:	460d      	mov	r5, r1
   b704a:	4691      	mov	r9, r2
   b704c:	f000 f856 	bl	b70fc <__retarget_lock_acquire_recursive>
   b7050:	4b25      	ldr	r3, [pc, #148]	; (b70e8 <__register_exitproc+0xb0>)
   b7052:	681c      	ldr	r4, [r3, #0]
   b7054:	b934      	cbnz	r4, b7064 <__register_exitproc+0x2c>
   b7056:	4c25      	ldr	r4, [pc, #148]	; (b70ec <__register_exitproc+0xb4>)
   b7058:	601c      	str	r4, [r3, #0]
   b705a:	4b25      	ldr	r3, [pc, #148]	; (b70f0 <__register_exitproc+0xb8>)
   b705c:	b113      	cbz	r3, b7064 <__register_exitproc+0x2c>
   b705e:	681b      	ldr	r3, [r3, #0]
   b7060:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7064:	6863      	ldr	r3, [r4, #4]
   b7066:	2b1f      	cmp	r3, #31
   b7068:	dd07      	ble.n	b707a <__register_exitproc+0x42>
   b706a:	f8d8 0000 	ldr.w	r0, [r8]
   b706e:	f000 f847 	bl	b7100 <__retarget_lock_release_recursive>
   b7072:	f04f 30ff 	mov.w	r0, #4294967295
   b7076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b707a:	b34e      	cbz	r6, b70d0 <__register_exitproc+0x98>
   b707c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7080:	b988      	cbnz	r0, b70a6 <__register_exitproc+0x6e>
   b7082:	4b1c      	ldr	r3, [pc, #112]	; (b70f4 <__register_exitproc+0xbc>)
   b7084:	b923      	cbnz	r3, b7090 <__register_exitproc+0x58>
   b7086:	f8d8 0000 	ldr.w	r0, [r8]
   b708a:	f000 f838 	bl	b70fe <__retarget_lock_release>
   b708e:	e7f0      	b.n	b7072 <__register_exitproc+0x3a>
   b7090:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7094:	f7fd fd04 	bl	b4aa0 <malloc>
   b7098:	2800      	cmp	r0, #0
   b709a:	d0f4      	beq.n	b7086 <__register_exitproc+0x4e>
   b709c:	2300      	movs	r3, #0
   b709e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b70a2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b70a6:	6863      	ldr	r3, [r4, #4]
   b70a8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b70ac:	2201      	movs	r2, #1
   b70ae:	409a      	lsls	r2, r3
   b70b0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b70b4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b70b8:	4313      	orrs	r3, r2
   b70ba:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b70be:	2e02      	cmp	r6, #2
   b70c0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b70c4:	bf02      	ittt	eq
   b70c6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b70ca:	4313      	orreq	r3, r2
   b70cc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b70d0:	6863      	ldr	r3, [r4, #4]
   b70d2:	f8d8 0000 	ldr.w	r0, [r8]
   b70d6:	1c5a      	adds	r2, r3, #1
   b70d8:	3302      	adds	r3, #2
   b70da:	6062      	str	r2, [r4, #4]
   b70dc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b70e0:	f000 f80e 	bl	b7100 <__retarget_lock_release_recursive>
   b70e4:	2000      	movs	r0, #0
   b70e6:	e7c6      	b.n	b7076 <__register_exitproc+0x3e>
   b70e8:	2003e7e8 	.word	0x2003e7e8
   b70ec:	2003e75c 	.word	0x2003e75c
   b70f0:	00000000 	.word	0x00000000
   b70f4:	000b4aa1 	.word	0x000b4aa1
   b70f8:	2003e6a0 	.word	0x2003e6a0

000b70fc <__retarget_lock_acquire_recursive>:
   b70fc:	4770      	bx	lr

000b70fe <__retarget_lock_release>:
   b70fe:	4770      	bx	lr

000b7100 <__retarget_lock_release_recursive>:
   b7100:	4770      	bx	lr

000b7102 <link_code_end>:
	...

000b7104 <dynalib_user>:
   b7104:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7114:	0000 0000 6f52 6174 6974 676e 2b20 0a58     ....Rotating +X.
   b7124:	5200 746f 7461 6e69 2067 582d 000a 5852     .Rotating -X..RX
   b7134:	203a 3025 2e34 6632 2020 2020 5952 203a     : %04.2f    RY: 
   b7144:	3025 2e34 6632 2020 2020 5a52 203a 3025     %04.2f    RZ: %0
   b7154:	2e34 6632 000a 504d 3655 3530 2030 203e     4.2f..MPU6050 > 
   b7164:	6e45 6261 696c 676e 5720 7269 0a65 4d00     Enabling Wire..M
   b7174:	5550 3036 3035 3e20 4520 7078 6365 6574     PU6050 > Expecte
   b7184:	2064 7967 6f72 6373 706f 2065 6172 676e     d gyroscope rang
   b7194:	2065 6562 7774 6565 206e 2030 6e61 2064     e between 0 and 
   b71a4:	2c33 6720 746f 2520 0a64 0000               3, got %d...

000b71b0 <_ZTVN5spark13EthernetClassE>:
	...
   b71b8:	4b5f 000b 4b55 000b 4b4b 000b 4b41 000b     _K..UK..KK..AK..
   b71c8:	4b35 000b 4b29 000b 52f1 000b 52f9 000b     5K..)K...R...R..
   b71d8:	4b1d 000b 4b15 000b 4b0b 000b 4b01 000b     .K...K...K...K..
   b71e8:	5329 000b 7061 0070 5925 252d 2d6d 6425     )S..app.%Y-%m-%d
   b71f8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7208:	6d69 0065                                   ime.

000b720c <_ZTV9IPAddress>:
	...
   b7214:	4ec9 000b 4eb9 000b 4ebb 000b               .N...N...N..

000b7220 <_ZTV9USBSerial>:
	...
   b7228:	4faf 000b 5017 000b 4fed 000b 4bb1 000b     .O...P...O...K..
   b7238:	4fdf 000b 4fb1 000b 4fc1 000b 5011 000b     .O...O...O...P..
   b7248:	4fd1 000b 4fa9 000b                         .O...O..

000b7250 <_ZTV11USARTSerial>:
	...
   b7258:	50a9 000b 5115 000b 50ed 000b 4bb1 000b     .P...Q...P...K..
   b7268:	50bd 000b 50d9 000b 50cb 000b 50e7 000b     .P...P...P...P..
   b7278:	50ab 000b 50af 000b                         .P...P..

000b7280 <_ZTV7TwoWire>:
	...
   b7288:	514d 000b 5197 000b 516f 000b 514f 000b     MQ...Q..oQ..OQ..
   b7298:	5177 000b 517f 000b 5187 000b 518f 000b     wQ...Q...Q...Q..

000b72a8 <_ZTVN5spark9WiFiClassE>:
	...
   b72b0:	5291 000b 5287 000b 527d 000b 523f 000b     .R...R..}R..?R..
   b72c0:	4cbd 000b 5271 000b 52f1 000b 52f9 000b     .L..qR...R...R..
   b72d0:	5265 000b 525d 000b 5253 000b 5249 000b     eR..]R..SR..IR..
   b72e0:	5329 000b                                   )S..

000b72e4 <_ZTVN5spark12NetworkClassE>:
	...
   b72ec:	52b1 000b 52bb 000b 52c5 000b 52cf 000b     .R...R...R...R..
   b72fc:	52d9 000b 52e5 000b 52f1 000b 52f9 000b     .R...R...R...R..
   b730c:	5301 000b 530d 000b 5315 000b 531f 000b     .S...S...S...S..
   b731c:	5329 000b                                   )S..

000b7320 <_ZSt7nothrow>:
	...

000b7328 <TWO52>:
   b7328:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b7338:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b7348:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b7358:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b7368:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b7378:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b7388:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b7398:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b73a8:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b73b8:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b73c8:	2e64 0063                                   d.c.

000b73cc <link_const_variable_data_end>:
   b73cc:	000b4189 	.word	0x000b4189
   b73d0:	000b4b69 	.word	0x000b4b69
   b73d4:	000b4b7d 	.word	0x000b4b7d
   b73d8:	000b4ba1 	.word	0x000b4ba1
   b73dc:	000b4cc9 	.word	0x000b4cc9
   b73e0:	000b4cd9 	.word	0x000b4cd9
   b73e4:	000b4d75 	.word	0x000b4d75
   b73e8:	000b529d 	.word	0x000b529d
   b73ec:	000b5401 	.word	0x000b5401
