
c:/Users/deedp/Documents/IOT/SmartGlove/NeuralNetTest1/target/3.2.0/argon/NeuralNetTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000015f4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b5610  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003e614  000b5614  0001e614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000150  2003e6a0  2003e6a0  0002e6a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b56a0  000b56a0  000256a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b56c8  000b56c8  000256c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f934b  00000000  00000000  000256cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000108ca  00000000  00000000  0011ea17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00030dc8  00000000  00000000  0012f2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000025f8  00000000  00000000  001600a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009098  00000000  00000000  001626a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000356a9  00000000  00000000  0016b739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00035591  00000000  00000000  001a0de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00123c80  00000000  00000000  001d6373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006964  00000000  00000000  002f9ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 f8b9 	bl	b51a4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 f8c1 	bl	b51c0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e614 	.word	0x2003e614
   b4048:	000b5614 	.word	0x000b5614
   b404c:	2003e6a0 	.word	0x2003e6a0
   b4050:	2003e6a0 	.word	0x2003e6a0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fcdd 	bl	b4a1c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b55e4 	.word	0x000b55e4
   b407c:	000b5608 	.word	0x000b5608

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b83a 	b.w	b40f8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8cd 	bl	b4224 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bc7d 	b.w	b498c <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 bb1f 	b.w	b46d4 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bb25 	b.w	b46e4 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40aa:	b40e      	push	{r1, r2, r3}
   b40ac:	b503      	push	{r0, r1, lr}
   b40ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40b8:	f000 fbeb 	bl	b4892 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40bc:	b002      	add	sp, #8
   b40be:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c2:	b003      	add	sp, #12
   b40c4:	4770      	bx	lr

000b40c6 <_ZN7ezScale9calibrateEi>:

public:
    int _min = 1000000;
    int _max = -1000000;
    void calibrate(int value) {
        if (value < _min) {
   b40c6:	6803      	ldr	r3, [r0, #0]
   b40c8:	428b      	cmp	r3, r1
            _min = value;
        }
        if (value > _max) {
   b40ca:	6843      	ldr	r3, [r0, #4]
            _min = value;
   b40cc:	bfc8      	it	gt
   b40ce:	6001      	strgt	r1, [r0, #0]
        if (value > _max) {
   b40d0:	428b      	cmp	r3, r1
            _max = value;
   b40d2:	bfb8      	it	lt
   b40d4:	6041      	strlt	r1, [r0, #4]
        }
    }
   b40d6:	4770      	bx	lr

000b40d8 <_ZN7ezScale5scaleEiii>:

    int diff() {
        return _max - _min;
    }

    int scale(int value, int min, int max) {
   b40d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b40da:	4604      	mov	r4, r0
   b40dc:	460d      	mov	r5, r1
   b40de:	4616      	mov	r6, r2
   b40e0:	461f      	mov	r7, r3
        calibrate(value);
   b40e2:	f7ff fff0 	bl	b40c6 <_ZN7ezScale9calibrateEi>
        return map(value, _min, _max, min, max);
   b40e6:	e9d4 1200 	ldrd	r1, r2, [r4]
   b40ea:	9700      	str	r7, [sp, #0]
   b40ec:	4633      	mov	r3, r6
   b40ee:	4628      	mov	r0, r5
   b40f0:	f000 fc18 	bl	b4924 <_Z3mapiiiii>
    }
   b40f4:	b003      	add	sp, #12
   b40f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b40f8 <setup>:
ezScale pHScale;
ezScale pLScale;
ezScale mHScale;
ezScale mLScale;

void setup() {
   b40f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    Serial.begin(9600);
   b40fa:	f000 fd9d 	bl	b4c38 <_Z16_fetch_usbserialv>
   b40fe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4102:	f000 fd87 	bl	b4c14 <_ZN9USBSerial5beginEl>
    while (!Serial);
   b4106:	f000 fd97 	bl	b4c38 <_Z16_fetch_usbserialv>
   b410a:	f000 fd8a 	bl	b4c22 <_ZN9USBSerialcvbEv>
   b410e:	2800      	cmp	r0, #0
   b4110:	d0f9      	beq.n	b4106 <setup+0xe>
    pinMode(POINTER_H_PIN, INPUT);
   b4112:	2100      	movs	r1, #0
   b4114:	2011      	movs	r0, #17
   b4116:	f000 ff6d 	bl	b4ff4 <pinMode>
    pinMode(POINTER_L_PIN, INPUT);
   b411a:	2100      	movs	r1, #0
   b411c:	2010      	movs	r0, #16
   b411e:	f000 ff69 	bl	b4ff4 <pinMode>
    pinMode(MIDDLE_H_PIN, INPUT);
   b4122:	2100      	movs	r1, #0
   b4124:	200f      	movs	r0, #15
   b4126:	f000 ff65 	bl	b4ff4 <pinMode>
    pinMode(MIDDLE_L_PIN, INPUT);
   b412a:	2100      	movs	r1, #0
   b412c:	200e      	movs	r0, #14
   b412e:	f000 ff61 	bl	b4ff4 <pinMode>
    pinMode(RED_BUTTON_PIN, INPUT_PULLUP);
   b4132:	2102      	movs	r1, #2
   b4134:	4608      	mov	r0, r1
   b4136:	f000 ff5d 	bl	b4ff4 <pinMode>
    pinMode(BLUE_BUTTON_PIN, INPUT_PULLUP);
   b413a:	2102      	movs	r1, #2
   b413c:	2003      	movs	r0, #3
   b413e:	f000 ff59 	bl	b4ff4 <pinMode>
    pinMode(CALIBRATE_LED_PIN, OUTPUT);
   b4142:	2101      	movs	r1, #1
   b4144:	2004      	movs	r0, #4
   b4146:	f000 ff55 	bl	b4ff4 <pinMode>

    digitalWrite(CALIBRATE_LED_PIN, HIGH);
   b414a:	2101      	movs	r1, #1
   b414c:	2004      	movs	r0, #4
   b414e:	f000 ff62 	bl	b5016 <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4152:	f000 f95b 	bl	b440c <HAL_Timer_Get_Milli_Seconds>
    {
        int startTime = millis();
        while (millis() - startTime < 5000) {
            pHScale.calibrate(analogRead(POINTER_H_PIN));
   b4156:	4f2b      	ldr	r7, [pc, #172]	; (b4204 <setup+0x10c>)
            pLScale.calibrate(analogRead(POINTER_L_PIN));
   b4158:	4e2b      	ldr	r6, [pc, #172]	; (b4208 <setup+0x110>)
            mHScale.calibrate(analogRead(MIDDLE_H_PIN));
   b415a:	4d2c      	ldr	r5, [pc, #176]	; (b420c <setup+0x114>)
   b415c:	4604      	mov	r4, r0
   b415e:	f000 f955 	bl	b440c <HAL_Timer_Get_Milli_Seconds>
        while (millis() - startTime < 5000) {
   b4162:	f241 3387 	movw	r3, #4999	; 0x1387
   b4166:	1b00      	subs	r0, r0, r4
   b4168:	4298      	cmp	r0, r3
   b416a:	d81c      	bhi.n	b41a6 <setup+0xae>
            pHScale.calibrate(analogRead(POINTER_H_PIN));
   b416c:	2011      	movs	r0, #17
   b416e:	f000 ff7e 	bl	b506e <analogRead>
   b4172:	4601      	mov	r1, r0
   b4174:	4638      	mov	r0, r7
   b4176:	f7ff ffa6 	bl	b40c6 <_ZN7ezScale9calibrateEi>
            pLScale.calibrate(analogRead(POINTER_L_PIN));
   b417a:	2010      	movs	r0, #16
   b417c:	f000 ff77 	bl	b506e <analogRead>
   b4180:	4601      	mov	r1, r0
   b4182:	4630      	mov	r0, r6
   b4184:	f7ff ff9f 	bl	b40c6 <_ZN7ezScale9calibrateEi>
            mHScale.calibrate(analogRead(MIDDLE_H_PIN));
   b4188:	200f      	movs	r0, #15
   b418a:	f000 ff70 	bl	b506e <analogRead>
   b418e:	4601      	mov	r1, r0
   b4190:	4628      	mov	r0, r5
   b4192:	f7ff ff98 	bl	b40c6 <_ZN7ezScale9calibrateEi>
            mLScale.calibrate(analogRead(MIDDLE_L_PIN));
   b4196:	200e      	movs	r0, #14
   b4198:	f000 ff69 	bl	b506e <analogRead>
   b419c:	4601      	mov	r1, r0
   b419e:	481c      	ldr	r0, [pc, #112]	; (b4210 <setup+0x118>)
   b41a0:	f7ff ff91 	bl	b40c6 <_ZN7ezScale9calibrateEi>
        while (millis() - startTime < 5000) {
   b41a4:	e7db      	b.n	b415e <setup+0x66>
        }
        Serial.printf("Pointer High Scale Range: %d -> %d  [%d]\n", pHScale._min, pHScale._max, pHScale.diff());
   b41a6:	f000 fd47 	bl	b4c38 <_Z16_fetch_usbserialv>
   b41aa:	4b16      	ldr	r3, [pc, #88]	; (b4204 <setup+0x10c>)
   b41ac:	e9d3 2300 	ldrd	r2, r3, [r3]
        return _max - _min;
   b41b0:	1a99      	subs	r1, r3, r2
        Serial.printf("Pointer High Scale Range: %d -> %d  [%d]\n", pHScale._min, pHScale._max, pHScale.diff());
   b41b2:	9100      	str	r1, [sp, #0]
   b41b4:	4917      	ldr	r1, [pc, #92]	; (b4214 <setup+0x11c>)
   b41b6:	f7ff ff78 	bl	b40aa <_ZN5Print6printfEPKcz>
        Serial.printf("Pointer Low Scale Range: %d -> %d  [%d]\n", pLScale._min, pLScale._max, pLScale.diff());
   b41ba:	f000 fd3d 	bl	b4c38 <_Z16_fetch_usbserialv>
   b41be:	4b12      	ldr	r3, [pc, #72]	; (b4208 <setup+0x110>)
   b41c0:	e9d3 2300 	ldrd	r2, r3, [r3]
        return _max - _min;
   b41c4:	1a99      	subs	r1, r3, r2
        Serial.printf("Pointer Low Scale Range: %d -> %d  [%d]\n", pLScale._min, pLScale._max, pLScale.diff());
   b41c6:	9100      	str	r1, [sp, #0]
   b41c8:	4913      	ldr	r1, [pc, #76]	; (b4218 <setup+0x120>)
   b41ca:	f7ff ff6e 	bl	b40aa <_ZN5Print6printfEPKcz>
        Serial.printf("Middle High Scale Range: %d -> %d  [%d]\n", mHScale._min, mHScale._max, mHScale.diff());
   b41ce:	f000 fd33 	bl	b4c38 <_Z16_fetch_usbserialv>
   b41d2:	4b0e      	ldr	r3, [pc, #56]	; (b420c <setup+0x114>)
   b41d4:	e9d3 2300 	ldrd	r2, r3, [r3]
        return _max - _min;
   b41d8:	1a99      	subs	r1, r3, r2
        Serial.printf("Middle High Scale Range: %d -> %d  [%d]\n", mHScale._min, mHScale._max, mHScale.diff());
   b41da:	9100      	str	r1, [sp, #0]
   b41dc:	490f      	ldr	r1, [pc, #60]	; (b421c <setup+0x124>)
   b41de:	f7ff ff64 	bl	b40aa <_ZN5Print6printfEPKcz>
        Serial.printf("Middle Low Scale Range: %d -> %d  [%d]\n", mLScale._min, mLScale._max, mLScale.diff());
   b41e2:	f000 fd29 	bl	b4c38 <_Z16_fetch_usbserialv>
   b41e6:	4b0a      	ldr	r3, [pc, #40]	; (b4210 <setup+0x118>)
   b41e8:	e9d3 2300 	ldrd	r2, r3, [r3]
        return _max - _min;
   b41ec:	1a99      	subs	r1, r3, r2
        Serial.printf("Middle Low Scale Range: %d -> %d  [%d]\n", mLScale._min, mLScale._max, mLScale.diff());
   b41ee:	9100      	str	r1, [sp, #0]
   b41f0:	490b      	ldr	r1, [pc, #44]	; (b4220 <setup+0x128>)
   b41f2:	f7ff ff5a 	bl	b40aa <_ZN5Print6printfEPKcz>
    }
    digitalWrite(CALIBRATE_LED_PIN, LOW);
   b41f6:	2100      	movs	r1, #0
   b41f8:	2004      	movs	r0, #4
}
   b41fa:	b003      	add	sp, #12
   b41fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    digitalWrite(CALIBRATE_LED_PIN, LOW);
   b4200:	f000 bf09 	b.w	b5016 <digitalWrite>
   b4204:	2003e624 	.word	0x2003e624
   b4208:	2003e62c 	.word	0x2003e62c
   b420c:	2003e614 	.word	0x2003e614
   b4210:	2003e61c 	.word	0x2003e61c
   b4214:	000b531c 	.word	0x000b531c
   b4218:	000b5346 	.word	0x000b5346
   b421c:	000b536f 	.word	0x000b536f
   b4220:	000b5398 	.word	0x000b5398

000b4224 <loop>:

void loop() {
   b4224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    static bool lastRedState = digitalRead(RED_BUTTON_PIN);
   b4228:	4c47      	ldr	r4, [pc, #284]	; (b4348 <loop+0x124>)
   b422a:	f8df b130 	ldr.w	fp, [pc, #304]	; b435c <loop+0x138>
   b422e:	7823      	ldrb	r3, [r4, #0]
   b4230:	f3bf 8f5b 	dmb	ish
   b4234:	f013 0f01 	tst.w	r3, #1
void loop() {
   b4238:	b085      	sub	sp, #20
    static bool lastRedState = digitalRead(RED_BUTTON_PIN);
   b423a:	d10e      	bne.n	b425a <loop+0x36>
   b423c:	4620      	mov	r0, r4
   b423e:	f7ff ff2c 	bl	b409a <__cxa_guard_acquire>
   b4242:	b150      	cbz	r0, b425a <loop+0x36>
   b4244:	2002      	movs	r0, #2
   b4246:	f000 feff 	bl	b5048 <digitalRead>
   b424a:	3800      	subs	r0, #0
   b424c:	bf18      	it	ne
   b424e:	2001      	movne	r0, #1
   b4250:	f88b 0000 	strb.w	r0, [fp]
   b4254:	4620      	mov	r0, r4
   b4256:	f7ff ff25 	bl	b40a4 <__cxa_guard_release>
    static bool lastBlueState = digitalRead(BLUE_BUTTON_PIN);
   b425a:	4c3c      	ldr	r4, [pc, #240]	; (b434c <loop+0x128>)
   b425c:	f8df a100 	ldr.w	sl, [pc, #256]	; b4360 <loop+0x13c>
   b4260:	7823      	ldrb	r3, [r4, #0]
   b4262:	f3bf 8f5b 	dmb	ish
   b4266:	f013 0f01 	tst.w	r3, #1
   b426a:	d10e      	bne.n	b428a <loop+0x66>
   b426c:	4620      	mov	r0, r4
   b426e:	f7ff ff14 	bl	b409a <__cxa_guard_acquire>
   b4272:	b150      	cbz	r0, b428a <loop+0x66>
   b4274:	2003      	movs	r0, #3
   b4276:	f000 fee7 	bl	b5048 <digitalRead>
   b427a:	3800      	subs	r0, #0
   b427c:	bf18      	it	ne
   b427e:	2001      	movne	r0, #1
   b4280:	f88a 0000 	strb.w	r0, [sl]
   b4284:	4620      	mov	r0, r4
   b4286:	f7ff ff0d 	bl	b40a4 <__cxa_guard_release>
    bool curRedState = digitalRead(RED_BUTTON_PIN);
   b428a:	2002      	movs	r0, #2
   b428c:	f000 fedc 	bl	b5048 <digitalRead>
   b4290:	1e03      	subs	r3, r0, #0
   b4292:	bf18      	it	ne
   b4294:	2301      	movne	r3, #1
   b4296:	4681      	mov	r9, r0
    bool curBlueState = digitalRead(BLUE_BUTTON_PIN);
   b4298:	2003      	movs	r0, #3
    bool curRedState = digitalRead(RED_BUTTON_PIN);
   b429a:	9302      	str	r3, [sp, #8]
    bool curBlueState = digitalRead(BLUE_BUTTON_PIN);
   b429c:	f000 fed4 	bl	b5048 <digitalRead>
   b42a0:	1e03      	subs	r3, r0, #0
   b42a2:	bf18      	it	ne
   b42a4:	2301      	movne	r3, #1
   b42a6:	4680      	mov	r8, r0

    int pH = pHScale.scale(analogRead(POINTER_H_PIN), 0, 255);
   b42a8:	2011      	movs	r0, #17
    bool curBlueState = digitalRead(BLUE_BUTTON_PIN);
   b42aa:	9303      	str	r3, [sp, #12]
    int pH = pHScale.scale(analogRead(POINTER_H_PIN), 0, 255);
   b42ac:	f000 fedf 	bl	b506e <analogRead>
   b42b0:	23ff      	movs	r3, #255	; 0xff
   b42b2:	4601      	mov	r1, r0
   b42b4:	2200      	movs	r2, #0
   b42b6:	4826      	ldr	r0, [pc, #152]	; (b4350 <loop+0x12c>)
   b42b8:	f7ff ff0e 	bl	b40d8 <_ZN7ezScale5scaleEiii>
   b42bc:	4604      	mov	r4, r0
    int pL = pHScale.scale(analogRead(POINTER_L_PIN), 0, 255);
   b42be:	2010      	movs	r0, #16
   b42c0:	f000 fed5 	bl	b506e <analogRead>
   b42c4:	23ff      	movs	r3, #255	; 0xff
   b42c6:	4601      	mov	r1, r0
   b42c8:	2200      	movs	r2, #0
   b42ca:	4821      	ldr	r0, [pc, #132]	; (b4350 <loop+0x12c>)
   b42cc:	f7ff ff04 	bl	b40d8 <_ZN7ezScale5scaleEiii>
   b42d0:	4605      	mov	r5, r0
    int mH = pHScale.scale(analogRead(MIDDLE_H_PIN), 0, 255);
   b42d2:	200f      	movs	r0, #15
   b42d4:	f000 fecb 	bl	b506e <analogRead>
   b42d8:	23ff      	movs	r3, #255	; 0xff
   b42da:	4601      	mov	r1, r0
   b42dc:	2200      	movs	r2, #0
   b42de:	481c      	ldr	r0, [pc, #112]	; (b4350 <loop+0x12c>)
   b42e0:	f7ff fefa 	bl	b40d8 <_ZN7ezScale5scaleEiii>
   b42e4:	4606      	mov	r6, r0
    int mL = pHScale.scale(analogRead(MIDDLE_L_PIN), 0, 255);
   b42e6:	200e      	movs	r0, #14
   b42e8:	f000 fec1 	bl	b506e <analogRead>
   b42ec:	23ff      	movs	r3, #255	; 0xff
   b42ee:	4601      	mov	r1, r0
   b42f0:	2200      	movs	r2, #0
   b42f2:	4817      	ldr	r0, [pc, #92]	; (b4350 <loop+0x12c>)
   b42f4:	f7ff fef0 	bl	b40d8 <_ZN7ezScale5scaleEiii>

    if (!lastRedState && curRedState) {
   b42f8:	f89b 3000 	ldrb.w	r3, [fp]
    int mL = pHScale.scale(analogRead(MIDDLE_L_PIN), 0, 255);
   b42fc:	4607      	mov	r7, r0
    if (!lastRedState && curRedState) {
   b42fe:	b95b      	cbnz	r3, b4318 <loop+0xf4>
   b4300:	f1b9 0f00 	cmp.w	r9, #0
   b4304:	d008      	beq.n	b4318 <loop+0xf4>
        Serial.printf("R:%d,%d,%d,%d", pH, pL, mH, mL);
   b4306:	f000 fc97 	bl	b4c38 <_Z16_fetch_usbserialv>
   b430a:	e9cd 6700 	strd	r6, r7, [sp]
   b430e:	4911      	ldr	r1, [pc, #68]	; (b4354 <loop+0x130>)
   b4310:	462b      	mov	r3, r5
   b4312:	4622      	mov	r2, r4
   b4314:	f7ff fec9 	bl	b40aa <_ZN5Print6printfEPKcz>
    }
    if (!lastBlueState && curBlueState) {
   b4318:	f89a 3000 	ldrb.w	r3, [sl]
   b431c:	b95b      	cbnz	r3, b4336 <loop+0x112>
   b431e:	f1b8 0f00 	cmp.w	r8, #0
   b4322:	d008      	beq.n	b4336 <loop+0x112>
        Serial.printf("B:%d,%d,%d,%d", pH, pL, mH, mL);
   b4324:	f000 fc88 	bl	b4c38 <_Z16_fetch_usbserialv>
   b4328:	e9cd 6700 	strd	r6, r7, [sp]
   b432c:	490a      	ldr	r1, [pc, #40]	; (b4358 <loop+0x134>)
   b432e:	462b      	mov	r3, r5
   b4330:	4622      	mov	r2, r4
   b4332:	f7ff feba 	bl	b40aa <_ZN5Print6printfEPKcz>
    }

    lastRedState = curRedState;
   b4336:	9b02      	ldr	r3, [sp, #8]
   b4338:	f88b 3000 	strb.w	r3, [fp]
    lastBlueState = curBlueState;
   b433c:	9b03      	ldr	r3, [sp, #12]
   b433e:	f88a 3000 	strb.w	r3, [sl]
   b4342:	b005      	add	sp, #20
   b4344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4348:	2003e6ac 	.word	0x2003e6ac
   b434c:	2003e6b0 	.word	0x2003e6b0
   b4350:	2003e624 	.word	0x2003e624
   b4354:	000b53c0 	.word	0x000b53c0
   b4358:	000b53ce 	.word	0x000b53ce
   b435c:	2003e6b4 	.word	0x2003e6b4
   b4360:	2003e6b5 	.word	0x2003e6b5

000b4364 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4364:	4b04      	ldr	r3, [pc, #16]	; (b4378 <_GLOBAL__sub_I_SystemMode+0x14>)
   b4366:	2200      	movs	r2, #0
   b4368:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b436c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4370:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4372:	2002      	movs	r0, #2
   b4374:	f000 b92a 	b.w	b45cc <set_system_mode>
   b4378:	2003e6a0 	.word	0x2003e6a0

000b437c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b437c:	b508      	push	{r3, lr}
   b437e:	4b02      	ldr	r3, [pc, #8]	; (b4388 <netdb_freeaddrinfo+0xc>)
   b4380:	681b      	ldr	r3, [r3, #0]
   b4382:	689b      	ldr	r3, [r3, #8]
   b4384:	9301      	str	r3, [sp, #4]
   b4386:	bd08      	pop	{r3, pc}
   b4388:	00030268 	.word	0x00030268

000b438c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b438c:	b508      	push	{r3, lr}
   b438e:	4b02      	ldr	r3, [pc, #8]	; (b4398 <netdb_getaddrinfo+0xc>)
   b4390:	681b      	ldr	r3, [r3, #0]
   b4392:	68db      	ldr	r3, [r3, #12]
   b4394:	9301      	str	r3, [sp, #4]
   b4396:	bd08      	pop	{r3, pc}
   b4398:	00030268 	.word	0x00030268

000b439c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b439c:	b508      	push	{r3, lr}
   b439e:	4b02      	ldr	r3, [pc, #8]	; (b43a8 <HAL_Validate_Pin_Function+0xc>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	685b      	ldr	r3, [r3, #4]
   b43a4:	9301      	str	r3, [sp, #4]
   b43a6:	bd08      	pop	{r3, pc}
   b43a8:	0003022c 	.word	0x0003022c

000b43ac <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b43ac:	b508      	push	{r3, lr}
   b43ae:	4b02      	ldr	r3, [pc, #8]	; (b43b8 <HAL_Pin_Mode+0xc>)
   b43b0:	681b      	ldr	r3, [r3, #0]
   b43b2:	689b      	ldr	r3, [r3, #8]
   b43b4:	9301      	str	r3, [sp, #4]
   b43b6:	bd08      	pop	{r3, pc}
   b43b8:	0003022c 	.word	0x0003022c

000b43bc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b43bc:	b508      	push	{r3, lr}
   b43be:	4b02      	ldr	r3, [pc, #8]	; (b43c8 <HAL_Get_Pin_Mode+0xc>)
   b43c0:	681b      	ldr	r3, [r3, #0]
   b43c2:	68db      	ldr	r3, [r3, #12]
   b43c4:	9301      	str	r3, [sp, #4]
   b43c6:	bd08      	pop	{r3, pc}
   b43c8:	0003022c 	.word	0x0003022c

000b43cc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b43cc:	b508      	push	{r3, lr}
   b43ce:	4b02      	ldr	r3, [pc, #8]	; (b43d8 <HAL_GPIO_Write+0xc>)
   b43d0:	681b      	ldr	r3, [r3, #0]
   b43d2:	691b      	ldr	r3, [r3, #16]
   b43d4:	9301      	str	r3, [sp, #4]
   b43d6:	bd08      	pop	{r3, pc}
   b43d8:	0003022c 	.word	0x0003022c

000b43dc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <HAL_GPIO_Read+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	695b      	ldr	r3, [r3, #20]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	0003022c 	.word	0x0003022c

000b43ec <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <hal_adc_read+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	0003022c 	.word	0x0003022c

000b43fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <HAL_RNG_GetRandomNumber+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	685b      	ldr	r3, [r3, #4]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	00030218 	.word	0x00030218

000b440c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	695b      	ldr	r3, [r3, #20]
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	00030218 	.word	0x00030218

000b441c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <os_mutex_recursive_create+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	00030248 	.word	0x00030248

000b442c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <inet_inet_ntop+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	695b      	ldr	r3, [r3, #20]
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	00030264 	.word	0x00030264

000b443c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <hal_usart_write+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	68db      	ldr	r3, [r3, #12]
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	0003023c 	.word	0x0003023c

000b444c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <hal_usart_available+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	691b      	ldr	r3, [r3, #16]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	0003023c 	.word	0x0003023c

000b445c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <hal_usart_read+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	695b      	ldr	r3, [r3, #20]
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	0003023c 	.word	0x0003023c

000b446c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <hal_usart_peek+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	699b      	ldr	r3, [r3, #24]
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	0003023c 	.word	0x0003023c

000b447c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <hal_usart_flush+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	69db      	ldr	r3, [r3, #28]
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	0003023c 	.word	0x0003023c

000b448c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <hal_usart_is_enabled+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	6a1b      	ldr	r3, [r3, #32]
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	0003023c 	.word	0x0003023c

000b449c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <hal_usart_available_data_for_write+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	0003023c 	.word	0x0003023c

000b44ac <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <hal_usart_init_ex+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	0003023c 	.word	0x0003023c

000b44bc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <hal_i2c_write+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	6a1b      	ldr	r3, [r3, #32]
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030228 	.word	0x00030228

000b44cc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <hal_i2c_available+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	00030228 	.word	0x00030228

000b44dc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <hal_i2c_read+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	00030228 	.word	0x00030228

000b44ec <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <hal_i2c_peek+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	00030228 	.word	0x00030228

000b44fc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <hal_i2c_flush+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	00030228 	.word	0x00030228

000b450c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <hal_i2c_is_enabled+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	00030228 	.word	0x00030228

000b451c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <hal_i2c_init+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	00030228 	.word	0x00030228

000b452c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <hal_spi_init+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	69db      	ldr	r3, [r3, #28]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	00030230 	.word	0x00030230

000b453c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <hal_spi_is_enabled+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	6a1b      	ldr	r3, [r3, #32]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	00030230 	.word	0x00030230

000b454c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <HAL_USB_USART_Init+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	681b      	ldr	r3, [r3, #0]
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	0003024c 	.word	0x0003024c

000b455c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <HAL_USB_USART_Begin+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	685b      	ldr	r3, [r3, #4]
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	0003024c 	.word	0x0003024c

000b456c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <HAL_USB_USART_Available_Data+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	691b      	ldr	r3, [r3, #16]
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	0003024c 	.word	0x0003024c

000b457c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	695b      	ldr	r3, [r3, #20]
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	0003024c 	.word	0x0003024c

000b458c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <HAL_USB_USART_Receive_Data+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	699b      	ldr	r3, [r3, #24]
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	0003024c 	.word	0x0003024c

000b459c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b02      	ldr	r3, [pc, #8]	; (b45a8 <HAL_USB_USART_Send_Data+0xc>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	69db      	ldr	r3, [r3, #28]
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	bd08      	pop	{r3, pc}
   b45a8:	0003024c 	.word	0x0003024c

000b45ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b45ac:	b508      	push	{r3, lr}
   b45ae:	4b02      	ldr	r3, [pc, #8]	; (b45b8 <HAL_USB_USART_Flush_Data+0xc>)
   b45b0:	681b      	ldr	r3, [r3, #0]
   b45b2:	6a1b      	ldr	r3, [r3, #32]
   b45b4:	9301      	str	r3, [sp, #4]
   b45b6:	bd08      	pop	{r3, pc}
   b45b8:	0003024c 	.word	0x0003024c

000b45bc <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b45bc:	b508      	push	{r3, lr}
   b45be:	4b02      	ldr	r3, [pc, #8]	; (b45c8 <HAL_USB_USART_Is_Enabled+0xc>)
   b45c0:	681b      	ldr	r3, [r3, #0]
   b45c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b45c4:	9301      	str	r3, [sp, #4]
   b45c6:	bd08      	pop	{r3, pc}
   b45c8:	0003024c 	.word	0x0003024c

000b45cc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b02      	ldr	r3, [pc, #8]	; (b45d8 <set_system_mode+0xc>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	685b      	ldr	r3, [r3, #4]
   b45d4:	9301      	str	r3, [sp, #4]
   b45d6:	bd08      	pop	{r3, pc}
   b45d8:	00030220 	.word	0x00030220

000b45dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b45dc:	b508      	push	{r3, lr}
   b45de:	4b03      	ldr	r3, [pc, #12]	; (b45ec <system_ctrl_set_app_request_handler+0x10>)
   b45e0:	681b      	ldr	r3, [r3, #0]
   b45e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b45e6:	9301      	str	r3, [sp, #4]
   b45e8:	bd08      	pop	{r3, pc}
   b45ea:	0000      	.short	0x0000
   b45ec:	00030220 	.word	0x00030220

000b45f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b03      	ldr	r3, [pc, #12]	; (b4600 <system_ctrl_set_result+0x10>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b45fa:	9301      	str	r3, [sp, #4]
   b45fc:	bd08      	pop	{r3, pc}
   b45fe:	0000      	.short	0x0000
   b4600:	00030220 	.word	0x00030220

000b4604 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <network_connect+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	685b      	ldr	r3, [r3, #4]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030240 	.word	0x00030240

000b4614 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <network_connecting+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	689b      	ldr	r3, [r3, #8]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030240 	.word	0x00030240

000b4624 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <network_disconnect+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	68db      	ldr	r3, [r3, #12]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030240 	.word	0x00030240

000b4634 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <network_ready+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	691b      	ldr	r3, [r3, #16]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030240 	.word	0x00030240

000b4644 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <network_on+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	695b      	ldr	r3, [r3, #20]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030240 	.word	0x00030240

000b4654 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <network_off+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	699b      	ldr	r3, [r3, #24]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030240 	.word	0x00030240

000b4664 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <network_listen+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	69db      	ldr	r3, [r3, #28]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	00030240 	.word	0x00030240

000b4674 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <network_listening+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6a1b      	ldr	r3, [r3, #32]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	00030240 	.word	0x00030240

000b4684 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <network_set_listen_timeout+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030240 	.word	0x00030240

000b4694 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <network_get_listen_timeout+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030240 	.word	0x00030240

000b46a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <network_is_on+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030240 	.word	0x00030240

000b46b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <network_is_off+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030240 	.word	0x00030240

000b46c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030244 	.word	0x00030244

000b46d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <malloc+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	681b      	ldr	r3, [r3, #0]
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	0003021c 	.word	0x0003021c

000b46e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <free+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	685b      	ldr	r3, [r3, #4]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	0003021c 	.word	0x0003021c

000b46f4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <vsnprintf+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	0003021c 	.word	0x0003021c

000b4704 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <__assert_func+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	0003021c 	.word	0x0003021c

000b4714 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <newlib_impure_ptr_callback+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	0003021c 	.word	0x0003021c

000b4724 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4724:	2200      	movs	r2, #0
   b4726:	6840      	ldr	r0, [r0, #4]
   b4728:	4611      	mov	r1, r2
   b472a:	f7ff bfa3 	b.w	b4674 <network_listening>

000b472e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b472e:	2200      	movs	r2, #0
   b4730:	6840      	ldr	r0, [r0, #4]
   b4732:	4611      	mov	r1, r2
   b4734:	f7ff bfae 	b.w	b4694 <network_get_listen_timeout>

000b4738 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4738:	6840      	ldr	r0, [r0, #4]
   b473a:	2200      	movs	r2, #0
   b473c:	f7ff bfa2 	b.w	b4684 <network_set_listen_timeout>

000b4740 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4740:	6840      	ldr	r0, [r0, #4]
   b4742:	2200      	movs	r2, #0
   b4744:	f081 0101 	eor.w	r1, r1, #1
   b4748:	f7ff bf8c 	b.w	b4664 <network_listen>

000b474c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b474c:	2300      	movs	r3, #0
   b474e:	6840      	ldr	r0, [r0, #4]
   b4750:	461a      	mov	r2, r3
   b4752:	4619      	mov	r1, r3
   b4754:	f7ff bf7e 	b.w	b4654 <network_off>

000b4758 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4758:	2300      	movs	r3, #0
   b475a:	6840      	ldr	r0, [r0, #4]
   b475c:	461a      	mov	r2, r3
   b475e:	4619      	mov	r1, r3
   b4760:	f7ff bf70 	b.w	b4644 <network_on>

000b4764 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4764:	2200      	movs	r2, #0
   b4766:	6840      	ldr	r0, [r0, #4]
   b4768:	4611      	mov	r1, r2
   b476a:	f7ff bf63 	b.w	b4634 <network_ready>

000b476e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b476e:	2200      	movs	r2, #0
   b4770:	6840      	ldr	r0, [r0, #4]
   b4772:	4611      	mov	r1, r2
   b4774:	f7ff bf4e 	b.w	b4614 <network_connecting>

000b4778 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4778:	6840      	ldr	r0, [r0, #4]
   b477a:	2200      	movs	r2, #0
   b477c:	2102      	movs	r1, #2
   b477e:	f7ff bf51 	b.w	b4624 <network_disconnect>

000b4782 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4782:	2300      	movs	r3, #0
   b4784:	6840      	ldr	r0, [r0, #4]
   b4786:	461a      	mov	r2, r3
   b4788:	f7ff bf3c 	b.w	b4604 <network_connect>

000b478c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b478c:	4b02      	ldr	r3, [pc, #8]	; (b4798 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b478e:	2203      	movs	r2, #3
   b4790:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4792:	4a02      	ldr	r2, [pc, #8]	; (b479c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4794:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4796:	4770      	bx	lr
   b4798:	2003e6b8 	.word	0x2003e6b8
   b479c:	000b53e4 	.word	0x000b53e4

000b47a0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b47a0:	b510      	push	{r4, lr}
   b47a2:	4604      	mov	r4, r0
   b47a4:	4608      	mov	r0, r1
{
    _spi = spi;
   b47a6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b47a8:	f7ff fec0 	bl	b452c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b47ac:	2300      	movs	r3, #0
   b47ae:	6063      	str	r3, [r4, #4]
}
   b47b0:	4620      	mov	r0, r4
   b47b2:	bd10      	pop	{r4, pc}

000b47b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b47b4:	4b05      	ldr	r3, [pc, #20]	; (b47cc <_GLOBAL__sub_I_System+0x18>)
   b47b6:	2202      	movs	r2, #2
   b47b8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b47ba:	4b05      	ldr	r3, [pc, #20]	; (b47d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b47bc:	4a05      	ldr	r2, [pc, #20]	; (b47d4 <_GLOBAL__sub_I_System+0x20>)
   b47be:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b47c0:	2000      	movs	r0, #0
   b47c2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b47c6:	f7ff bf01 	b.w	b45cc <set_system_mode>
   b47ca:	bf00      	nop
   b47cc:	2003e6cc 	.word	0x2003e6cc
   b47d0:	2003e6c0 	.word	0x2003e6c0
   b47d4:	ffff0000 	.word	0xffff0000

000b47d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b47d8:	4802      	ldr	r0, [pc, #8]	; (b47e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b47da:	2300      	movs	r3, #0
   b47dc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b47de:	f7ff be1d 	b.w	b441c <os_mutex_recursive_create>
   b47e2:	bf00      	nop
   b47e4:	2003e6d0 	.word	0x2003e6d0

000b47e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b47e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b47ea:	4606      	mov	r6, r0
   b47ec:	460d      	mov	r5, r1
  size_t n = 0;
   b47ee:	188f      	adds	r7, r1, r2
   b47f0:	2400      	movs	r4, #0
  while (size--) {
   b47f2:	42bd      	cmp	r5, r7
   b47f4:	d00c      	beq.n	b4810 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b47f6:	6833      	ldr	r3, [r6, #0]
   b47f8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b47fc:	689b      	ldr	r3, [r3, #8]
   b47fe:	4630      	mov	r0, r6
   b4800:	4798      	blx	r3
     if (chunk>=0)
   b4802:	1e03      	subs	r3, r0, #0
   b4804:	db01      	blt.n	b480a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4806:	441c      	add	r4, r3
  while (size--) {
   b4808:	e7f3      	b.n	b47f2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b480a:	2c00      	cmp	r4, #0
   b480c:	bf08      	it	eq
   b480e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4810:	4620      	mov	r0, r4
   b4812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4814 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4814:	b513      	push	{r0, r1, r4, lr}
   b4816:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4818:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b481a:	b159      	cbz	r1, b4834 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b481c:	9101      	str	r1, [sp, #4]
   b481e:	f000 fd05 	bl	b522c <strlen>
   b4822:	6823      	ldr	r3, [r4, #0]
   b4824:	9901      	ldr	r1, [sp, #4]
   b4826:	68db      	ldr	r3, [r3, #12]
   b4828:	4602      	mov	r2, r0
   b482a:	4620      	mov	r0, r4
    }
   b482c:	b002      	add	sp, #8
   b482e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4832:	4718      	bx	r3
    }
   b4834:	b002      	add	sp, #8
   b4836:	bd10      	pop	{r4, pc}

000b4838 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4838:	6803      	ldr	r3, [r0, #0]
   b483a:	689b      	ldr	r3, [r3, #8]
   b483c:	4718      	bx	r3

000b483e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b483e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4840:	210d      	movs	r1, #13
{
   b4842:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4844:	f7ff fff8 	bl	b4838 <_ZN5Print5printEc>
  n += print('\n');
   b4848:	210a      	movs	r1, #10
  size_t n = print('\r');
   b484a:	4604      	mov	r4, r0
  n += print('\n');
   b484c:	4628      	mov	r0, r5
   b484e:	f7ff fff3 	bl	b4838 <_ZN5Print5printEc>
  return n;
}
   b4852:	4420      	add	r0, r4
   b4854:	bd38      	pop	{r3, r4, r5, pc}

000b4856 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4856:	b530      	push	{r4, r5, lr}
   b4858:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b485a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b485c:	2a01      	cmp	r2, #1
  *str = '\0';
   b485e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4862:	bf98      	it	ls
   b4864:	220a      	movls	r2, #10
   b4866:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4868:	460d      	mov	r5, r1
   b486a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b486e:	fb01 5312 	mls	r3, r1, r2, r5
   b4872:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4876:	2b09      	cmp	r3, #9
   b4878:	bf94      	ite	ls
   b487a:	3330      	addls	r3, #48	; 0x30
   b487c:	3337      	addhi	r3, #55	; 0x37
   b487e:	b2db      	uxtb	r3, r3
  } while(n);
   b4880:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4882:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4886:	d9ef      	bls.n	b4868 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4888:	4621      	mov	r1, r4
   b488a:	f7ff ffc3 	bl	b4814 <_ZN5Print5writeEPKc>
}
   b488e:	b00b      	add	sp, #44	; 0x2c
   b4890:	bd30      	pop	{r4, r5, pc}

000b4892 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4896:	b086      	sub	sp, #24
   b4898:	af00      	add	r7, sp, #0
   b489a:	4605      	mov	r5, r0
   b489c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b489e:	1d38      	adds	r0, r7, #4
   b48a0:	2114      	movs	r1, #20
{
   b48a2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b48a4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b48a6:	f7ff ff25 	bl	b46f4 <vsnprintf>

    if (n<bufsize)
   b48aa:	2813      	cmp	r0, #19
   b48ac:	d80e      	bhi.n	b48cc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b48ae:	1d39      	adds	r1, r7, #4
   b48b0:	4628      	mov	r0, r5
   b48b2:	f7ff ffaf 	bl	b4814 <_ZN5Print5writeEPKc>
   b48b6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b48b8:	b11e      	cbz	r6, b48c2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b48ba:	4628      	mov	r0, r5
   b48bc:	f7ff ffbf 	bl	b483e <_ZN5Print7printlnEv>
   b48c0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b48c2:	4620      	mov	r0, r4
   b48c4:	3718      	adds	r7, #24
   b48c6:	46bd      	mov	sp, r7
   b48c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b48cc:	f100 0308 	add.w	r3, r0, #8
   b48d0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b48d4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b48d6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b48da:	4622      	mov	r2, r4
   b48dc:	1c41      	adds	r1, r0, #1
   b48de:	683b      	ldr	r3, [r7, #0]
   b48e0:	4668      	mov	r0, sp
   b48e2:	f7ff ff07 	bl	b46f4 <vsnprintf>
  return write(str);
   b48e6:	4669      	mov	r1, sp
   b48e8:	4628      	mov	r0, r5
   b48ea:	f7ff ff93 	bl	b4814 <_ZN5Print5writeEPKc>
   b48ee:	4604      	mov	r4, r0
   b48f0:	46c5      	mov	sp, r8
   b48f2:	e7e1      	b.n	b48b8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b48f4 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b48f4:	2300      	movs	r3, #0
   b48f6:	6840      	ldr	r0, [r0, #4]
   b48f8:	461a      	mov	r2, r3
   b48fa:	4619      	mov	r1, r3
   b48fc:	f7ff bea2 	b.w	b4644 <network_on>

000b4900 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4900:	4b01      	ldr	r3, [pc, #4]	; (b4908 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4902:	4a02      	ldr	r2, [pc, #8]	; (b490c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4904:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4906:	4770      	bx	lr
   b4908:	2003e6d4 	.word	0x2003e6d4
   b490c:	000b5418 	.word	0x000b5418

000b4910 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4910:	4b02      	ldr	r3, [pc, #8]	; (b491c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4912:	681a      	ldr	r2, [r3, #0]
   b4914:	4b02      	ldr	r3, [pc, #8]	; (b4920 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4916:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop
   b491c:	2003e634 	.word	0x2003e634
   b4920:	2003e6d8 	.word	0x2003e6d8

000b4924 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b4924:	428a      	cmp	r2, r1
{
   b4926:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b4928:	d007      	beq.n	b493a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b492a:	1a44      	subs	r4, r0, r1
   b492c:	9802      	ldr	r0, [sp, #8]
   b492e:	1ac0      	subs	r0, r0, r3
   b4930:	4344      	muls	r4, r0
   b4932:	1a50      	subs	r0, r2, r1
   b4934:	fb94 f0f0 	sdiv	r0, r4, r0
   b4938:	4418      	add	r0, r3
}
   b493a:	bd10      	pop	{r4, pc}

000b493c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b493c:	4b01      	ldr	r3, [pc, #4]	; (b4944 <_GLOBAL__sub_I_RGB+0x8>)
   b493e:	2200      	movs	r2, #0
   b4940:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4942:	4770      	bx	lr
   b4944:	2003e6dc 	.word	0x2003e6dc

000b4948 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4948:	4b01      	ldr	r3, [pc, #4]	; (b4950 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b494a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b494c:	4770      	bx	lr
   b494e:	bf00      	nop
   b4950:	2003e638 	.word	0x2003e638

000b4954 <serialEventRun>:
{
   b4954:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4956:	4b0b      	ldr	r3, [pc, #44]	; (b4984 <serialEventRun+0x30>)
   b4958:	b143      	cbz	r3, b496c <serialEventRun+0x18>
   b495a:	f000 f96d 	bl	b4c38 <_Z16_fetch_usbserialv>
   b495e:	6803      	ldr	r3, [r0, #0]
   b4960:	691b      	ldr	r3, [r3, #16]
   b4962:	4798      	blx	r3
   b4964:	2800      	cmp	r0, #0
   b4966:	dd01      	ble.n	b496c <serialEventRun+0x18>
        serialEvent();
   b4968:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b496c:	4b06      	ldr	r3, [pc, #24]	; (b4988 <serialEventRun+0x34>)
   b496e:	b143      	cbz	r3, b4982 <serialEventRun+0x2e>
   b4970:	f000 fbb0 	bl	b50d4 <_Z22__fetch_global_Serial1v>
   b4974:	6803      	ldr	r3, [r0, #0]
   b4976:	691b      	ldr	r3, [r3, #16]
   b4978:	4798      	blx	r3
   b497a:	2800      	cmp	r0, #0
   b497c:	dd01      	ble.n	b4982 <serialEventRun+0x2e>
        serialEvent1();
   b497e:	f3af 8000 	nop.w
}
   b4982:	bd08      	pop	{r3, pc}
	...

000b498c <_post_loop>:
{
   b498c:	b508      	push	{r3, lr}
	serialEventRun();
   b498e:	f7ff ffe1 	bl	b4954 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4992:	f7ff fd3b 	bl	b440c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4996:	4b01      	ldr	r3, [pc, #4]	; (b499c <_post_loop+0x10>)
   b4998:	6018      	str	r0, [r3, #0]
}
   b499a:	bd08      	pop	{r3, pc}
   b499c:	2003e740 	.word	0x2003e740

000b49a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b49a0:	4805      	ldr	r0, [pc, #20]	; (b49b8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b49a2:	4a06      	ldr	r2, [pc, #24]	; (b49bc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b49a4:	4906      	ldr	r1, [pc, #24]	; (b49c0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b49a6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b49a8:	1a12      	subs	r2, r2, r0
   b49aa:	f000 fbfb 	bl	b51a4 <memcpy>
    __backup_sram_signature = signature;
   b49ae:	4b05      	ldr	r3, [pc, #20]	; (b49c4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b49b0:	4a05      	ldr	r2, [pc, #20]	; (b49c8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b49b2:	601a      	str	r2, [r3, #0]
}
   b49b4:	bd08      	pop	{r3, pc}
   b49b6:	bf00      	nop
   b49b8:	2003f400 	.word	0x2003f400
   b49bc:	2003f404 	.word	0x2003f404
   b49c0:	000b5610 	.word	0x000b5610
   b49c4:	2003f400 	.word	0x2003f400
   b49c8:	9a271c1e 	.word	0x9a271c1e

000b49cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b49cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b49ce:	2300      	movs	r3, #0
   b49d0:	9300      	str	r3, [sp, #0]
   b49d2:	461a      	mov	r2, r3
   b49d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b49d8:	f7ff fe0a 	bl	b45f0 <system_ctrl_set_result>
}
   b49dc:	b003      	add	sp, #12
   b49de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b49e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b49e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b49e6:	8843      	ldrh	r3, [r0, #2]
   b49e8:	2b0a      	cmp	r3, #10
   b49ea:	d008      	beq.n	b49fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b49ec:	2b50      	cmp	r3, #80	; 0x50
   b49ee:	d10b      	bne.n	b4a08 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b49f0:	4b09      	ldr	r3, [pc, #36]	; (b4a18 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b49f2:	681b      	ldr	r3, [r3, #0]
   b49f4:	b14b      	cbz	r3, b4a0a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b49f6:	b003      	add	sp, #12
   b49f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b49fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b49fe:	f7ff ffe5 	bl	b49cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4a02:	b003      	add	sp, #12
   b4a04:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4a08:	2300      	movs	r3, #0
   b4a0a:	9300      	str	r3, [sp, #0]
   b4a0c:	461a      	mov	r2, r3
   b4a0e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4a12:	f7ff fded 	bl	b45f0 <system_ctrl_set_result>
}
   b4a16:	e7f4      	b.n	b4a02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4a18:	2003e6f0 	.word	0x2003e6f0

000b4a1c <module_user_init_hook>:
{
   b4a1c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4a1e:	4812      	ldr	r0, [pc, #72]	; (b4a68 <module_user_init_hook+0x4c>)
   b4a20:	2100      	movs	r1, #0
   b4a22:	f7ff fe77 	bl	b4714 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4a26:	4b11      	ldr	r3, [pc, #68]	; (b4a6c <module_user_init_hook+0x50>)
   b4a28:	681a      	ldr	r2, [r3, #0]
   b4a2a:	4b11      	ldr	r3, [pc, #68]	; (b4a70 <module_user_init_hook+0x54>)
   b4a2c:	429a      	cmp	r2, r3
   b4a2e:	4b11      	ldr	r3, [pc, #68]	; (b4a74 <module_user_init_hook+0x58>)
   b4a30:	bf0c      	ite	eq
   b4a32:	2201      	moveq	r2, #1
   b4a34:	2200      	movne	r2, #0
   b4a36:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4a38:	d001      	beq.n	b4a3e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4a3a:	f7ff ffb1 	bl	b49a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4a3e:	f7ff fcdd 	bl	b43fc <HAL_RNG_GetRandomNumber>
   b4a42:	4604      	mov	r4, r0
    srand(seed);
   b4a44:	f000 fbc4 	bl	b51d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4a48:	4b0b      	ldr	r3, [pc, #44]	; (b4a78 <module_user_init_hook+0x5c>)
   b4a4a:	b113      	cbz	r3, b4a52 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4a4c:	4620      	mov	r0, r4
   b4a4e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4a52:	2100      	movs	r1, #0
   b4a54:	4808      	ldr	r0, [pc, #32]	; (b4a78 <module_user_init_hook+0x5c>)
   b4a56:	f7ff fe35 	bl	b46c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4a5e:	4807      	ldr	r0, [pc, #28]	; (b4a7c <module_user_init_hook+0x60>)
   b4a60:	2100      	movs	r1, #0
   b4a62:	f7ff bdbb 	b.w	b45dc <system_ctrl_set_app_request_handler>
   b4a66:	bf00      	nop
   b4a68:	000b4949 	.word	0x000b4949
   b4a6c:	2003f400 	.word	0x2003f400
   b4a70:	9a271c1e 	.word	0x9a271c1e
   b4a74:	2003e6ec 	.word	0x2003e6ec
   b4a78:	00000000 	.word	0x00000000
   b4a7c:	000b49e5 	.word	0x000b49e5

000b4a80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4a80:	4770      	bx	lr

000b4a82 <_ZN9IPAddressD0Ev>:
   b4a82:	b510      	push	{r4, lr}
   b4a84:	2118      	movs	r1, #24
   b4a86:	4604      	mov	r4, r0
   b4a88:	f7ff fb05 	bl	b4096 <_ZdlPvj>
   b4a8c:	4620      	mov	r0, r4
   b4a8e:	bd10      	pop	{r4, pc}

000b4a90 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4a90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4a92:	7d03      	ldrb	r3, [r0, #20]
   b4a94:	2b06      	cmp	r3, #6
{
   b4a96:	b08d      	sub	sp, #52	; 0x34
   b4a98:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a9a:	f100 0704 	add.w	r7, r0, #4
   b4a9e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4aa2:	d012      	beq.n	b4aca <_ZNK9IPAddress7printToER5Print+0x3a>
   b4aa4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4aa8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4aac:	220a      	movs	r2, #10
   b4aae:	4630      	mov	r0, r6
   b4ab0:	f7ff fed1 	bl	b4856 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4ab4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4ab6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4ab8:	d019      	beq.n	b4aee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4aba:	2c00      	cmp	r4, #0
   b4abc:	d0f4      	beq.n	b4aa8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4abe:	212e      	movs	r1, #46	; 0x2e
   b4ac0:	4630      	mov	r0, r6
   b4ac2:	f7ff feb9 	bl	b4838 <_ZN5Print5printEc>
   b4ac6:	4404      	add	r4, r0
   b4ac8:	e7ee      	b.n	b4aa8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4aca:	232f      	movs	r3, #47	; 0x2f
   b4acc:	466a      	mov	r2, sp
   b4ace:	4639      	mov	r1, r7
   b4ad0:	200a      	movs	r0, #10
		buf[0] = 0;
   b4ad2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ad6:	f7ff fca9 	bl	b442c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4ada:	4668      	mov	r0, sp
   b4adc:	f000 fba6 	bl	b522c <strlen>
   b4ae0:	6833      	ldr	r3, [r6, #0]
   b4ae2:	4602      	mov	r2, r0
   b4ae4:	68db      	ldr	r3, [r3, #12]
   b4ae6:	4669      	mov	r1, sp
   b4ae8:	4630      	mov	r0, r6
   b4aea:	4798      	blx	r3
   b4aec:	4604      	mov	r4, r0
    }
    return n;
}
   b4aee:	4620      	mov	r0, r4
   b4af0:	b00d      	add	sp, #52	; 0x34
   b4af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4af4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4af4:	b510      	push	{r4, lr}
   b4af6:	4b05      	ldr	r3, [pc, #20]	; (b4b0c <_ZN9IPAddressC1Ev+0x18>)
   b4af8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4afa:	2211      	movs	r2, #17
   b4afc:	f840 3b04 	str.w	r3, [r0], #4
   b4b00:	2100      	movs	r1, #0
   b4b02:	f000 fb5d 	bl	b51c0 <memset>
}
   b4b06:	4620      	mov	r0, r4
   b4b08:	bd10      	pop	{r4, pc}
   b4b0a:	bf00      	nop
   b4b0c:	000b5440 	.word	0x000b5440

000b4b10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4b10:	4603      	mov	r3, r0
   b4b12:	4a07      	ldr	r2, [pc, #28]	; (b4b30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4b14:	b510      	push	{r4, lr}
   b4b16:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4b1a:	f101 0210 	add.w	r2, r1, #16
   b4b1e:	f851 4b04 	ldr.w	r4, [r1], #4
   b4b22:	f843 4b04 	str.w	r4, [r3], #4
   b4b26:	4291      	cmp	r1, r2
   b4b28:	d1f9      	bne.n	b4b1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4b2a:	780a      	ldrb	r2, [r1, #0]
   b4b2c:	701a      	strb	r2, [r3, #0]
}
   b4b2e:	bd10      	pop	{r4, pc}
   b4b30:	000b5440 	.word	0x000b5440

000b4b34 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4b34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4b36:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4b3a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4b3e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4b42:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4b46:	2304      	movs	r3, #4
   b4b48:	6041      	str	r1, [r0, #4]
   b4b4a:	7503      	strb	r3, [r0, #20]
}
   b4b4c:	bd10      	pop	{r4, pc}
	...

000b4b50 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4b50:	b507      	push	{r0, r1, r2, lr}
   b4b52:	4b06      	ldr	r3, [pc, #24]	; (b4b6c <_ZN9IPAddressC1EPKh+0x1c>)
   b4b54:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4b56:	78cb      	ldrb	r3, [r1, #3]
   b4b58:	9300      	str	r3, [sp, #0]
   b4b5a:	788b      	ldrb	r3, [r1, #2]
   b4b5c:	784a      	ldrb	r2, [r1, #1]
   b4b5e:	7809      	ldrb	r1, [r1, #0]
   b4b60:	f7ff ffe8 	bl	b4b34 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4b64:	b003      	add	sp, #12
   b4b66:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b6a:	bf00      	nop
   b4b6c:	000b5440 	.word	0x000b5440

000b4b70 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4b70:	7441      	strb	r1, [r0, #17]
}
   b4b72:	4770      	bx	lr

000b4b74 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b74:	4770      	bx	lr

000b4b76 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4b76:	4770      	bx	lr

000b4b78 <_ZN9USBSerial4readEv>:
{
   b4b78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4b7a:	2100      	movs	r1, #0
   b4b7c:	7c00      	ldrb	r0, [r0, #16]
   b4b7e:	f7ff fd05 	bl	b458c <HAL_USB_USART_Receive_Data>
}
   b4b82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b86:	bd08      	pop	{r3, pc}

000b4b88 <_ZN9USBSerial4peekEv>:
{
   b4b88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4b8a:	2101      	movs	r1, #1
   b4b8c:	7c00      	ldrb	r0, [r0, #16]
   b4b8e:	f7ff fcfd 	bl	b458c <HAL_USB_USART_Receive_Data>
}
   b4b92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b96:	bd08      	pop	{r3, pc}

000b4b98 <_ZN9USBSerial17availableForWriteEv>:
{
   b4b98:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4b9a:	7c00      	ldrb	r0, [r0, #16]
   b4b9c:	f7ff fcee 	bl	b457c <HAL_USB_USART_Available_Data_For_Write>
}
   b4ba0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ba4:	bd08      	pop	{r3, pc}

000b4ba6 <_ZN9USBSerial9availableEv>:
{
   b4ba6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4ba8:	7c00      	ldrb	r0, [r0, #16]
   b4baa:	f7ff fcdf 	bl	b456c <HAL_USB_USART_Available_Data>
}
   b4bae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bb2:	bd08      	pop	{r3, pc}

000b4bb4 <_ZN9USBSerial5writeEh>:
{
   b4bb4:	b513      	push	{r0, r1, r4, lr}
   b4bb6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4bb8:	7c00      	ldrb	r0, [r0, #16]
{
   b4bba:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4bbc:	f7ff fcde 	bl	b457c <HAL_USB_USART_Available_Data_For_Write>
   b4bc0:	2800      	cmp	r0, #0
   b4bc2:	9901      	ldr	r1, [sp, #4]
   b4bc4:	dc01      	bgt.n	b4bca <_ZN9USBSerial5writeEh+0x16>
   b4bc6:	7c60      	ldrb	r0, [r4, #17]
   b4bc8:	b120      	cbz	r0, b4bd4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4bca:	7c20      	ldrb	r0, [r4, #16]
   b4bcc:	f7ff fce6 	bl	b459c <HAL_USB_USART_Send_Data>
   b4bd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4bd4:	b002      	add	sp, #8
   b4bd6:	bd10      	pop	{r4, pc}

000b4bd8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4bd8:	7c00      	ldrb	r0, [r0, #16]
   b4bda:	f7ff bce7 	b.w	b45ac <HAL_USB_USART_Flush_Data>

000b4bde <_ZN9USBSerialD0Ev>:
   b4bde:	b510      	push	{r4, lr}
   b4be0:	2114      	movs	r1, #20
   b4be2:	4604      	mov	r4, r0
   b4be4:	f7ff fa57 	bl	b4096 <_ZdlPvj>
   b4be8:	4620      	mov	r0, r4
   b4bea:	bd10      	pop	{r4, pc}

000b4bec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4bec:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4bf2:	4604      	mov	r4, r0
   b4bf4:	4608      	mov	r0, r1
   b4bf6:	2100      	movs	r1, #0
   b4bf8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4bfc:	4b04      	ldr	r3, [pc, #16]	; (b4c10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4bfe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4c00:	2301      	movs	r3, #1
  _serial = serial;
   b4c02:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4c04:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4c06:	4611      	mov	r1, r2
   b4c08:	f7ff fca0 	bl	b454c <HAL_USB_USART_Init>
}
   b4c0c:	4620      	mov	r0, r4
   b4c0e:	bd10      	pop	{r4, pc}
   b4c10:	000b5454 	.word	0x000b5454

000b4c14 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4c14:	7c00      	ldrb	r0, [r0, #16]
   b4c16:	2200      	movs	r2, #0
   b4c18:	f7ff bca0 	b.w	b455c <HAL_USB_USART_Begin>

000b4c1c <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b4c1c:	7c00      	ldrb	r0, [r0, #16]
   b4c1e:	f7ff bccd 	b.w	b45bc <HAL_USB_USART_Is_Enabled>

000b4c22 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b4c22:	f7ff bffb 	b.w	b4c1c <_ZN9USBSerial9isEnabledEv>

000b4c26 <_Z19acquireSerialBufferv>:
{
   b4c26:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4c28:	2214      	movs	r2, #20
{
   b4c2a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4c2c:	2100      	movs	r1, #0
   b4c2e:	f000 fac7 	bl	b51c0 <memset>
}
   b4c32:	4620      	mov	r0, r4
   b4c34:	bd10      	pop	{r4, pc}
	...

000b4c38 <_Z16_fetch_usbserialv>:
{
   b4c38:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c3a:	4c0f      	ldr	r4, [pc, #60]	; (b4c78 <_Z16_fetch_usbserialv+0x40>)
{
   b4c3c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4c3e:	a803      	add	r0, sp, #12
   b4c40:	f7ff fff1 	bl	b4c26 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c44:	7821      	ldrb	r1, [r4, #0]
   b4c46:	f3bf 8f5b 	dmb	ish
   b4c4a:	f011 0101 	ands.w	r1, r1, #1
   b4c4e:	d10f      	bne.n	b4c70 <_Z16_fetch_usbserialv+0x38>
   b4c50:	4620      	mov	r0, r4
   b4c52:	9101      	str	r1, [sp, #4]
   b4c54:	f7ff fa21 	bl	b409a <__cxa_guard_acquire>
   b4c58:	9901      	ldr	r1, [sp, #4]
   b4c5a:	b148      	cbz	r0, b4c70 <_Z16_fetch_usbserialv+0x38>
   b4c5c:	aa03      	add	r2, sp, #12
   b4c5e:	4807      	ldr	r0, [pc, #28]	; (b4c7c <_Z16_fetch_usbserialv+0x44>)
   b4c60:	f7ff ffc4 	bl	b4bec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4c64:	4620      	mov	r0, r4
   b4c66:	f7ff fa1d 	bl	b40a4 <__cxa_guard_release>
   b4c6a:	4805      	ldr	r0, [pc, #20]	; (b4c80 <_Z16_fetch_usbserialv+0x48>)
   b4c6c:	f000 fa94 	bl	b5198 <atexit>
	return _usbserial;
}
   b4c70:	4802      	ldr	r0, [pc, #8]	; (b4c7c <_Z16_fetch_usbserialv+0x44>)
   b4c72:	b008      	add	sp, #32
   b4c74:	bd10      	pop	{r4, pc}
   b4c76:	bf00      	nop
   b4c78:	2003e6f4 	.word	0x2003e6f4
   b4c7c:	2003e6f8 	.word	0x2003e6f8
   b4c80:	000b4b75 	.word	0x000b4b75

000b4c84 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4c84:	4770      	bx	lr

000b4c86 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4c86:	7441      	strb	r1, [r0, #17]
}
   b4c88:	4770      	bx	lr

000b4c8a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4c8a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4c8c:	7c00      	ldrb	r0, [r0, #16]
   b4c8e:	f7ff fc05 	bl	b449c <hal_usart_available_data_for_write>
}
   b4c92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c96:	bd08      	pop	{r3, pc}

000b4c98 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4c98:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4c9a:	7c00      	ldrb	r0, [r0, #16]
   b4c9c:	f7ff fbd6 	bl	b444c <hal_usart_available>
}
   b4ca0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ca4:	bd08      	pop	{r3, pc}

000b4ca6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4ca6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4ca8:	7c00      	ldrb	r0, [r0, #16]
   b4caa:	f7ff fbdf 	bl	b446c <hal_usart_peek>
}
   b4cae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4cb2:	bd08      	pop	{r3, pc}

000b4cb4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4cb4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4cb6:	7c00      	ldrb	r0, [r0, #16]
   b4cb8:	f7ff fbd0 	bl	b445c <hal_usart_read>
}
   b4cbc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4cc0:	bd08      	pop	{r3, pc}

000b4cc2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4cc2:	7c00      	ldrb	r0, [r0, #16]
   b4cc4:	f7ff bbda 	b.w	b447c <hal_usart_flush>

000b4cc8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4cca:	7c45      	ldrb	r5, [r0, #17]
{
   b4ccc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4cce:	b12d      	cbz	r5, b4cdc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4cd0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4cd2:	b003      	add	sp, #12
   b4cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4cd8:	f7ff bbb0 	b.w	b443c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4cdc:	7c00      	ldrb	r0, [r0, #16]
   b4cde:	9101      	str	r1, [sp, #4]
   b4ce0:	f7ff fbdc 	bl	b449c <hal_usart_available_data_for_write>
   b4ce4:	2800      	cmp	r0, #0
   b4ce6:	9901      	ldr	r1, [sp, #4]
   b4ce8:	dcf2      	bgt.n	b4cd0 <_ZN11USARTSerial5writeEh+0x8>
}
   b4cea:	4628      	mov	r0, r5
   b4cec:	b003      	add	sp, #12
   b4cee:	bd30      	pop	{r4, r5, pc}

000b4cf0 <_ZN11USARTSerialD0Ev>:
   b4cf0:	b510      	push	{r4, lr}
   b4cf2:	2114      	movs	r1, #20
   b4cf4:	4604      	mov	r4, r0
   b4cf6:	f7ff f9ce 	bl	b4096 <_ZdlPvj>
   b4cfa:	4620      	mov	r0, r4
   b4cfc:	bd10      	pop	{r4, pc}
	...

000b4d00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4d00:	b510      	push	{r4, lr}
   b4d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d06:	4604      	mov	r4, r0
   b4d08:	4608      	mov	r0, r1
   b4d0a:	4611      	mov	r1, r2
   b4d0c:	2200      	movs	r2, #0
   b4d0e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4d12:	4b04      	ldr	r3, [pc, #16]	; (b4d24 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4d14:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4d16:	2301      	movs	r3, #1
  _serial = serial;
   b4d18:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4d1a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4d1c:	f7ff fbc6 	bl	b44ac <hal_usart_init_ex>
}
   b4d20:	4620      	mov	r0, r4
   b4d22:	bd10      	pop	{r4, pc}
   b4d24:	000b5484 	.word	0x000b5484

000b4d28 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4d28:	4770      	bx	lr

000b4d2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d2c:	4606      	mov	r6, r0
   b4d2e:	4615      	mov	r5, r2
   b4d30:	460c      	mov	r4, r1
   b4d32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4d34:	42bc      	cmp	r4, r7
   b4d36:	d006      	beq.n	b4d46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4d38:	6833      	ldr	r3, [r6, #0]
   b4d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4d3e:	689b      	ldr	r3, [r3, #8]
   b4d40:	4630      	mov	r0, r6
   b4d42:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4d44:	e7f6      	b.n	b4d34 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4d46:	4628      	mov	r0, r5
   b4d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d4a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4d4a:	7c00      	ldrb	r0, [r0, #16]
   b4d4c:	2200      	movs	r2, #0
   b4d4e:	f7ff bbb5 	b.w	b44bc <hal_i2c_write>

000b4d52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4d52:	7c00      	ldrb	r0, [r0, #16]
   b4d54:	2100      	movs	r1, #0
   b4d56:	f7ff bbb9 	b.w	b44cc <hal_i2c_available>

000b4d5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4d5a:	7c00      	ldrb	r0, [r0, #16]
   b4d5c:	2100      	movs	r1, #0
   b4d5e:	f7ff bbbd 	b.w	b44dc <hal_i2c_read>

000b4d62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4d62:	7c00      	ldrb	r0, [r0, #16]
   b4d64:	2100      	movs	r1, #0
   b4d66:	f7ff bbc1 	b.w	b44ec <hal_i2c_peek>

000b4d6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4d6a:	7c00      	ldrb	r0, [r0, #16]
   b4d6c:	2100      	movs	r1, #0
   b4d6e:	f7ff bbc5 	b.w	b44fc <hal_i2c_flush>

000b4d72 <_ZN7TwoWireD0Ev>:
   b4d72:	b510      	push	{r4, lr}
   b4d74:	2114      	movs	r1, #20
   b4d76:	4604      	mov	r4, r0
   b4d78:	f7ff f98d 	bl	b4096 <_ZdlPvj>
   b4d7c:	4620      	mov	r0, r4
   b4d7e:	bd10      	pop	{r4, pc}

000b4d80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4d80:	b510      	push	{r4, lr}
   b4d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d86:	4604      	mov	r4, r0
   b4d88:	4608      	mov	r0, r1
   b4d8a:	2100      	movs	r1, #0
   b4d8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4d90:	4b03      	ldr	r3, [pc, #12]	; (b4da0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4d92:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4d94:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4d96:	4611      	mov	r1, r2
   b4d98:	f7ff fbc0 	bl	b451c <hal_i2c_init>
}
   b4d9c:	4620      	mov	r0, r4
   b4d9e:	bd10      	pop	{r4, pc}
   b4da0:	000b54b4 	.word	0x000b54b4

000b4da4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4da4:	2200      	movs	r2, #0
   b4da6:	6840      	ldr	r0, [r0, #4]
   b4da8:	4611      	mov	r1, r2
   b4daa:	f7ff bc43 	b.w	b4634 <network_ready>

000b4dae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4dae:	2200      	movs	r2, #0
   b4db0:	6840      	ldr	r0, [r0, #4]
   b4db2:	4611      	mov	r1, r2
   b4db4:	f7ff bc5e 	b.w	b4674 <network_listening>

000b4db8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4db8:	2200      	movs	r2, #0
   b4dba:	6840      	ldr	r0, [r0, #4]
   b4dbc:	4611      	mov	r1, r2
   b4dbe:	f7ff bc69 	b.w	b4694 <network_get_listen_timeout>

000b4dc2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4dc2:	6840      	ldr	r0, [r0, #4]
   b4dc4:	2200      	movs	r2, #0
   b4dc6:	f7ff bc5d 	b.w	b4684 <network_set_listen_timeout>

000b4dca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4dca:	6840      	ldr	r0, [r0, #4]
   b4dcc:	2200      	movs	r2, #0
   b4dce:	f081 0101 	eor.w	r1, r1, #1
   b4dd2:	f7ff bc47 	b.w	b4664 <network_listen>

000b4dd6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4dd6:	2300      	movs	r3, #0
   b4dd8:	6840      	ldr	r0, [r0, #4]
   b4dda:	461a      	mov	r2, r3
   b4ddc:	4619      	mov	r1, r3
   b4dde:	f7ff bc39 	b.w	b4654 <network_off>

000b4de2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4de2:	2200      	movs	r2, #0
   b4de4:	6840      	ldr	r0, [r0, #4]
   b4de6:	4611      	mov	r1, r2
   b4de8:	f7ff bc14 	b.w	b4614 <network_connecting>

000b4dec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4dec:	6840      	ldr	r0, [r0, #4]
   b4dee:	2200      	movs	r2, #0
   b4df0:	2102      	movs	r1, #2
   b4df2:	f7ff bc17 	b.w	b4624 <network_disconnect>

000b4df6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4df6:	2300      	movs	r3, #0
   b4df8:	6840      	ldr	r0, [r0, #4]
   b4dfa:	461a      	mov	r2, r3
   b4dfc:	f7ff bc02 	b.w	b4604 <network_connect>

000b4e00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4e00:	4b02      	ldr	r3, [pc, #8]	; (b4e0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4e02:	2204      	movs	r2, #4
   b4e04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4e06:	4a02      	ldr	r2, [pc, #8]	; (b4e10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4e08:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4e0a:	4770      	bx	lr
   b4e0c:	2003e70c 	.word	0x2003e70c
   b4e10:	000b54dc 	.word	0x000b54dc

000b4e14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4e14:	2300      	movs	r3, #0
   b4e16:	6840      	ldr	r0, [r0, #4]
   b4e18:	461a      	mov	r2, r3
   b4e1a:	f7ff bbf3 	b.w	b4604 <network_connect>

000b4e1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4e1e:	6840      	ldr	r0, [r0, #4]
   b4e20:	2200      	movs	r2, #0
   b4e22:	2102      	movs	r1, #2
   b4e24:	f7ff bbfe 	b.w	b4624 <network_disconnect>

000b4e28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4e28:	2200      	movs	r2, #0
   b4e2a:	6840      	ldr	r0, [r0, #4]
   b4e2c:	4611      	mov	r1, r2
   b4e2e:	f7ff bbf1 	b.w	b4614 <network_connecting>

000b4e32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4e32:	2200      	movs	r2, #0
   b4e34:	6840      	ldr	r0, [r0, #4]
   b4e36:	4611      	mov	r1, r2
   b4e38:	f7ff bbfc 	b.w	b4634 <network_ready>

000b4e3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4e3c:	2300      	movs	r3, #0
   b4e3e:	6840      	ldr	r0, [r0, #4]
   b4e40:	461a      	mov	r2, r3
   b4e42:	4619      	mov	r1, r3
   b4e44:	f7ff bbfe 	b.w	b4644 <network_on>

000b4e48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4e48:	2300      	movs	r3, #0
   b4e4a:	6840      	ldr	r0, [r0, #4]
   b4e4c:	461a      	mov	r2, r3
   b4e4e:	4619      	mov	r1, r3
   b4e50:	f7ff bc00 	b.w	b4654 <network_off>

000b4e54 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4e54:	6840      	ldr	r0, [r0, #4]
   b4e56:	2100      	movs	r1, #0
   b4e58:	f7ff bc24 	b.w	b46a4 <network_is_on>

000b4e5c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4e5c:	6840      	ldr	r0, [r0, #4]
   b4e5e:	2100      	movs	r1, #0
   b4e60:	f7ff bc28 	b.w	b46b4 <network_is_off>

000b4e64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4e64:	6840      	ldr	r0, [r0, #4]
   b4e66:	2200      	movs	r2, #0
   b4e68:	f081 0101 	eor.w	r1, r1, #1
   b4e6c:	f7ff bbfa 	b.w	b4664 <network_listen>

000b4e70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4e70:	6840      	ldr	r0, [r0, #4]
   b4e72:	2200      	movs	r2, #0
   b4e74:	f7ff bc06 	b.w	b4684 <network_set_listen_timeout>

000b4e78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4e78:	2200      	movs	r2, #0
   b4e7a:	6840      	ldr	r0, [r0, #4]
   b4e7c:	4611      	mov	r1, r2
   b4e7e:	f7ff bc09 	b.w	b4694 <network_get_listen_timeout>

000b4e82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4e82:	2200      	movs	r2, #0
   b4e84:	6840      	ldr	r0, [r0, #4]
   b4e86:	4611      	mov	r1, r2
   b4e88:	f7ff bbf4 	b.w	b4674 <network_listening>

000b4e8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4e90:	b095      	sub	sp, #84	; 0x54
   b4e92:	4614      	mov	r4, r2
   b4e94:	460d      	mov	r5, r1
   b4e96:	4607      	mov	r7, r0
    IPAddress addr;
   b4e98:	f7ff fe2c 	bl	b4af4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4e9c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4e9e:	221c      	movs	r2, #28
   b4ea0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4ea2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4ea4:	f000 f98c 	bl	b51c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4ea8:	2340      	movs	r3, #64	; 0x40
   b4eaa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4eac:	4620      	mov	r0, r4
   b4eae:	466b      	mov	r3, sp
   b4eb0:	aa0c      	add	r2, sp, #48	; 0x30
   b4eb2:	2100      	movs	r1, #0
   b4eb4:	f7ff fa6a 	bl	b438c <netdb_getaddrinfo>
    if (!r) {
   b4eb8:	4604      	mov	r4, r0
   b4eba:	2800      	cmp	r0, #0
   b4ebc:	d14b      	bne.n	b4f56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4ebe:	4602      	mov	r2, r0
   b4ec0:	2101      	movs	r1, #1
   b4ec2:	6868      	ldr	r0, [r5, #4]
   b4ec4:	f7ff fbb6 	bl	b4634 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4ec8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4eca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4ecc:	4622      	mov	r2, r4
   b4ece:	6868      	ldr	r0, [r5, #4]
   b4ed0:	f7ff fbb0 	bl	b4634 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ed4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4ed6:	4681      	mov	r9, r0
        bool ok = false;
   b4ed8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4eda:	2e00      	cmp	r6, #0
   b4edc:	d03b      	beq.n	b4f56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4ede:	2900      	cmp	r1, #0
   b4ee0:	d139      	bne.n	b4f56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4ee2:	6873      	ldr	r3, [r6, #4]
   b4ee4:	2b02      	cmp	r3, #2
   b4ee6:	d003      	beq.n	b4ef0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4ee8:	2b0a      	cmp	r3, #10
   b4eea:	d011      	beq.n	b4f10 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4eec:	69f6      	ldr	r6, [r6, #28]
   b4eee:	e7f4      	b.n	b4eda <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4ef0:	f1b8 0f00 	cmp.w	r8, #0
   b4ef4:	d0fa      	beq.n	b4eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4ef6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4ef8:	a806      	add	r0, sp, #24
   b4efa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4efc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4efe:	f7ff fe27 	bl	b4b50 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f04:	1d3c      	adds	r4, r7, #4
   b4f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f08:	682b      	ldr	r3, [r5, #0]
   b4f0a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4f0c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4f0e:	e7ed      	b.n	b4eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4f10:	f1b9 0f00 	cmp.w	r9, #0
   b4f14:	d0ea      	beq.n	b4eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4f16:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4f18:	2210      	movs	r2, #16
   b4f1a:	a801      	add	r0, sp, #4
   b4f1c:	f000 f950 	bl	b51c0 <memset>
                    a.v = 6;
   b4f20:	2306      	movs	r3, #6
   b4f22:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4f26:	ad01      	add	r5, sp, #4
   b4f28:	f104 0308 	add.w	r3, r4, #8
   b4f2c:	3418      	adds	r4, #24
   b4f2e:	6818      	ldr	r0, [r3, #0]
   b4f30:	6859      	ldr	r1, [r3, #4]
   b4f32:	462a      	mov	r2, r5
   b4f34:	c203      	stmia	r2!, {r0, r1}
   b4f36:	3308      	adds	r3, #8
   b4f38:	42a3      	cmp	r3, r4
   b4f3a:	4615      	mov	r5, r2
   b4f3c:	d1f7      	bne.n	b4f2e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4f3e:	a901      	add	r1, sp, #4
   b4f40:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4f42:	ad07      	add	r5, sp, #28
   b4f44:	f7ff fde4 	bl	b4b10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f4a:	1d3c      	adds	r4, r7, #4
   b4f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f4e:	682b      	ldr	r3, [r5, #0]
   b4f50:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4f52:	4649      	mov	r1, r9
   b4f54:	e7ca      	b.n	b4eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4f56:	9800      	ldr	r0, [sp, #0]
   b4f58:	f7ff fa10 	bl	b437c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4f5c:	4638      	mov	r0, r7
   b4f5e:	b015      	add	sp, #84	; 0x54
   b4f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4f64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4f64:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4f66:	4a03      	ldr	r2, [pc, #12]	; (b4f74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4f68:	601a      	str	r2, [r3, #0]
   b4f6a:	2200      	movs	r2, #0
   b4f6c:	605a      	str	r2, [r3, #4]

} // spark
   b4f6e:	4770      	bx	lr
   b4f70:	2003e714 	.word	0x2003e714
   b4f74:	000b5518 	.word	0x000b5518

000b4f78 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4f78:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4f7a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4f7c:	d902      	bls.n	b4f84 <pinAvailable+0xc>
    return false;
   b4f7e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4f80:	b002      	add	sp, #8
   b4f82:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4f84:	f1a0 030b 	sub.w	r3, r0, #11
   b4f88:	2b02      	cmp	r3, #2
   b4f8a:	d81a      	bhi.n	b4fc2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4f8c:	4c17      	ldr	r4, [pc, #92]	; (b4fec <pinAvailable+0x74>)
   b4f8e:	7821      	ldrb	r1, [r4, #0]
   b4f90:	f3bf 8f5b 	dmb	ish
   b4f94:	f011 0101 	ands.w	r1, r1, #1
   b4f98:	d10b      	bne.n	b4fb2 <pinAvailable+0x3a>
   b4f9a:	4620      	mov	r0, r4
   b4f9c:	9101      	str	r1, [sp, #4]
   b4f9e:	f7ff f87c 	bl	b409a <__cxa_guard_acquire>
   b4fa2:	9901      	ldr	r1, [sp, #4]
   b4fa4:	b128      	cbz	r0, b4fb2 <pinAvailable+0x3a>
   b4fa6:	4812      	ldr	r0, [pc, #72]	; (b4ff0 <pinAvailable+0x78>)
   b4fa8:	f7ff fbfa 	bl	b47a0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4fac:	4620      	mov	r0, r4
   b4fae:	f7ff f879 	bl	b40a4 <__cxa_guard_release>
   b4fb2:	4b0f      	ldr	r3, [pc, #60]	; (b4ff0 <pinAvailable+0x78>)
   b4fb4:	7818      	ldrb	r0, [r3, #0]
   b4fb6:	f7ff fac1 	bl	b453c <hal_spi_is_enabled>
   b4fba:	2800      	cmp	r0, #0
   b4fbc:	d1df      	bne.n	b4f7e <pinAvailable+0x6>
  return true; // 'pin' is available
   b4fbe:	2001      	movs	r0, #1
   b4fc0:	e7de      	b.n	b4f80 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4fc2:	2801      	cmp	r0, #1
   b4fc4:	d809      	bhi.n	b4fda <pinAvailable+0x62>
   b4fc6:	f000 f8c1 	bl	b514c <_Z19__fetch_global_Wirev>
   b4fca:	2100      	movs	r1, #0
   b4fcc:	7c00      	ldrb	r0, [r0, #16]
   b4fce:	f7ff fa9d 	bl	b450c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b4fd2:	f080 0001 	eor.w	r0, r0, #1
   b4fd6:	b2c0      	uxtb	r0, r0
   b4fd8:	e7d2      	b.n	b4f80 <pinAvailable+0x8>
   b4fda:	3809      	subs	r0, #9
   b4fdc:	2801      	cmp	r0, #1
   b4fde:	d8ee      	bhi.n	b4fbe <pinAvailable+0x46>
   b4fe0:	f000 f878 	bl	b50d4 <_Z22__fetch_global_Serial1v>
   b4fe4:	7c00      	ldrb	r0, [r0, #16]
   b4fe6:	f7ff fa51 	bl	b448c <hal_usart_is_enabled>
   b4fea:	e7f2      	b.n	b4fd2 <pinAvailable+0x5a>
   b4fec:	2003e71c 	.word	0x2003e71c
   b4ff0:	2003e720 	.word	0x2003e720

000b4ff4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4ff4:	2823      	cmp	r0, #35	; 0x23
{
   b4ff6:	b538      	push	{r3, r4, r5, lr}
   b4ff8:	4604      	mov	r4, r0
   b4ffa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4ffc:	d80a      	bhi.n	b5014 <pinMode+0x20>
   b4ffe:	29ff      	cmp	r1, #255	; 0xff
   b5000:	d008      	beq.n	b5014 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5002:	f7ff ffb9 	bl	b4f78 <pinAvailable>
   b5006:	b128      	cbz	r0, b5014 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5008:	4629      	mov	r1, r5
   b500a:	4620      	mov	r0, r4
}
   b500c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5010:	f7ff b9cc 	b.w	b43ac <HAL_Pin_Mode>
}
   b5014:	bd38      	pop	{r3, r4, r5, pc}

000b5016 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5016:	b538      	push	{r3, r4, r5, lr}
   b5018:	4604      	mov	r4, r0
   b501a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b501c:	f7ff f9ce 	bl	b43bc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5020:	28ff      	cmp	r0, #255	; 0xff
   b5022:	d010      	beq.n	b5046 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5024:	2806      	cmp	r0, #6
   b5026:	d804      	bhi.n	b5032 <digitalWrite+0x1c>
   b5028:	234d      	movs	r3, #77	; 0x4d
   b502a:	fa23 f000 	lsr.w	r0, r3, r0
   b502e:	07c3      	lsls	r3, r0, #31
   b5030:	d409      	bmi.n	b5046 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5032:	4620      	mov	r0, r4
   b5034:	f7ff ffa0 	bl	b4f78 <pinAvailable>
   b5038:	b128      	cbz	r0, b5046 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b503a:	4629      	mov	r1, r5
   b503c:	4620      	mov	r0, r4
}
   b503e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5042:	f7ff b9c3 	b.w	b43cc <HAL_GPIO_Write>
}
   b5046:	bd38      	pop	{r3, r4, r5, pc}

000b5048 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b5048:	b510      	push	{r4, lr}
   b504a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b504c:	f7ff f9b6 	bl	b43bc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5050:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5052:	b2db      	uxtb	r3, r3
   b5054:	2b01      	cmp	r3, #1
   b5056:	d908      	bls.n	b506a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5058:	4620      	mov	r0, r4
   b505a:	f7ff ff8d 	bl	b4f78 <pinAvailable>
   b505e:	b120      	cbz	r0, b506a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b5060:	4620      	mov	r0, r4
}
   b5062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b5066:	f7ff b9b9 	b.w	b43dc <HAL_GPIO_Read>
}
   b506a:	2000      	movs	r0, #0
   b506c:	bd10      	pop	{r4, pc}

000b506e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b506e:	280d      	cmp	r0, #13
{
   b5070:	b510      	push	{r4, lr}
   b5072:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5074:	bf9c      	itt	ls
   b5076:	340e      	addls	r4, #14
   b5078:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b507a:	4620      	mov	r0, r4
   b507c:	f7ff ff7c 	bl	b4f78 <pinAvailable>
   b5080:	b150      	cbz	r0, b5098 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5082:	2103      	movs	r1, #3
   b5084:	4620      	mov	r0, r4
   b5086:	f7ff f989 	bl	b439c <HAL_Validate_Pin_Function>
   b508a:	2803      	cmp	r0, #3
   b508c:	d104      	bne.n	b5098 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b508e:	4620      	mov	r0, r4
}
   b5090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5094:	f7ff b9aa 	b.w	b43ec <hal_adc_read>
}
   b5098:	2000      	movs	r0, #0
   b509a:	bd10      	pop	{r4, pc}

000b509c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b509c:	4770      	bx	lr
	...

000b50a0 <_Z20acquireSerial1Bufferv>:
{
   b50a0:	b538      	push	{r3, r4, r5, lr}
   b50a2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b50a4:	2514      	movs	r5, #20
   b50a6:	462a      	mov	r2, r5
   b50a8:	2100      	movs	r1, #0
   b50aa:	f000 f889 	bl	b51c0 <memset>
   b50ae:	8025      	strh	r5, [r4, #0]
   b50b0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50b2:	4907      	ldr	r1, [pc, #28]	; (b50d0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b50b4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50b6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b50b8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50ba:	f000 f86b 	bl	b5194 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50be:	4904      	ldr	r1, [pc, #16]	; (b50d0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b50c0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50c2:	4628      	mov	r0, r5
   b50c4:	f000 f866 	bl	b5194 <_ZnajRKSt9nothrow_t>
    };
   b50c8:	60e0      	str	r0, [r4, #12]
}
   b50ca:	4620      	mov	r0, r4
   b50cc:	bd38      	pop	{r3, r4, r5, pc}
   b50ce:	bf00      	nop
   b50d0:	000b554c 	.word	0x000b554c

000b50d4 <_Z22__fetch_global_Serial1v>:
{
   b50d4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b50d6:	4d0e      	ldr	r5, [pc, #56]	; (b5110 <_Z22__fetch_global_Serial1v+0x3c>)
   b50d8:	7829      	ldrb	r1, [r5, #0]
   b50da:	f3bf 8f5b 	dmb	ish
   b50de:	f011 0401 	ands.w	r4, r1, #1
{
   b50e2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b50e4:	d111      	bne.n	b510a <_Z22__fetch_global_Serial1v+0x36>
   b50e6:	4628      	mov	r0, r5
   b50e8:	f7fe ffd7 	bl	b409a <__cxa_guard_acquire>
   b50ec:	b168      	cbz	r0, b510a <_Z22__fetch_global_Serial1v+0x36>
   b50ee:	a801      	add	r0, sp, #4
   b50f0:	f7ff ffd6 	bl	b50a0 <_Z20acquireSerial1Bufferv>
   b50f4:	aa01      	add	r2, sp, #4
   b50f6:	4621      	mov	r1, r4
   b50f8:	4806      	ldr	r0, [pc, #24]	; (b5114 <_Z22__fetch_global_Serial1v+0x40>)
   b50fa:	f7ff fe01 	bl	b4d00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b50fe:	4628      	mov	r0, r5
   b5100:	f7fe ffd0 	bl	b40a4 <__cxa_guard_release>
   b5104:	4804      	ldr	r0, [pc, #16]	; (b5118 <_Z22__fetch_global_Serial1v+0x44>)
   b5106:	f000 f847 	bl	b5198 <atexit>
    return serial1;
}
   b510a:	4802      	ldr	r0, [pc, #8]	; (b5114 <_Z22__fetch_global_Serial1v+0x40>)
   b510c:	b007      	add	sp, #28
   b510e:	bd30      	pop	{r4, r5, pc}
   b5110:	2003e728 	.word	0x2003e728
   b5114:	2003e72c 	.word	0x2003e72c
   b5118:	000b509d 	.word	0x000b509d

000b511c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b511c:	4770      	bx	lr
	...

000b5120 <_Z17acquireWireBufferv>:
{
   b5120:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5122:	2520      	movs	r5, #32
   b5124:	2314      	movs	r3, #20
{
   b5126:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5128:	6003      	str	r3, [r0, #0]
   b512a:	6085      	str	r5, [r0, #8]
   b512c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b512e:	4906      	ldr	r1, [pc, #24]	; (b5148 <_Z17acquireWireBufferv+0x28>)
   b5130:	4628      	mov	r0, r5
   b5132:	f000 f82f 	bl	b5194 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5136:	4904      	ldr	r1, [pc, #16]	; (b5148 <_Z17acquireWireBufferv+0x28>)
	};
   b5138:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b513a:	4628      	mov	r0, r5
   b513c:	f000 f82a 	bl	b5194 <_ZnajRKSt9nothrow_t>
	};
   b5140:	60e0      	str	r0, [r4, #12]
}
   b5142:	4620      	mov	r0, r4
   b5144:	bd38      	pop	{r3, r4, r5, pc}
   b5146:	bf00      	nop
   b5148:	000b554c 	.word	0x000b554c

000b514c <_Z19__fetch_global_Wirev>:
{
   b514c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b514e:	4d0e      	ldr	r5, [pc, #56]	; (b5188 <_Z19__fetch_global_Wirev+0x3c>)
   b5150:	7829      	ldrb	r1, [r5, #0]
   b5152:	f3bf 8f5b 	dmb	ish
   b5156:	f011 0401 	ands.w	r4, r1, #1
{
   b515a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b515c:	d111      	bne.n	b5182 <_Z19__fetch_global_Wirev+0x36>
   b515e:	4628      	mov	r0, r5
   b5160:	f7fe ff9b 	bl	b409a <__cxa_guard_acquire>
   b5164:	b168      	cbz	r0, b5182 <_Z19__fetch_global_Wirev+0x36>
   b5166:	a801      	add	r0, sp, #4
   b5168:	f7ff ffda 	bl	b5120 <_Z17acquireWireBufferv>
   b516c:	aa01      	add	r2, sp, #4
   b516e:	4621      	mov	r1, r4
   b5170:	4806      	ldr	r0, [pc, #24]	; (b518c <_Z19__fetch_global_Wirev+0x40>)
   b5172:	f7ff fe05 	bl	b4d80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5176:	4628      	mov	r0, r5
   b5178:	f7fe ff94 	bl	b40a4 <__cxa_guard_release>
   b517c:	4804      	ldr	r0, [pc, #16]	; (b5190 <_Z19__fetch_global_Wirev+0x44>)
   b517e:	f000 f80b 	bl	b5198 <atexit>
	return wire;
}
   b5182:	4802      	ldr	r0, [pc, #8]	; (b518c <_Z19__fetch_global_Wirev+0x40>)
   b5184:	b007      	add	sp, #28
   b5186:	bd30      	pop	{r4, r5, pc}
   b5188:	2003e744 	.word	0x2003e744
   b518c:	2003e748 	.word	0x2003e748
   b5190:	000b511d 	.word	0x000b511d

000b5194 <_ZnajRKSt9nothrow_t>:
   b5194:	f7fe bf7d 	b.w	b4092 <_Znaj>

000b5198 <atexit>:
   b5198:	2300      	movs	r3, #0
   b519a:	4601      	mov	r1, r0
   b519c:	461a      	mov	r2, r3
   b519e:	4618      	mov	r0, r3
   b51a0:	f000 b84c 	b.w	b523c <__register_exitproc>

000b51a4 <memcpy>:
   b51a4:	440a      	add	r2, r1
   b51a6:	4291      	cmp	r1, r2
   b51a8:	f100 33ff 	add.w	r3, r0, #4294967295
   b51ac:	d100      	bne.n	b51b0 <memcpy+0xc>
   b51ae:	4770      	bx	lr
   b51b0:	b510      	push	{r4, lr}
   b51b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b51b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b51ba:	4291      	cmp	r1, r2
   b51bc:	d1f9      	bne.n	b51b2 <memcpy+0xe>
   b51be:	bd10      	pop	{r4, pc}

000b51c0 <memset>:
   b51c0:	4402      	add	r2, r0
   b51c2:	4603      	mov	r3, r0
   b51c4:	4293      	cmp	r3, r2
   b51c6:	d100      	bne.n	b51ca <memset+0xa>
   b51c8:	4770      	bx	lr
   b51ca:	f803 1b01 	strb.w	r1, [r3], #1
   b51ce:	e7f9      	b.n	b51c4 <memset+0x4>

000b51d0 <srand>:
   b51d0:	b538      	push	{r3, r4, r5, lr}
   b51d2:	4b10      	ldr	r3, [pc, #64]	; (b5214 <srand+0x44>)
   b51d4:	681d      	ldr	r5, [r3, #0]
   b51d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b51d8:	4604      	mov	r4, r0
   b51da:	b9b3      	cbnz	r3, b520a <srand+0x3a>
   b51dc:	2018      	movs	r0, #24
   b51de:	f7ff fa79 	bl	b46d4 <malloc>
   b51e2:	4602      	mov	r2, r0
   b51e4:	63a8      	str	r0, [r5, #56]	; 0x38
   b51e6:	b920      	cbnz	r0, b51f2 <srand+0x22>
   b51e8:	4b0b      	ldr	r3, [pc, #44]	; (b5218 <srand+0x48>)
   b51ea:	480c      	ldr	r0, [pc, #48]	; (b521c <srand+0x4c>)
   b51ec:	2142      	movs	r1, #66	; 0x42
   b51ee:	f7ff fa89 	bl	b4704 <__assert_func>
   b51f2:	490b      	ldr	r1, [pc, #44]	; (b5220 <srand+0x50>)
   b51f4:	4b0b      	ldr	r3, [pc, #44]	; (b5224 <srand+0x54>)
   b51f6:	e9c0 1300 	strd	r1, r3, [r0]
   b51fa:	4b0b      	ldr	r3, [pc, #44]	; (b5228 <srand+0x58>)
   b51fc:	6083      	str	r3, [r0, #8]
   b51fe:	230b      	movs	r3, #11
   b5200:	8183      	strh	r3, [r0, #12]
   b5202:	2100      	movs	r1, #0
   b5204:	2001      	movs	r0, #1
   b5206:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b520a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b520c:	2200      	movs	r2, #0
   b520e:	611c      	str	r4, [r3, #16]
   b5210:	615a      	str	r2, [r3, #20]
   b5212:	bd38      	pop	{r3, r4, r5, pc}
   b5214:	2003e638 	.word	0x2003e638
   b5218:	000b554d 	.word	0x000b554d
   b521c:	000b5564 	.word	0x000b5564
   b5220:	abcd330e 	.word	0xabcd330e
   b5224:	e66d1234 	.word	0xe66d1234
   b5228:	0005deec 	.word	0x0005deec

000b522c <strlen>:
   b522c:	4603      	mov	r3, r0
   b522e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5232:	2a00      	cmp	r2, #0
   b5234:	d1fb      	bne.n	b522e <strlen+0x2>
   b5236:	1a18      	subs	r0, r3, r0
   b5238:	3801      	subs	r0, #1
   b523a:	4770      	bx	lr

000b523c <__register_exitproc>:
   b523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5240:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b52fc <__register_exitproc+0xc0>
   b5244:	4606      	mov	r6, r0
   b5246:	f8d8 0000 	ldr.w	r0, [r8]
   b524a:	461f      	mov	r7, r3
   b524c:	460d      	mov	r5, r1
   b524e:	4691      	mov	r9, r2
   b5250:	f000 f856 	bl	b5300 <__retarget_lock_acquire_recursive>
   b5254:	4b25      	ldr	r3, [pc, #148]	; (b52ec <__register_exitproc+0xb0>)
   b5256:	681c      	ldr	r4, [r3, #0]
   b5258:	b934      	cbnz	r4, b5268 <__register_exitproc+0x2c>
   b525a:	4c25      	ldr	r4, [pc, #148]	; (b52f0 <__register_exitproc+0xb4>)
   b525c:	601c      	str	r4, [r3, #0]
   b525e:	4b25      	ldr	r3, [pc, #148]	; (b52f4 <__register_exitproc+0xb8>)
   b5260:	b113      	cbz	r3, b5268 <__register_exitproc+0x2c>
   b5262:	681b      	ldr	r3, [r3, #0]
   b5264:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5268:	6863      	ldr	r3, [r4, #4]
   b526a:	2b1f      	cmp	r3, #31
   b526c:	dd07      	ble.n	b527e <__register_exitproc+0x42>
   b526e:	f8d8 0000 	ldr.w	r0, [r8]
   b5272:	f000 f847 	bl	b5304 <__retarget_lock_release_recursive>
   b5276:	f04f 30ff 	mov.w	r0, #4294967295
   b527a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b527e:	b34e      	cbz	r6, b52d4 <__register_exitproc+0x98>
   b5280:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5284:	b988      	cbnz	r0, b52aa <__register_exitproc+0x6e>
   b5286:	4b1c      	ldr	r3, [pc, #112]	; (b52f8 <__register_exitproc+0xbc>)
   b5288:	b923      	cbnz	r3, b5294 <__register_exitproc+0x58>
   b528a:	f8d8 0000 	ldr.w	r0, [r8]
   b528e:	f000 f838 	bl	b5302 <__retarget_lock_release>
   b5292:	e7f0      	b.n	b5276 <__register_exitproc+0x3a>
   b5294:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5298:	f7ff fa1c 	bl	b46d4 <malloc>
   b529c:	2800      	cmp	r0, #0
   b529e:	d0f4      	beq.n	b528a <__register_exitproc+0x4e>
   b52a0:	2300      	movs	r3, #0
   b52a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b52a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b52aa:	6863      	ldr	r3, [r4, #4]
   b52ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b52b0:	2201      	movs	r2, #1
   b52b2:	409a      	lsls	r2, r3
   b52b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b52b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b52bc:	4313      	orrs	r3, r2
   b52be:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b52c2:	2e02      	cmp	r6, #2
   b52c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b52c8:	bf02      	ittt	eq
   b52ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b52ce:	4313      	orreq	r3, r2
   b52d0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b52d4:	6863      	ldr	r3, [r4, #4]
   b52d6:	f8d8 0000 	ldr.w	r0, [r8]
   b52da:	1c5a      	adds	r2, r3, #1
   b52dc:	3302      	adds	r3, #2
   b52de:	6062      	str	r2, [r4, #4]
   b52e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b52e4:	f000 f80e 	bl	b5304 <__retarget_lock_release_recursive>
   b52e8:	2000      	movs	r0, #0
   b52ea:	e7c6      	b.n	b527a <__register_exitproc+0x3e>
   b52ec:	2003e7e8 	.word	0x2003e7e8
   b52f0:	2003e75c 	.word	0x2003e75c
   b52f4:	00000000 	.word	0x00000000
   b52f8:	000b46d5 	.word	0x000b46d5
   b52fc:	2003e69c 	.word	0x2003e69c

000b5300 <__retarget_lock_acquire_recursive>:
   b5300:	4770      	bx	lr

000b5302 <__retarget_lock_release>:
   b5302:	4770      	bx	lr

000b5304 <__retarget_lock_release_recursive>:
   b5304:	4770      	bx	lr

000b5306 <link_code_end>:
	...

000b5308 <dynalib_user>:
   b5308:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5318:	0000 0000 6f50 6e69 6574 2072 6948 6867     ....Pointer High
   b5328:	5320 6163 656c 5220 6e61 6567 203a 6425      Scale Range: %d
   b5338:	2d20 203e 6425 2020 255b 5d64 000a 6f50      -> %d  [%d]..Po
   b5348:	6e69 6574 2072 6f4c 2077 6353 6c61 2065     inter Low Scale 
   b5358:	6152 676e 3a65 2520 2064 3e2d 2520 2064     Range: %d -> %d 
   b5368:	5b20 6425 0a5d 4d00 6469 6c64 2065 6948      [%d]..Middle Hi
   b5378:	6867 5320 6163 656c 5220 6e61 6567 203a     gh Scale Range: 
   b5388:	6425 2d20 203e 6425 2020 255b 5d64 000a     %d -> %d  [%d]..
   b5398:	694d 6464 656c 4c20 776f 5320 6163 656c     Middle Low Scale
   b53a8:	5220 6e61 6567 203a 6425 2d20 203e 6425      Range: %d -> %d
   b53b8:	2020 255b 5d64 000a 3a52 6425 252c 2c64       [%d]..R:%d,%d,
   b53c8:	6425 252c 0064 3a42 6425 252c 2c64 6425     %d,%d.B:%d,%d,%d
   b53d8:	252c 0064                                   ,%d.

000b53dc <_ZTVN5spark13EthernetClassE>:
	...
   b53e4:	4783 000b 4779 000b 476f 000b 4765 000b     .G..yG..oG..eG..
   b53f4:	4759 000b 474d 000b 4e55 000b 4e5d 000b     YG..MG..UN..]N..
   b5404:	4741 000b 4739 000b 472f 000b 4725 000b     AG..9G../G..%G..
   b5414:	4e8d 000b 7061 0070 5925 252d 2d6d 6425     .N..app.%Y-%m-%d
   b5424:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5434:	6d69 0065                                   ime.

000b5438 <_ZTV9IPAddress>:
	...
   b5440:	4a91 000b 4a81 000b 4a83 000b               .J...J...J..

000b544c <_ZTV9USBSerial>:
	...
   b5454:	4b77 000b 4bdf 000b 4bb5 000b 47e9 000b     wK...K...K...G..
   b5464:	4ba7 000b 4b79 000b 4b89 000b 4bd9 000b     .K..yK...K...K..
   b5474:	4b99 000b 4b71 000b                         .K..qK..

000b547c <_ZTV11USARTSerial>:
	...
   b5484:	4c85 000b 4cf1 000b 4cc9 000b 47e9 000b     .L...L...L...G..
   b5494:	4c99 000b 4cb5 000b 4ca7 000b 4cc3 000b     .L...L...L...L..
   b54a4:	4c87 000b 4c8b 000b                         .L...L..

000b54ac <_ZTV7TwoWire>:
	...
   b54b4:	4d29 000b 4d73 000b 4d4b 000b 4d2b 000b     )M..sM..KM..+M..
   b54c4:	4d53 000b 4d5b 000b 4d63 000b 4d6b 000b     SM..[M..cM..kM..

000b54d4 <_ZTVN5spark9WiFiClassE>:
	...
   b54dc:	4df7 000b 4ded 000b 4de3 000b 4da5 000b     .M...M...M...M..
   b54ec:	48f5 000b 4dd7 000b 4e55 000b 4e5d 000b     .H...M..UN..]N..
   b54fc:	4dcb 000b 4dc3 000b 4db9 000b 4daf 000b     .M...M...M...M..
   b550c:	4e8d 000b                                   .N..

000b5510 <_ZTVN5spark12NetworkClassE>:
	...
   b5518:	4e15 000b 4e1f 000b 4e29 000b 4e33 000b     .N...N..)N..3N..
   b5528:	4e3d 000b 4e49 000b 4e55 000b 4e5d 000b     =N..IN..UN..]N..
   b5538:	4e65 000b 4e71 000b 4e79 000b 4e83 000b     eN..qN..yN...N..
   b5548:	4e8d 000b                                   .N..

000b554c <_ZSt7nothrow>:
   b554c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b555c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b556c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b557c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b558c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b559c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b55ac:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b55bc:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b55cc:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b55dc:	646e 632e                                    nd.c.

000b55e1 <link_const_variable_data_end>:
   b55e1:	00          	.byte	0x00
	...

000b55e4 <link_constructors_location>:
   b55e4:	000b4365 	.word	0x000b4365
   b55e8:	000b478d 	.word	0x000b478d
   b55ec:	000b47b5 	.word	0x000b47b5
   b55f0:	000b47d9 	.word	0x000b47d9
   b55f4:	000b4901 	.word	0x000b4901
   b55f8:	000b4911 	.word	0x000b4911
   b55fc:	000b493d 	.word	0x000b493d
   b5600:	000b4e01 	.word	0x000b4e01
   b5604:	000b4f65 	.word	0x000b4f65

000b5608 <link_constructors_end>:
	...
