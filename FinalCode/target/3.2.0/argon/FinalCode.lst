
c:/Users/deedp/Documents/IOT/SmartGlove/FinalCode/target/3.2.0/argon/FinalCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001904  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b5920  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e5dc  000b5924  0001e5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001a0  2003e650  2003e650  0002e650  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b5998  000b5998  00025998  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b59c0  000b59c0  000259c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f693b  00000000  00000000  000259c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001030c  00000000  00000000  0011c2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0003190b  00000000  00000000  0012c60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002610  00000000  00000000  0015df16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009670  00000000  00000000  00160526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000353f4  00000000  00000000  00169b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003446c  00000000  00000000  0019ef8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001273bd  00000000  00000000  001d33f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006a00  00000000  00000000  002fa7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fa27 	bl	b5480 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fa2f 	bl	b549c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5dc 	.word	0x2003e5dc
   b4048:	000b5924 	.word	0x000b5924
   b404c:	2003e650 	.word	0x2003e650
   b4050:	2003e650 	.word	0x2003e650
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fe53 	bl	b4d08 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b58f0 	.word	0x000b58f0
   b407c:	000b5914 	.word	0x000b5914

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b96a 	b.w	b4358 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f9b5 	bl	b43f4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bdf3 	b.w	b4c78 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 bca1 	b.w	b49d8 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bca7 	b.w	b49e8 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40aa:	b40e      	push	{r1, r2, r3}
   b40ac:	b503      	push	{r0, r1, lr}
   b40ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40b8:	f000 fd6d 	bl	b4b96 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40bc:	b002      	add	sp, #8
   b40be:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c2:	b003      	add	sp, #12
   b40c4:	4770      	bx	lr
	...

000b40c8 <_ZN11Multiplexer3setEh>:
    void disable() {
        digitalWrite(en, HIGH);
    }

    void set(byte index) {
        if (index < 0 || index > 15) {
   b40c8:	290f      	cmp	r1, #15
    void set(byte index) {
   b40ca:	b538      	push	{r3, r4, r5, lr}
   b40cc:	4605      	mov	r5, r0
   b40ce:	460c      	mov	r4, r1
        if (index < 0 || index > 15) {
   b40d0:	d906      	bls.n	b40e0 <_ZN11Multiplexer3setEh+0x18>
            Serial.printf("Multiplexer.set() > value must be in the range of 0...15, value = %d\n", index);
   b40d2:	f000 ff1d 	bl	b4f10 <_Z16_fetch_usbserialv>
   b40d6:	490d      	ldr	r1, [pc, #52]	; (b410c <_ZN11Multiplexer3setEh+0x44>)
   b40d8:	4622      	mov	r2, r4
   b40da:	f7ff ffe6 	bl	b40aa <_ZN5Print6printfEPKcz>

        digitalWrite(s0, (index & 0x1) >> 0);
        digitalWrite(s1, (index & 0x2) >> 1);
        digitalWrite(s2, (index & 0x4) >> 2);
        digitalWrite(s3, (index & 0x8) >> 3);
    }
   b40de:	bd38      	pop	{r3, r4, r5, pc}
        digitalWrite(s0, (index & 0x1) >> 0);
   b40e0:	7840      	ldrb	r0, [r0, #1]
   b40e2:	f001 0101 	and.w	r1, r1, #1
   b40e6:	f001 f902 	bl	b52ee <digitalWrite>
        digitalWrite(s1, (index & 0x2) >> 1);
   b40ea:	78a8      	ldrb	r0, [r5, #2]
   b40ec:	f3c4 0140 	ubfx	r1, r4, #1, #1
   b40f0:	f001 f8fd 	bl	b52ee <digitalWrite>
        digitalWrite(s2, (index & 0x4) >> 2);
   b40f4:	78e8      	ldrb	r0, [r5, #3]
   b40f6:	f3c4 0180 	ubfx	r1, r4, #2, #1
   b40fa:	f001 f8f8 	bl	b52ee <digitalWrite>
        digitalWrite(s3, (index & 0x8) >> 3);
   b40fe:	7928      	ldrb	r0, [r5, #4]
   b4100:	08e1      	lsrs	r1, r4, #3
    }
   b4102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(s3, (index & 0x8) >> 3);
   b4106:	f001 b8f2 	b.w	b52ee <digitalWrite>
   b410a:	bf00      	nop
   b410c:	000b55f8 	.word	0x000b55f8

000b4110 <_ZN11Multiplexer4readEh>:

    int read(byte index) {
   b4110:	b538      	push	{r3, r4, r5, lr}
   b4112:	4604      	mov	r4, r0
        set(index);
   b4114:	f7ff ffd8 	bl	b40c8 <_ZN11Multiplexer3setEh>
        digitalWrite(en, LOW);
   b4118:	7820      	ldrb	r0, [r4, #0]
   b411a:	2100      	movs	r1, #0
   b411c:	f001 f8e7 	bl	b52ee <digitalWrite>
        return read();
    }

    int read() {
        enable();
        int val = analogRead(sig);
   b4120:	7960      	ldrb	r0, [r4, #5]
   b4122:	f001 f8fd 	bl	b5320 <analogRead>
        digitalWrite(en, HIGH);
   b4126:	2101      	movs	r1, #1
        int val = analogRead(sig);
   b4128:	4605      	mov	r5, r0
        digitalWrite(en, HIGH);
   b412a:	7820      	ldrb	r0, [r4, #0]
   b412c:	f001 f8df 	bl	b52ee <digitalWrite>
    }
   b4130:	4628      	mov	r0, r5
   b4132:	bd38      	pop	{r3, r4, r5, pc}

000b4134 <_ZN21MultiplexerCollectionC1EP11Multiplexer>:
    // This results in a simple range conversion of [VAL * (2^8/2^12)] or [VAL / 2^4] or [VAL/16]
    // Fingers range now between 0-255

    MultiplexerCollection() {}

    MultiplexerCollection(Multiplexer *mulp) {
   b4134:	b538      	push	{r3, r4, r5, lr}
   b4136:	460d      	mov	r5, r1
   b4138:	4604      	mov	r4, r0
        thumb = mulp->read(M_THUMB) / 16;
   b413a:	2108      	movs	r1, #8
   b413c:	4628      	mov	r0, r5
   b413e:	f7ff ffe7 	bl	b4110 <_ZN11Multiplexer4readEh>
   b4142:	2800      	cmp	r0, #0
   b4144:	bfb8      	it	lt
   b4146:	300f      	addlt	r0, #15
   b4148:	1100      	asrs	r0, r0, #4
   b414a:	7020      	strb	r0, [r4, #0]
        pointer = mulp->read(M_POINTER) / 16;
   b414c:	2107      	movs	r1, #7
   b414e:	4628      	mov	r0, r5
   b4150:	f7ff ffde 	bl	b4110 <_ZN11Multiplexer4readEh>
   b4154:	1e03      	subs	r3, r0, #0
   b4156:	bfb8      	it	lt
   b4158:	330f      	addlt	r3, #15
   b415a:	111b      	asrs	r3, r3, #4
   b415c:	7063      	strb	r3, [r4, #1]
        middle = mulp->read(M_MIDDLE) / 16;
   b415e:	2109      	movs	r1, #9
   b4160:	4628      	mov	r0, r5
   b4162:	f7ff ffd5 	bl	b4110 <_ZN11Multiplexer4readEh>
   b4166:	1e03      	subs	r3, r0, #0
   b4168:	bfb8      	it	lt
   b416a:	330f      	addlt	r3, #15
   b416c:	111b      	asrs	r3, r3, #4
   b416e:	70a3      	strb	r3, [r4, #2]
        ring = mulp->read(M_RING) / 16;
   b4170:	210c      	movs	r1, #12
   b4172:	4628      	mov	r0, r5
   b4174:	f7ff ffcc 	bl	b4110 <_ZN11Multiplexer4readEh>
   b4178:	1e03      	subs	r3, r0, #0
   b417a:	bfb8      	it	lt
   b417c:	330f      	addlt	r3, #15
   b417e:	111b      	asrs	r3, r3, #4
   b4180:	70e3      	strb	r3, [r4, #3]
        pinky = mulp->read(M_PINKY) / 16;
   b4182:	210d      	movs	r1, #13
   b4184:	4628      	mov	r0, r5
   b4186:	f7ff ffc3 	bl	b4110 <_ZN11Multiplexer4readEh>
   b418a:	2800      	cmp	r0, #0
   b418c:	bfb8      	it	lt
   b418e:	300f      	addlt	r0, #15
   b4190:	1100      	asrs	r0, r0, #4
   b4192:	7120      	strb	r0, [r4, #4]
    }
   b4194:	4620      	mov	r0, r4
   b4196:	bd38      	pop	{r3, r4, r5, pc}

000b4198 <_ZN21MultiplexerCollection12saveToEEPROMEi>:
        val += abs(ring - mulpC->ring);
        val += abs(pinky - mulpC->pinky) ;
        return val;
    }

    void saveToEEPROM(int index) {
   b4198:	b538      	push	{r3, r4, r5, lr}
   b419a:	4605      	mov	r5, r0
        int startIndex = index * 5;
   b419c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
        EEPROM.write(startIndex + 0, thumb);
   b41a0:	f001 f914 	bl	b53cc <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   b41a4:	7829      	ldrb	r1, [r5, #0]
   b41a6:	4620      	mov	r0, r4
   b41a8:	f000 fac2 	bl	b4730 <HAL_EEPROM_Write>
        EEPROM.write(startIndex + 1, pointer);
   b41ac:	f001 f90e 	bl	b53cc <_Z21__fetch_global_EEPROMv>
   b41b0:	7869      	ldrb	r1, [r5, #1]
   b41b2:	1c60      	adds	r0, r4, #1
   b41b4:	f000 fabc 	bl	b4730 <HAL_EEPROM_Write>
        EEPROM.write(startIndex + 2, middle);
   b41b8:	f001 f908 	bl	b53cc <_Z21__fetch_global_EEPROMv>
   b41bc:	78a9      	ldrb	r1, [r5, #2]
   b41be:	1ca0      	adds	r0, r4, #2
   b41c0:	f000 fab6 	bl	b4730 <HAL_EEPROM_Write>
        EEPROM.write(startIndex + 3, ring);
   b41c4:	f001 f902 	bl	b53cc <_Z21__fetch_global_EEPROMv>
   b41c8:	78e9      	ldrb	r1, [r5, #3]
   b41ca:	1ce0      	adds	r0, r4, #3
   b41cc:	f000 fab0 	bl	b4730 <HAL_EEPROM_Write>
        EEPROM.write(startIndex + 4, pinky);
   b41d0:	f001 f8fc 	bl	b53cc <_Z21__fetch_global_EEPROMv>
   b41d4:	7929      	ldrb	r1, [r5, #4]
   b41d6:	1d20      	adds	r0, r4, #4
    }
   b41d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b41dc:	f000 baa8 	b.w	b4730 <HAL_EEPROM_Write>

000b41e0 <_Z11readCommandPhS_>:
    // P_11101 = 0x1D,
    // P_11110 = 0x1E,
    // P_11111 = 0x1F,
};

void readCommand(byte *mainCmd, byte *data) {
   b41e0:	b538      	push	{r3, r4, r5, lr}
   b41e2:	460c      	mov	r4, r1
   b41e4:	4605      	mov	r5, r0
    if (Serial.available() > 0) {
   b41e6:	f000 fe93 	bl	b4f10 <_Z16_fetch_usbserialv>
   b41ea:	6803      	ldr	r3, [r0, #0]
   b41ec:	691b      	ldr	r3, [r3, #16]
   b41ee:	4798      	blx	r3
   b41f0:	2800      	cmp	r0, #0
   b41f2:	dd0a      	ble.n	b420a <_Z11readCommandPhS_+0x2a>
        byte packet = Serial.read();
   b41f4:	f000 fe8c 	bl	b4f10 <_Z16_fetch_usbserialv>
   b41f8:	6803      	ldr	r3, [r0, #0]
   b41fa:	695b      	ldr	r3, [r3, #20]
   b41fc:	4798      	blx	r3
        *mainCmd = (packet & 0xE0) >> 5;
   b41fe:	f3c0 1342 	ubfx	r3, r0, #5, #3
        *data = (packet & 0x1F);
   b4202:	f000 001f 	and.w	r0, r0, #31
        *mainCmd = (packet & 0xE0) >> 5;
   b4206:	702b      	strb	r3, [r5, #0]
        *data = (packet & 0x1F);
   b4208:	7020      	strb	r0, [r4, #0]
    }
}
   b420a:	bd38      	pop	{r3, r4, r5, pc}

000b420c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>:
                break;
            }
        }
    }

    int getBestCollection(MultiplexerCollection *comparedCol) {
   b420c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        int bestVal = 256 * 9; // Impossible to get past this with the algorithm i use
   b4210:	f44f 6c10 	mov.w	ip, #2304	; 0x900
   b4214:	6806      	ldr	r6, [r0, #0]
        int bestColIndex = -1;

        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4216:	2700      	movs	r7, #0
        int bestColIndex = -1;
   b4218:	f04f 30ff 	mov.w	r0, #4294967295
        return thumb != 0 &&
   b421c:	7833      	ldrb	r3, [r6, #0]
               ring != 0 &&
   b421e:	b393      	cbz	r3, b4286 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x7a>
               pointer != 0 &&
   b4220:	f896 8001 	ldrb.w	r8, [r6, #1]
        return thumb != 0 &&
   b4224:	f1b8 0f00 	cmp.w	r8, #0
   b4228:	d02d      	beq.n	b4286 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x7a>
               middle != 0 &&
   b422a:	78b5      	ldrb	r5, [r6, #2]
               pointer != 0 &&
   b422c:	b35d      	cbz	r5, b4286 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x7a>
               ring != 0 &&
   b422e:	78f4      	ldrb	r4, [r6, #3]
               middle != 0 &&
   b4230:	b34c      	cbz	r4, b4286 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x7a>
               pinky != 0;
   b4232:	7932      	ldrb	r2, [r6, #4]
               ring != 0 &&
   b4234:	b33a      	cbz	r2, b4286 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x7a>
        val += abs(thumb - mulpC->thumb) ;
   b4236:	f891 e000 	ldrb.w	lr, [r1]
   b423a:	eba3 030e 	sub.w	r3, r3, lr
        val += abs(pointer - mulpC->pointer);
   b423e:	f891 e001 	ldrb.w	lr, [r1, #1]
        val += abs(thumb - mulpC->thumb) ;
   b4242:	2b00      	cmp	r3, #0
        val += abs(pointer - mulpC->pointer);
   b4244:	eba8 0e0e 	sub.w	lr, r8, lr
        val += abs(thumb - mulpC->thumb) ;
   b4248:	bfb8      	it	lt
   b424a:	425b      	neglt	r3, r3
        val += abs(pointer - mulpC->pointer);
   b424c:	f1be 0f00 	cmp.w	lr, #0
   b4250:	bfb8      	it	lt
   b4252:	f1ce 0e00 	rsblt	lr, lr, #0
   b4256:	449e      	add	lr, r3
        val += abs(middle - mulpC->middle);
   b4258:	788b      	ldrb	r3, [r1, #2]
   b425a:	1aeb      	subs	r3, r5, r3
        val += abs(ring - mulpC->ring);
   b425c:	78cd      	ldrb	r5, [r1, #3]
        val += abs(middle - mulpC->middle);
   b425e:	2b00      	cmp	r3, #0
        val += abs(ring - mulpC->ring);
   b4260:	eba4 0405 	sub.w	r4, r4, r5
        val += abs(middle - mulpC->middle);
   b4264:	bfb8      	it	lt
   b4266:	425b      	neglt	r3, r3
        val += abs(ring - mulpC->ring);
   b4268:	2c00      	cmp	r4, #0
        val += abs(middle - mulpC->middle);
   b426a:	4473      	add	r3, lr
        val += abs(ring - mulpC->ring);
   b426c:	bfb8      	it	lt
   b426e:	4264      	neglt	r4, r4
   b4270:	441c      	add	r4, r3
        val += abs(pinky - mulpC->pinky) ;
   b4272:	790b      	ldrb	r3, [r1, #4]
   b4274:	1ad3      	subs	r3, r2, r3
   b4276:	2b00      	cmp	r3, #0
   b4278:	bfb8      	it	lt
   b427a:	425b      	neglt	r3, r3
   b427c:	4423      	add	r3, r4
            MultiplexerCollection *curSign = &allSigns[i];
            if (curSign->isSet()) {
                int curVal = curSign->compare(comparedCol);
                if (curVal < bestVal) {
   b427e:	4563      	cmp	r3, ip
   b4280:	bfbc      	itt	lt
   b4282:	4638      	movlt	r0, r7
   b4284:	469c      	movlt	ip, r3
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4286:	3701      	adds	r7, #1
   b4288:	2f08      	cmp	r7, #8
   b428a:	f106 0605 	add.w	r6, r6, #5
   b428e:	d1c5      	bne.n	b421c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x10>
                }
            }
        }

        return bestColIndex;
    }
   b4290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4294 <_ZN17ProgramController17getBestCollectionEv>:

    int getBestCollection() {
   b4294:	b513      	push	{r0, r1, r4, lr}
   b4296:	4604      	mov	r4, r0
        MultiplexerCollection mpc(myMulp);
   b4298:	6841      	ldr	r1, [r0, #4]
   b429a:	4668      	mov	r0, sp
   b429c:	f7ff ff4a 	bl	b4134 <_ZN21MultiplexerCollectionC1EP11Multiplexer>
        return getBestCollection(&mpc);
   b42a0:	4669      	mov	r1, sp
   b42a2:	4620      	mov	r0, r4
   b42a4:	f7ff ffb2 	bl	b420c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>
    }
   b42a8:	b002      	add	sp, #8
   b42aa:	bd10      	pop	{r4, pc}

000b42ac <_ZN17ProgramController13handleRequestEh>:
            allSigns[fingerPos].saveToEEPROM(fingerPos);
            Serial.printf("Programmed finger pos %x\n", fingerPos);
        }
    }

    void handleRequest(byte request) {
   b42ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b42b0:	4606      	mov	r6, r0
        Request req = (Request)request;

        switch (req) {
   b42b2:	b121      	cbz	r1, b42be <_ZN17ProgramController13handleRequestEh+0x12>
   b42b4:	2901      	cmp	r1, #1
   b42b6:	d00c      	beq.n	b42d2 <_ZN17ProgramController13handleRequestEh+0x26>
            Serial.printf("Wipe completed\n");
        } break;
        default:
            break;
        }
    }
   b42b8:	b002      	add	sp, #8
   b42ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int bestCol = getBestCollection();
   b42be:	f7ff ffe9 	bl	b4294 <_ZN17ProgramController17getBestCollectionEv>
   b42c2:	9001      	str	r0, [sp, #4]
            Serial.printf("Best collection is %d\n", bestCol);
   b42c4:	f000 fe24 	bl	b4f10 <_Z16_fetch_usbserialv>
   b42c8:	9a01      	ldr	r2, [sp, #4]
   b42ca:	4916      	ldr	r1, [pc, #88]	; (b4324 <_ZN17ProgramController13handleRequestEh+0x78>)
   b42cc:	f7ff feed 	bl	b40aa <_ZN5Print6printfEPKcz>
    }
   b42d0:	e7f2      	b.n	b42b8 <_ZN17ProgramController13handleRequestEh+0xc>
            Serial.printf("Beginning wipe\n");
   b42d2:	f000 fe1d 	bl	b4f10 <_Z16_fetch_usbserialv>
   b42d6:	4914      	ldr	r1, [pc, #80]	; (b4328 <_ZN17ProgramController13handleRequestEh+0x7c>)
                Serial.printf("Wiped %d/%d\n", i + 1, HAND_POS_COUNT);
   b42d8:	f8df 8054 	ldr.w	r8, [pc, #84]	; b4330 <_ZN17ProgramController13handleRequestEh+0x84>
            Serial.printf("Beginning wipe\n");
   b42dc:	f7ff fee5 	bl	b40aa <_ZN5Print6printfEPKcz>
            for (int i = 0; i < HAND_POS_COUNT; i++) {
   b42e0:	2400      	movs	r4, #0
        thumb = 0;
   b42e2:	4625      	mov	r5, r4
                Serial.printf("Wiped %d/%d\n", i + 1, HAND_POS_COUNT);
   b42e4:	4627      	mov	r7, r4
   b42e6:	3401      	adds	r4, #1
   b42e8:	f000 fe12 	bl	b4f10 <_Z16_fetch_usbserialv>
   b42ec:	2308      	movs	r3, #8
   b42ee:	4622      	mov	r2, r4
   b42f0:	4641      	mov	r1, r8
   b42f2:	f7ff feda 	bl	b40aa <_ZN5Print6printfEPKcz>
                allSigns[i].clear();
   b42f6:	6831      	ldr	r1, [r6, #0]
   b42f8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   b42fc:	3b05      	subs	r3, #5
   b42fe:	18ca      	adds	r2, r1, r3
   b4300:	54cd      	strb	r5, [r1, r3]
        pointer = 0;
   b4302:	7055      	strb	r5, [r2, #1]
        middle = 0;
   b4304:	7095      	strb	r5, [r2, #2]
        ring = 0;
   b4306:	70d5      	strb	r5, [r2, #3]
        pinky = 0;
   b4308:	7115      	strb	r5, [r2, #4]
                allSigns[i].saveToEEPROM(i);
   b430a:	6830      	ldr	r0, [r6, #0]
   b430c:	4639      	mov	r1, r7
   b430e:	4418      	add	r0, r3
   b4310:	f7ff ff42 	bl	b4198 <_ZN21MultiplexerCollection12saveToEEPROMEi>
            for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4314:	2c08      	cmp	r4, #8
   b4316:	d1e5      	bne.n	b42e4 <_ZN17ProgramController13handleRequestEh+0x38>
            Serial.printf("Wipe completed\n");
   b4318:	f000 fdfa 	bl	b4f10 <_Z16_fetch_usbserialv>
   b431c:	4903      	ldr	r1, [pc, #12]	; (b432c <_ZN17ProgramController13handleRequestEh+0x80>)
   b431e:	f7ff fec4 	bl	b40aa <_ZN5Print6printfEPKcz>
    }
   b4322:	e7c9      	b.n	b42b8 <_ZN17ProgramController13handleRequestEh+0xc>
   b4324:	000b563e 	.word	0x000b563e
   b4328:	000b5655 	.word	0x000b5655
   b432c:	000b5672 	.word	0x000b5672
   b4330:	000b5665 	.word	0x000b5665

000b4334 <_ZN13SequenceSaver7matchesEiP14FingerPosition>:
        }
        // Serial.printf("Setting [0] to %d\n", pos);
        poses[0] = pos;
    }

    bool matches(int seqLength, FingerPosition *pos) {
   b4334:	b530      	push	{r4, r5, lr}
        if (seqLength != length) {
   b4336:	6843      	ldr	r3, [r0, #4]
   b4338:	428b      	cmp	r3, r1
   b433a:	d10b      	bne.n	b4354 <_ZN13SequenceSaver7matchesEiP14FingerPosition+0x20>
            // Serial.printf("Does not match length\n");
            return false;
        }

        for (int i = 0; i < seqLength; i++) {
   b433c:	2300      	movs	r3, #0
   b433e:	4299      	cmp	r1, r3
   b4340:	dd06      	ble.n	b4350 <_ZN13SequenceSaver7matchesEiP14FingerPosition+0x1c>
            if (pos[i] != poses[i]) {
   b4342:	6804      	ldr	r4, [r0, #0]
   b4344:	5cd5      	ldrb	r5, [r2, r3]
   b4346:	5ce4      	ldrb	r4, [r4, r3]
   b4348:	42a5      	cmp	r5, r4
   b434a:	d103      	bne.n	b4354 <_ZN13SequenceSaver7matchesEiP14FingerPosition+0x20>
        for (int i = 0; i < seqLength; i++) {
   b434c:	3301      	adds	r3, #1
   b434e:	e7f6      	b.n	b433e <_ZN13SequenceSaver7matchesEiP14FingerPosition+0xa>
                // Serial.printf("[%d] %d != %d \n", i, pos[i], poses[i]);
                return false;
            }
        }

        return true;
   b4350:	2001      	movs	r0, #1
    }
   b4352:	bd30      	pop	{r4, r5, pc}
            return false;
   b4354:	2000      	movs	r0, #0
   b4356:	e7fc      	b.n	b4352 <_ZN13SequenceSaver7matchesEiP14FingerPosition+0x1e>

000b4358 <setup>:
FingerPosition countUpMatch[] = {P_PEACE, P_GUN, P_ROCK};
FingerPosition countDownMatch[] = {P_ROCK, P_GUN, P_PEACE};
FingerPosition __curData[3];
SequenceSaver curData(3, __curData);

void setup() {
   b4358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        pinMode(en, OUTPUT);
   b435a:	4c24      	ldr	r4, [pc, #144]	; (b43ec <setup+0x94>)
            allSigns[i].loadFromEEPROM(i);
   b435c:	4e24      	ldr	r6, [pc, #144]	; (b43f0 <setup+0x98>)
   b435e:	7820      	ldrb	r0, [r4, #0]
   b4360:	2101      	movs	r1, #1
   b4362:	f000 ffb3 	bl	b52cc <pinMode>
        pinMode(s0, OUTPUT);
   b4366:	7860      	ldrb	r0, [r4, #1]
   b4368:	2101      	movs	r1, #1
   b436a:	f000 ffaf 	bl	b52cc <pinMode>
        pinMode(s1, OUTPUT);
   b436e:	78a0      	ldrb	r0, [r4, #2]
   b4370:	2101      	movs	r1, #1
   b4372:	f000 ffab 	bl	b52cc <pinMode>
        pinMode(s2, OUTPUT);
   b4376:	78e0      	ldrb	r0, [r4, #3]
   b4378:	2101      	movs	r1, #1
   b437a:	f000 ffa7 	bl	b52cc <pinMode>
        pinMode(s3, OUTPUT);
   b437e:	7920      	ldrb	r0, [r4, #4]
   b4380:	2101      	movs	r1, #1
   b4382:	f000 ffa3 	bl	b52cc <pinMode>
        pinMode(sig, INPUT);
   b4386:	7960      	ldrb	r0, [r4, #5]
   b4388:	2100      	movs	r1, #0
   b438a:	f000 ff9f 	bl	b52cc <pinMode>
        set(index);
   b438e:	79a1      	ldrb	r1, [r4, #6]
   b4390:	4620      	mov	r0, r4
   b4392:	f7ff fe99 	bl	b40c8 <_ZN11Multiplexer3setEh>
        digitalWrite(en, HIGH);
   b4396:	7820      	ldrb	r0, [r4, #0]
   b4398:	2101      	movs	r1, #1
   b439a:	f000 ffa8 	bl	b52ee <digitalWrite>
   b439e:	2400      	movs	r4, #0
   b43a0:	6837      	ldr	r7, [r6, #0]

    void loadFromEEPROM(int index) {
        int startIndex = index * 5;
        thumb = EEPROM.read(startIndex + 0);
   b43a2:	f001 f813 	bl	b53cc <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b43a6:	4620      	mov	r0, r4
   b43a8:	f000 f9ba 	bl	b4720 <HAL_EEPROM_Read>
   b43ac:	5538      	strb	r0, [r7, r4]
        pointer = EEPROM.read(startIndex + 1);
   b43ae:	f001 f80d 	bl	b53cc <_Z21__fetch_global_EEPROMv>
   b43b2:	1c60      	adds	r0, r4, #1
   b43b4:	f000 f9b4 	bl	b4720 <HAL_EEPROM_Read>
   b43b8:	193d      	adds	r5, r7, r4
   b43ba:	7068      	strb	r0, [r5, #1]
        middle = EEPROM.read(startIndex + 2);
   b43bc:	f001 f806 	bl	b53cc <_Z21__fetch_global_EEPROMv>
   b43c0:	1ca0      	adds	r0, r4, #2
   b43c2:	f000 f9ad 	bl	b4720 <HAL_EEPROM_Read>
   b43c6:	70a8      	strb	r0, [r5, #2]
        ring = EEPROM.read(startIndex + 3);
   b43c8:	f001 f800 	bl	b53cc <_Z21__fetch_global_EEPROMv>
   b43cc:	1ce0      	adds	r0, r4, #3
   b43ce:	f000 f9a7 	bl	b4720 <HAL_EEPROM_Read>
   b43d2:	70e8      	strb	r0, [r5, #3]
        pinky = EEPROM.read(startIndex + 4);
   b43d4:	f000 fffa 	bl	b53cc <_Z21__fetch_global_EEPROMv>
   b43d8:	1d20      	adds	r0, r4, #4
   b43da:	f000 f9a1 	bl	b4720 <HAL_EEPROM_Read>
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b43de:	3405      	adds	r4, #5
   b43e0:	2c28      	cmp	r4, #40	; 0x28
   b43e2:	7128      	strb	r0, [r5, #4]
   b43e4:	d1dc      	bne.n	b43a0 <setup+0x48>
        isProgrammerEnabled = true;
   b43e6:	2301      	movs	r3, #1
   b43e8:	7233      	strb	r3, [r6, #8]
    myMulp.begin();
    programmer.begin();
    programmer.enableProgrammer(); // Enables programming the controller via byte commands if needed
}
   b43ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b43ec:	2003e69c 	.word	0x2003e69c
   b43f0:	2003e6a4 	.word	0x2003e6a4

000b43f4 <loop>:

void loop() {
   b43f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (isProgrammerEnabled && Serial.available() > 0) {
   b43f8:	4c76      	ldr	r4, [pc, #472]	; (b45d4 <loop+0x1e0>)
    MultiplexerCollection s(&myMulp);
   b43fa:	4977      	ldr	r1, [pc, #476]	; (b45d8 <loop+0x1e4>)
void loop() {
   b43fc:	b087      	sub	sp, #28
    MultiplexerCollection s(&myMulp);
   b43fe:	a802      	add	r0, sp, #8
   b4400:	f7ff fe98 	bl	b4134 <_ZN21MultiplexerCollectionC1EP11Multiplexer>
   b4404:	7a23      	ldrb	r3, [r4, #8]
   b4406:	2b00      	cmp	r3, #0
   b4408:	d03e      	beq.n	b4488 <loop+0x94>
   b440a:	f000 fd81 	bl	b4f10 <_Z16_fetch_usbserialv>
   b440e:	6803      	ldr	r3, [r0, #0]
   b4410:	691b      	ldr	r3, [r3, #16]
   b4412:	4798      	blx	r3
   b4414:	2800      	cmp	r0, #0
   b4416:	dd37      	ble.n	b4488 <loop+0x94>
            readCommand(&cmd, &data);
   b4418:	f10d 0107 	add.w	r1, sp, #7
   b441c:	f10d 0006 	add.w	r0, sp, #6
   b4420:	f7ff fede 	bl	b41e0 <_Z11readCommandPhS_>
            switch (cmd) {
   b4424:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4428:	b143      	cbz	r3, b443c <loop+0x48>
   b442a:	2b01      	cmp	r3, #1
   b442c:	f000 80a0 	beq.w	b4570 <loop+0x17c>
                Serial.printf("Unknown command\n");
   b4430:	f000 fd6e 	bl	b4f10 <_Z16_fetch_usbserialv>
   b4434:	4969      	ldr	r1, [pc, #420]	; (b45dc <loop+0x1e8>)
   b4436:	f7ff fe38 	bl	b40aa <_ZN5Print6printfEPKcz>
    }
   b443a:	e025      	b.n	b4488 <loop+0x94>
                programFingerPosition(data);
   b443c:	f89d 5007 	ldrb.w	r5, [sp, #7]
        if (fingerPos < HAND_POS_COUNT) {
   b4440:	2d07      	cmp	r5, #7
   b4442:	d821      	bhi.n	b4488 <loop+0x94>
            MultiplexerCollection mpc(myMulp);
   b4444:	6861      	ldr	r1, [r4, #4]
   b4446:	a804      	add	r0, sp, #16
   b4448:	f7ff fe74 	bl	b4134 <_ZN21MultiplexerCollectionC1EP11Multiplexer>
            allSigns[fingerPos].set(&mpc);
   b444c:	6821      	ldr	r1, [r4, #0]
        thumb = mulpC->thumb;
   b444e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   b4452:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   b4456:	188b      	adds	r3, r1, r2
   b4458:	5488      	strb	r0, [r1, r2]
        pointer = mulpC->pointer;
   b445a:	f89d 1011 	ldrb.w	r1, [sp, #17]
   b445e:	7059      	strb	r1, [r3, #1]
        middle = mulpC->middle;
   b4460:	f89d 1012 	ldrb.w	r1, [sp, #18]
   b4464:	7099      	strb	r1, [r3, #2]
        ring = mulpC->ring;
   b4466:	f89d 1013 	ldrb.w	r1, [sp, #19]
   b446a:	70d9      	strb	r1, [r3, #3]
            allSigns[fingerPos].saveToEEPROM(fingerPos);
   b446c:	6820      	ldr	r0, [r4, #0]
        pinky = mulpC->pinky;
   b446e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   b4472:	7119      	strb	r1, [r3, #4]
   b4474:	4410      	add	r0, r2
   b4476:	4629      	mov	r1, r5
   b4478:	f7ff fe8e 	bl	b4198 <_ZN21MultiplexerCollection12saveToEEPROMEi>
            Serial.printf("Programmed finger pos %x\n", fingerPos);
   b447c:	f000 fd48 	bl	b4f10 <_Z16_fetch_usbserialv>
   b4480:	4957      	ldr	r1, [pc, #348]	; (b45e0 <loop+0x1ec>)
   b4482:	462a      	mov	r2, r5
   b4484:	f7ff fe11 	bl	b40aa <_ZN5Print6printfEPKcz>

    programmer.update(); // does basically nothing if enableProgrammer isn't called

    static int fingerPosCounts[8];
    static int totalCount;
    static int startTime = millis();
   b4488:	4c56      	ldr	r4, [pc, #344]	; (b45e4 <loop+0x1f0>)
   b448a:	4f57      	ldr	r7, [pc, #348]	; (b45e8 <loop+0x1f4>)
   b448c:	7823      	ldrb	r3, [r4, #0]
   b448e:	f3bf 8f5b 	dmb	ish
   b4492:	f013 0f01 	tst.w	r3, #1
   b4496:	d109      	bne.n	b44ac <loop+0xb8>
   b4498:	4620      	mov	r0, r4
   b449a:	f7ff fdfe 	bl	b409a <__cxa_guard_acquire>
   b449e:	b128      	cbz	r0, b44ac <loop+0xb8>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b44a0:	f000 f92e 	bl	b4700 <HAL_Timer_Get_Milli_Seconds>
   b44a4:	6038      	str	r0, [r7, #0]
   b44a6:	4620      	mov	r0, r4
   b44a8:	f7ff fdfc 	bl	b40a4 <__cxa_guard_release>

    static int bestChoice;
    static int bestChoiceCount;

    int i = programmer.getBestCollection();
   b44ac:	4849      	ldr	r0, [pc, #292]	; (b45d4 <loop+0x1e0>)
    fingerPosCounts[i]++;
   b44ae:	4c4f      	ldr	r4, [pc, #316]	; (b45ec <loop+0x1f8>)
    totalCount++;
   b44b0:	4e4f      	ldr	r6, [pc, #316]	; (b45f0 <loop+0x1fc>)
    int i = programmer.getBestCollection();
   b44b2:	f7ff feef 	bl	b4294 <_ZN17ProgramController17getBestCollectionEv>
    fingerPosCounts[i]++;
   b44b6:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   b44ba:	3301      	adds	r3, #1
   b44bc:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    totalCount++;
   b44c0:	6833      	ldr	r3, [r6, #0]
   b44c2:	3301      	adds	r3, #1
   b44c4:	6033      	str	r3, [r6, #0]
   b44c6:	f000 f91b 	bl	b4700 <HAL_Timer_Get_Milli_Seconds>

    int curTime = millis();
    if (curTime - startTime > 100) {
   b44ca:	683b      	ldr	r3, [r7, #0]
   b44cc:	1ac3      	subs	r3, r0, r3
   b44ce:	2b64      	cmp	r3, #100	; 0x64
   b44d0:	dd7d      	ble.n	b45ce <loop+0x1da>
        for (int i = 0; i < 8; i++) {
            float perc = (float)fingerPosCounts[i] / (float)totalCount * 100.0;
   b44d2:	edd6 7a00 	vldr	s15, [r6]
   b44d6:	4d47      	ldr	r5, [pc, #284]	; (b45f4 <loop+0x200>)
   b44d8:	f8df c140 	ldr.w	ip, [pc, #320]	; b461c <loop+0x228>
   b44dc:	f8d5 e000 	ldr.w	lr, [r5]
   b44e0:	f8dc 1000 	ldr.w	r1, [ip]
   b44e4:	ed9f 6a44 	vldr	s12, [pc, #272]	; b45f8 <loop+0x204>
            if (perc > 80) {
   b44e8:	eddf 5a44 	vldr	s11, [pc, #272]	; b45fc <loop+0x208>
            float perc = (float)fingerPosCounts[i] / (float)totalCount * 100.0;
   b44ec:	2300      	movs	r3, #0
   b44ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b44f2:	4698      	mov	r8, r3
        for (int i = 0; i < 8; i++) {
   b44f4:	461a      	mov	r2, r3
                } else {
                    bestChoice = i;
                    bestChoiceCount = 0;
                }
            }
            fingerPosCounts[i] = 0;
   b44f6:	4699      	mov	r9, r3
            float perc = (float)fingerPosCounts[i] / (float)totalCount * 100.0;
   b44f8:	ecf4 6a01 	vldmia	r4!, {s13}
   b44fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   b4500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b4504:	ee27 7a06 	vmul.f32	s14, s14, s12
            if (perc > 80) {
   b4508:	eeb4 7ae5 	vcmpe.f32	s14, s11
   b450c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4510:	dd08      	ble.n	b4524 <loop+0x130>
                if (bestChoice == i) {
   b4512:	4596      	cmp	lr, r2
                    bestChoiceCount++;
   b4514:	bf13      	iteet	ne
   b4516:	2301      	movne	r3, #1
   b4518:	3101      	addeq	r1, #1
   b451a:	2301      	moveq	r3, #1
   b451c:	4696      	movne	lr, r2
                    bestChoiceCount = 0;
   b451e:	bf1c      	itt	ne
   b4520:	2100      	movne	r1, #0
   b4522:	4698      	movne	r8, r3
        for (int i = 0; i < 8; i++) {
   b4524:	3201      	adds	r2, #1
   b4526:	2a08      	cmp	r2, #8
            fingerPosCounts[i] = 0;
   b4528:	f844 9c04 	str.w	r9, [r4, #-4]
        for (int i = 0; i < 8; i++) {
   b452c:	d1e4      	bne.n	b44f8 <loop+0x104>
   b452e:	f1b8 0f00 	cmp.w	r8, #0
   b4532:	d001      	beq.n	b4538 <loop+0x144>
   b4534:	f8c5 e000 	str.w	lr, [r5]
   b4538:	b10b      	cbz	r3, b453e <loop+0x14a>
   b453a:	f8cc 1000 	str.w	r1, [ip]
        }
        totalCount = 0;
   b453e:	2300      	movs	r3, #0
   b4540:	6033      	str	r3, [r6, #0]
        startTime = curTime;
        if (bestChoiceCount == 6) {
   b4542:	f8dc 3000 	ldr.w	r3, [ip]
        startTime = curTime;
   b4546:	6038      	str	r0, [r7, #0]
        if (bestChoiceCount == 6) {
   b4548:	2b06      	cmp	r3, #6
   b454a:	d12a      	bne.n	b45a2 <loop+0x1ae>
            Serial.printf("Best choice: %d\n", bestChoice);
   b454c:	f000 fce0 	bl	b4f10 <_Z16_fetch_usbserialv>
   b4550:	682a      	ldr	r2, [r5, #0]
   b4552:	492b      	ldr	r1, [pc, #172]	; (b4600 <loop+0x20c>)
   b4554:	f7ff fda9 	bl	b40aa <_ZN5Print6printfEPKcz>
            curData.push((FingerPosition) bestChoice);
   b4558:	7829      	ldrb	r1, [r5, #0]
        for (int i = length - 1; i > 0; i--) {
   b455a:	4d2a      	ldr	r5, [pc, #168]	; (b4604 <loop+0x210>)
   b455c:	686b      	ldr	r3, [r5, #4]
            poses[i] = poses[i - 1];
   b455e:	682a      	ldr	r2, [r5, #0]
        for (int i = length - 1; i > 0; i--) {
   b4560:	3b01      	subs	r3, #1
   b4562:	2b00      	cmp	r3, #0
   b4564:	dd0a      	ble.n	b457c <loop+0x188>
            poses[i] = poses[i - 1];
   b4566:	18d0      	adds	r0, r2, r3
   b4568:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   b456c:	54d0      	strb	r0, [r2, r3]
        for (int i = length - 1; i > 0; i--) {
   b456e:	e7f6      	b.n	b455e <loop+0x16a>
                handleRequest(data);
   b4570:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4574:	4620      	mov	r0, r4
   b4576:	f7ff fe99 	bl	b42ac <_ZN17ProgramController13handleRequestEh>
                break;
   b457a:	e785      	b.n	b4488 <loop+0x94>

    void print() {
        for (int i = 0 ; i < length; i++) {
            Serial.printf("%d, ", poses[i]);
   b457c:	4e22      	ldr	r6, [pc, #136]	; (b4608 <loop+0x214>)
        poses[0] = pos;
   b457e:	7011      	strb	r1, [r2, #0]
        for (int i = 0 ; i < length; i++) {
   b4580:	2400      	movs	r4, #0
   b4582:	686b      	ldr	r3, [r5, #4]
   b4584:	42a3      	cmp	r3, r4
   b4586:	dd08      	ble.n	b459a <loop+0x1a6>
            Serial.printf("%d, ", poses[i]);
   b4588:	f000 fcc2 	bl	b4f10 <_Z16_fetch_usbserialv>
   b458c:	682b      	ldr	r3, [r5, #0]
   b458e:	4631      	mov	r1, r6
   b4590:	5d1a      	ldrb	r2, [r3, r4]
   b4592:	f7ff fd8a 	bl	b40aa <_ZN5Print6printfEPKcz>
        for (int i = 0 ; i < length; i++) {
   b4596:	3401      	adds	r4, #1
   b4598:	e7f3      	b.n	b4582 <loop+0x18e>
        }
        Serial.println();
   b459a:	f000 fcb9 	bl	b4f10 <_Z16_fetch_usbserialv>
   b459e:	f000 fad0 	bl	b4b42 <_ZN5Print7printlnEv>
            curData.print();
        }

        if (curData.matches(3, countUpMatch)) {
   b45a2:	4a1a      	ldr	r2, [pc, #104]	; (b460c <loop+0x218>)
   b45a4:	4817      	ldr	r0, [pc, #92]	; (b4604 <loop+0x210>)
   b45a6:	2103      	movs	r1, #3
   b45a8:	f7ff fec4 	bl	b4334 <_ZN13SequenceSaver7matchesEiP14FingerPosition>
   b45ac:	b120      	cbz	r0, b45b8 <loop+0x1c4>
            Serial.printf("Counted up hoe\n");
   b45ae:	f000 fcaf 	bl	b4f10 <_Z16_fetch_usbserialv>
   b45b2:	4917      	ldr	r1, [pc, #92]	; (b4610 <loop+0x21c>)
   b45b4:	f7ff fd79 	bl	b40aa <_ZN5Print6printfEPKcz>
        }

        if (curData.matches(3, countDownMatch)) {
   b45b8:	4a16      	ldr	r2, [pc, #88]	; (b4614 <loop+0x220>)
   b45ba:	4812      	ldr	r0, [pc, #72]	; (b4604 <loop+0x210>)
   b45bc:	2103      	movs	r1, #3
   b45be:	f7ff feb9 	bl	b4334 <_ZN13SequenceSaver7matchesEiP14FingerPosition>
   b45c2:	b120      	cbz	r0, b45ce <loop+0x1da>
            Serial.printf("Counted down hoe\n");
   b45c4:	f000 fca4 	bl	b4f10 <_Z16_fetch_usbserialv>
   b45c8:	4913      	ldr	r1, [pc, #76]	; (b4618 <loop+0x224>)
   b45ca:	f7ff fd6e 	bl	b40aa <_ZN5Print6printfEPKcz>
        }
    }
}
   b45ce:	b007      	add	sp, #28
   b45d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b45d4:	2003e6a4 	.word	0x2003e6a4
   b45d8:	2003e69c 	.word	0x2003e69c
   b45dc:	000b569c 	.word	0x000b569c
   b45e0:	000b5682 	.word	0x000b5682
   b45e4:	2003e65c 	.word	0x2003e65c
   b45e8:	2003e68c 	.word	0x2003e68c
   b45ec:	2003e66c 	.word	0x2003e66c
   b45f0:	2003e664 	.word	0x2003e664
   b45f4:	2003e660 	.word	0x2003e660
   b45f8:	42c80000 	.word	0x42c80000
   b45fc:	42a00000 	.word	0x42a00000
   b4600:	000b56ad 	.word	0x000b56ad
   b4604:	2003e694 	.word	0x2003e694
   b4608:	000b56be 	.word	0x000b56be
   b460c:	2003e5df 	.word	0x2003e5df
   b4610:	000b56c3 	.word	0x000b56c3
   b4614:	2003e5dc 	.word	0x2003e5dc
   b4618:	000b56d3 	.word	0x000b56d3
   b461c:	2003e668 	.word	0x2003e668

000b4620 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4620:	4b11      	ldr	r3, [pc, #68]	; (b4668 <_GLOBAL__sub_I_SystemMode+0x48>)
    SleepResult() {}
   b4622:	4a12      	ldr	r2, [pc, #72]	; (b466c <_GLOBAL__sub_I_SystemMode+0x4c>)
   b4624:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4626:	2500      	movs	r5, #0
    SleepResult() {}
   b4628:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b462a:	e9c3 5500 	strd	r5, r5, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b462e:	2002      	movs	r0, #2
   b4630:	f000 f94e 	bl	b48d0 <set_system_mode>
        en = enablePin;
   b4634:	4b0e      	ldr	r3, [pc, #56]	; (b4670 <_GLOBAL__sub_I_SystemMode+0x50>)
    ProgramController(Multiplexer *myMulp) {
   b4636:	4c0f      	ldr	r4, [pc, #60]	; (b4674 <_GLOBAL__sub_I_SystemMode+0x54>)
   b4638:	2206      	movs	r2, #6
   b463a:	701a      	strb	r2, [r3, #0]
        s0 = select0Pin;
   b463c:	2202      	movs	r2, #2
   b463e:	705a      	strb	r2, [r3, #1]
        s2 = select2Pin;
   b4640:	2204      	movs	r2, #4
   b4642:	70da      	strb	r2, [r3, #3]
        s3 = select3Pin;
   b4644:	2205      	movs	r2, #5
   b4646:	711a      	strb	r2, [r3, #4]
        s1 = select1Pin;
   b4648:	2603      	movs	r6, #3
        sig = signalPin;
   b464a:	2213      	movs	r2, #19
   b464c:	715a      	strb	r2, [r3, #5]
        s1 = select1Pin;
   b464e:	709e      	strb	r6, [r3, #2]
        allSigns = new MultiplexerCollection[HAND_POS_COUNT];
   b4650:	2028      	movs	r0, #40	; 0x28
        this->myMulp = myMulp;
   b4652:	6063      	str	r3, [r4, #4]
    ProgramController(Multiplexer *myMulp) {
   b4654:	7225      	strb	r5, [r4, #8]
        allSigns = new MultiplexerCollection[HAND_POS_COUNT];
   b4656:	f7ff fd1c 	bl	b4092 <_Znaj>
        this->length = length;
   b465a:	4b07      	ldr	r3, [pc, #28]	; (b4678 <_GLOBAL__sub_I_SystemMode+0x58>)
        poses = pos;
   b465c:	4a07      	ldr	r2, [pc, #28]	; (b467c <_GLOBAL__sub_I_SystemMode+0x5c>)
        this->length = length;
   b465e:	605e      	str	r6, [r3, #4]
        poses = pos;
   b4660:	601a      	str	r2, [r3, #0]
   b4662:	6020      	str	r0, [r4, #0]
   b4664:	bd70      	pop	{r4, r5, r6, pc}
   b4666:	bf00      	nop
   b4668:	2003e650 	.word	0x2003e650
   b466c:	ffff0000 	.word	0xffff0000
   b4670:	2003e69c 	.word	0x2003e69c
   b4674:	2003e6a4 	.word	0x2003e6a4
   b4678:	2003e694 	.word	0x2003e694
   b467c:	2003e690 	.word	0x2003e690

000b4680 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <netdb_freeaddrinfo+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	689b      	ldr	r3, [r3, #8]
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	00030268 	.word	0x00030268

000b4690 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <netdb_getaddrinfo+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	68db      	ldr	r3, [r3, #12]
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	00030268 	.word	0x00030268

000b46a0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <HAL_Validate_Pin_Function+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	685b      	ldr	r3, [r3, #4]
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	0003022c 	.word	0x0003022c

000b46b0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <HAL_Pin_Mode+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	689b      	ldr	r3, [r3, #8]
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	0003022c 	.word	0x0003022c

000b46c0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <HAL_Get_Pin_Mode+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	68db      	ldr	r3, [r3, #12]
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	0003022c 	.word	0x0003022c

000b46d0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <HAL_GPIO_Write+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	691b      	ldr	r3, [r3, #16]
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	0003022c 	.word	0x0003022c

000b46e0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b46e0:	b508      	push	{r3, lr}
   b46e2:	4b02      	ldr	r3, [pc, #8]	; (b46ec <hal_adc_read+0xc>)
   b46e4:	681b      	ldr	r3, [r3, #0]
   b46e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	bd08      	pop	{r3, pc}
   b46ec:	0003022c 	.word	0x0003022c

000b46f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b46f0:	b508      	push	{r3, lr}
   b46f2:	4b02      	ldr	r3, [pc, #8]	; (b46fc <HAL_RNG_GetRandomNumber+0xc>)
   b46f4:	681b      	ldr	r3, [r3, #0]
   b46f6:	685b      	ldr	r3, [r3, #4]
   b46f8:	9301      	str	r3, [sp, #4]
   b46fa:	bd08      	pop	{r3, pc}
   b46fc:	00030218 	.word	0x00030218

000b4700 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4700:	b508      	push	{r3, lr}
   b4702:	4b02      	ldr	r3, [pc, #8]	; (b470c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4704:	681b      	ldr	r3, [r3, #0]
   b4706:	695b      	ldr	r3, [r3, #20]
   b4708:	9301      	str	r3, [sp, #4]
   b470a:	bd08      	pop	{r3, pc}
   b470c:	00030218 	.word	0x00030218

000b4710 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b4710:	b508      	push	{r3, lr}
   b4712:	4b02      	ldr	r3, [pc, #8]	; (b471c <HAL_EEPROM_Init+0xc>)
   b4714:	681b      	ldr	r3, [r3, #0]
   b4716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4718:	9301      	str	r3, [sp, #4]
   b471a:	bd08      	pop	{r3, pc}
   b471c:	00030218 	.word	0x00030218

000b4720 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b4720:	b508      	push	{r3, lr}
   b4722:	4b02      	ldr	r3, [pc, #8]	; (b472c <HAL_EEPROM_Read+0xc>)
   b4724:	681b      	ldr	r3, [r3, #0]
   b4726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4728:	9301      	str	r3, [sp, #4]
   b472a:	bd08      	pop	{r3, pc}
   b472c:	00030218 	.word	0x00030218

000b4730 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   b4730:	b508      	push	{r3, lr}
   b4732:	4b02      	ldr	r3, [pc, #8]	; (b473c <HAL_EEPROM_Write+0xc>)
   b4734:	681b      	ldr	r3, [r3, #0]
   b4736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4738:	9301      	str	r3, [sp, #4]
   b473a:	bd08      	pop	{r3, pc}
   b473c:	00030218 	.word	0x00030218

000b4740 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4740:	b508      	push	{r3, lr}
   b4742:	4b02      	ldr	r3, [pc, #8]	; (b474c <os_mutex_recursive_create+0xc>)
   b4744:	681b      	ldr	r3, [r3, #0]
   b4746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4748:	9301      	str	r3, [sp, #4]
   b474a:	bd08      	pop	{r3, pc}
   b474c:	00030248 	.word	0x00030248

000b4750 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4750:	b508      	push	{r3, lr}
   b4752:	4b02      	ldr	r3, [pc, #8]	; (b475c <inet_inet_ntop+0xc>)
   b4754:	681b      	ldr	r3, [r3, #0]
   b4756:	695b      	ldr	r3, [r3, #20]
   b4758:	9301      	str	r3, [sp, #4]
   b475a:	bd08      	pop	{r3, pc}
   b475c:	00030264 	.word	0x00030264

000b4760 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4760:	b508      	push	{r3, lr}
   b4762:	4b02      	ldr	r3, [pc, #8]	; (b476c <hal_usart_write+0xc>)
   b4764:	681b      	ldr	r3, [r3, #0]
   b4766:	68db      	ldr	r3, [r3, #12]
   b4768:	9301      	str	r3, [sp, #4]
   b476a:	bd08      	pop	{r3, pc}
   b476c:	0003023c 	.word	0x0003023c

000b4770 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4770:	b508      	push	{r3, lr}
   b4772:	4b02      	ldr	r3, [pc, #8]	; (b477c <hal_usart_available+0xc>)
   b4774:	681b      	ldr	r3, [r3, #0]
   b4776:	691b      	ldr	r3, [r3, #16]
   b4778:	9301      	str	r3, [sp, #4]
   b477a:	bd08      	pop	{r3, pc}
   b477c:	0003023c 	.word	0x0003023c

000b4780 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4780:	b508      	push	{r3, lr}
   b4782:	4b02      	ldr	r3, [pc, #8]	; (b478c <hal_usart_read+0xc>)
   b4784:	681b      	ldr	r3, [r3, #0]
   b4786:	695b      	ldr	r3, [r3, #20]
   b4788:	9301      	str	r3, [sp, #4]
   b478a:	bd08      	pop	{r3, pc}
   b478c:	0003023c 	.word	0x0003023c

000b4790 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4790:	b508      	push	{r3, lr}
   b4792:	4b02      	ldr	r3, [pc, #8]	; (b479c <hal_usart_peek+0xc>)
   b4794:	681b      	ldr	r3, [r3, #0]
   b4796:	699b      	ldr	r3, [r3, #24]
   b4798:	9301      	str	r3, [sp, #4]
   b479a:	bd08      	pop	{r3, pc}
   b479c:	0003023c 	.word	0x0003023c

000b47a0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b47a0:	b508      	push	{r3, lr}
   b47a2:	4b02      	ldr	r3, [pc, #8]	; (b47ac <hal_usart_flush+0xc>)
   b47a4:	681b      	ldr	r3, [r3, #0]
   b47a6:	69db      	ldr	r3, [r3, #28]
   b47a8:	9301      	str	r3, [sp, #4]
   b47aa:	bd08      	pop	{r3, pc}
   b47ac:	0003023c 	.word	0x0003023c

000b47b0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b47b0:	b508      	push	{r3, lr}
   b47b2:	4b02      	ldr	r3, [pc, #8]	; (b47bc <hal_usart_is_enabled+0xc>)
   b47b4:	681b      	ldr	r3, [r3, #0]
   b47b6:	6a1b      	ldr	r3, [r3, #32]
   b47b8:	9301      	str	r3, [sp, #4]
   b47ba:	bd08      	pop	{r3, pc}
   b47bc:	0003023c 	.word	0x0003023c

000b47c0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b47c0:	b508      	push	{r3, lr}
   b47c2:	4b02      	ldr	r3, [pc, #8]	; (b47cc <hal_usart_available_data_for_write+0xc>)
   b47c4:	681b      	ldr	r3, [r3, #0]
   b47c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b47c8:	9301      	str	r3, [sp, #4]
   b47ca:	bd08      	pop	{r3, pc}
   b47cc:	0003023c 	.word	0x0003023c

000b47d0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b47d0:	b508      	push	{r3, lr}
   b47d2:	4b02      	ldr	r3, [pc, #8]	; (b47dc <hal_usart_init_ex+0xc>)
   b47d4:	681b      	ldr	r3, [r3, #0]
   b47d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47d8:	9301      	str	r3, [sp, #4]
   b47da:	bd08      	pop	{r3, pc}
   b47dc:	0003023c 	.word	0x0003023c

000b47e0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b47e0:	b508      	push	{r3, lr}
   b47e2:	4b02      	ldr	r3, [pc, #8]	; (b47ec <hal_i2c_write+0xc>)
   b47e4:	681b      	ldr	r3, [r3, #0]
   b47e6:	6a1b      	ldr	r3, [r3, #32]
   b47e8:	9301      	str	r3, [sp, #4]
   b47ea:	bd08      	pop	{r3, pc}
   b47ec:	00030228 	.word	0x00030228

000b47f0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b47f0:	b508      	push	{r3, lr}
   b47f2:	4b02      	ldr	r3, [pc, #8]	; (b47fc <hal_i2c_available+0xc>)
   b47f4:	681b      	ldr	r3, [r3, #0]
   b47f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47f8:	9301      	str	r3, [sp, #4]
   b47fa:	bd08      	pop	{r3, pc}
   b47fc:	00030228 	.word	0x00030228

000b4800 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4800:	b508      	push	{r3, lr}
   b4802:	4b02      	ldr	r3, [pc, #8]	; (b480c <hal_i2c_read+0xc>)
   b4804:	681b      	ldr	r3, [r3, #0]
   b4806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4808:	9301      	str	r3, [sp, #4]
   b480a:	bd08      	pop	{r3, pc}
   b480c:	00030228 	.word	0x00030228

000b4810 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4810:	b508      	push	{r3, lr}
   b4812:	4b02      	ldr	r3, [pc, #8]	; (b481c <hal_i2c_peek+0xc>)
   b4814:	681b      	ldr	r3, [r3, #0]
   b4816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4818:	9301      	str	r3, [sp, #4]
   b481a:	bd08      	pop	{r3, pc}
   b481c:	00030228 	.word	0x00030228

000b4820 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4820:	b508      	push	{r3, lr}
   b4822:	4b02      	ldr	r3, [pc, #8]	; (b482c <hal_i2c_flush+0xc>)
   b4824:	681b      	ldr	r3, [r3, #0]
   b4826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4828:	9301      	str	r3, [sp, #4]
   b482a:	bd08      	pop	{r3, pc}
   b482c:	00030228 	.word	0x00030228

000b4830 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4830:	b508      	push	{r3, lr}
   b4832:	4b02      	ldr	r3, [pc, #8]	; (b483c <hal_i2c_is_enabled+0xc>)
   b4834:	681b      	ldr	r3, [r3, #0]
   b4836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4838:	9301      	str	r3, [sp, #4]
   b483a:	bd08      	pop	{r3, pc}
   b483c:	00030228 	.word	0x00030228

000b4840 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4840:	b508      	push	{r3, lr}
   b4842:	4b02      	ldr	r3, [pc, #8]	; (b484c <hal_i2c_init+0xc>)
   b4844:	681b      	ldr	r3, [r3, #0]
   b4846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4848:	9301      	str	r3, [sp, #4]
   b484a:	bd08      	pop	{r3, pc}
   b484c:	00030228 	.word	0x00030228

000b4850 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4850:	b508      	push	{r3, lr}
   b4852:	4b02      	ldr	r3, [pc, #8]	; (b485c <hal_spi_init+0xc>)
   b4854:	681b      	ldr	r3, [r3, #0]
   b4856:	69db      	ldr	r3, [r3, #28]
   b4858:	9301      	str	r3, [sp, #4]
   b485a:	bd08      	pop	{r3, pc}
   b485c:	00030230 	.word	0x00030230

000b4860 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b02      	ldr	r3, [pc, #8]	; (b486c <hal_spi_is_enabled+0xc>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	6a1b      	ldr	r3, [r3, #32]
   b4868:	9301      	str	r3, [sp, #4]
   b486a:	bd08      	pop	{r3, pc}
   b486c:	00030230 	.word	0x00030230

000b4870 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4870:	b508      	push	{r3, lr}
   b4872:	4b02      	ldr	r3, [pc, #8]	; (b487c <HAL_USB_USART_Init+0xc>)
   b4874:	681b      	ldr	r3, [r3, #0]
   b4876:	681b      	ldr	r3, [r3, #0]
   b4878:	9301      	str	r3, [sp, #4]
   b487a:	bd08      	pop	{r3, pc}
   b487c:	0003024c 	.word	0x0003024c

000b4880 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4880:	b508      	push	{r3, lr}
   b4882:	4b02      	ldr	r3, [pc, #8]	; (b488c <HAL_USB_USART_Available_Data+0xc>)
   b4884:	681b      	ldr	r3, [r3, #0]
   b4886:	691b      	ldr	r3, [r3, #16]
   b4888:	9301      	str	r3, [sp, #4]
   b488a:	bd08      	pop	{r3, pc}
   b488c:	0003024c 	.word	0x0003024c

000b4890 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	695b      	ldr	r3, [r3, #20]
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	0003024c 	.word	0x0003024c

000b48a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <HAL_USB_USART_Receive_Data+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	699b      	ldr	r3, [r3, #24]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	0003024c 	.word	0x0003024c

000b48b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <HAL_USB_USART_Send_Data+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	69db      	ldr	r3, [r3, #28]
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	0003024c 	.word	0x0003024c

000b48c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <HAL_USB_USART_Flush_Data+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	6a1b      	ldr	r3, [r3, #32]
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	0003024c 	.word	0x0003024c

000b48d0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <set_system_mode+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	685b      	ldr	r3, [r3, #4]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	00030220 	.word	0x00030220

000b48e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b03      	ldr	r3, [pc, #12]	; (b48f0 <system_ctrl_set_app_request_handler+0x10>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b48ea:	9301      	str	r3, [sp, #4]
   b48ec:	bd08      	pop	{r3, pc}
   b48ee:	0000      	.short	0x0000
   b48f0:	00030220 	.word	0x00030220

000b48f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b03      	ldr	r3, [pc, #12]	; (b4904 <system_ctrl_set_result+0x10>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b48fe:	9301      	str	r3, [sp, #4]
   b4900:	bd08      	pop	{r3, pc}
   b4902:	0000      	.short	0x0000
   b4904:	00030220 	.word	0x00030220

000b4908 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <network_connect+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	685b      	ldr	r3, [r3, #4]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030240 	.word	0x00030240

000b4918 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <network_connecting+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	689b      	ldr	r3, [r3, #8]
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	00030240 	.word	0x00030240

000b4928 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <network_disconnect+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	68db      	ldr	r3, [r3, #12]
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	00030240 	.word	0x00030240

000b4938 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <network_ready+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	691b      	ldr	r3, [r3, #16]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	00030240 	.word	0x00030240

000b4948 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <network_on+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	695b      	ldr	r3, [r3, #20]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	00030240 	.word	0x00030240

000b4958 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <network_off+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	699b      	ldr	r3, [r3, #24]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	00030240 	.word	0x00030240

000b4968 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <network_listen+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	69db      	ldr	r3, [r3, #28]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	00030240 	.word	0x00030240

000b4978 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <network_listening+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	6a1b      	ldr	r3, [r3, #32]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	00030240 	.word	0x00030240

000b4988 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <network_set_listen_timeout+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	00030240 	.word	0x00030240

000b4998 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <network_get_listen_timeout+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	00030240 	.word	0x00030240

000b49a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <network_is_on+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030240 	.word	0x00030240

000b49b8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <network_is_off+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	00030240 	.word	0x00030240

000b49c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030244 	.word	0x00030244

000b49d8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <malloc+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	681b      	ldr	r3, [r3, #0]
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	0003021c 	.word	0x0003021c

000b49e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <free+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	685b      	ldr	r3, [r3, #4]
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	0003021c 	.word	0x0003021c

000b49f8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <vsnprintf+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	0003021c 	.word	0x0003021c

000b4a08 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <__assert_func+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	0003021c 	.word	0x0003021c

000b4a18 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <newlib_impure_ptr_callback+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	0003021c 	.word	0x0003021c

000b4a28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4a28:	2200      	movs	r2, #0
   b4a2a:	6840      	ldr	r0, [r0, #4]
   b4a2c:	4611      	mov	r1, r2
   b4a2e:	f7ff bfa3 	b.w	b4978 <network_listening>

000b4a32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4a32:	2200      	movs	r2, #0
   b4a34:	6840      	ldr	r0, [r0, #4]
   b4a36:	4611      	mov	r1, r2
   b4a38:	f7ff bfae 	b.w	b4998 <network_get_listen_timeout>

000b4a3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4a3c:	6840      	ldr	r0, [r0, #4]
   b4a3e:	2200      	movs	r2, #0
   b4a40:	f7ff bfa2 	b.w	b4988 <network_set_listen_timeout>

000b4a44 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4a44:	6840      	ldr	r0, [r0, #4]
   b4a46:	2200      	movs	r2, #0
   b4a48:	f081 0101 	eor.w	r1, r1, #1
   b4a4c:	f7ff bf8c 	b.w	b4968 <network_listen>

000b4a50 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4a50:	2300      	movs	r3, #0
   b4a52:	6840      	ldr	r0, [r0, #4]
   b4a54:	461a      	mov	r2, r3
   b4a56:	4619      	mov	r1, r3
   b4a58:	f7ff bf7e 	b.w	b4958 <network_off>

000b4a5c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4a5c:	2300      	movs	r3, #0
   b4a5e:	6840      	ldr	r0, [r0, #4]
   b4a60:	461a      	mov	r2, r3
   b4a62:	4619      	mov	r1, r3
   b4a64:	f7ff bf70 	b.w	b4948 <network_on>

000b4a68 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4a68:	2200      	movs	r2, #0
   b4a6a:	6840      	ldr	r0, [r0, #4]
   b4a6c:	4611      	mov	r1, r2
   b4a6e:	f7ff bf63 	b.w	b4938 <network_ready>

000b4a72 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4a72:	2200      	movs	r2, #0
   b4a74:	6840      	ldr	r0, [r0, #4]
   b4a76:	4611      	mov	r1, r2
   b4a78:	f7ff bf4e 	b.w	b4918 <network_connecting>

000b4a7c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4a7c:	6840      	ldr	r0, [r0, #4]
   b4a7e:	2200      	movs	r2, #0
   b4a80:	2102      	movs	r1, #2
   b4a82:	f7ff bf51 	b.w	b4928 <network_disconnect>

000b4a86 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4a86:	2300      	movs	r3, #0
   b4a88:	6840      	ldr	r0, [r0, #4]
   b4a8a:	461a      	mov	r2, r3
   b4a8c:	f7ff bf3c 	b.w	b4908 <network_connect>

000b4a90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4a90:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4a92:	2203      	movs	r2, #3
   b4a94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4a96:	4a02      	ldr	r2, [pc, #8]	; (b4aa0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4a98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4a9a:	4770      	bx	lr
   b4a9c:	2003e6b0 	.word	0x2003e6b0
   b4aa0:	000b56f0 	.word	0x000b56f0

000b4aa4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4aa4:	b510      	push	{r4, lr}
   b4aa6:	4604      	mov	r4, r0
   b4aa8:	4608      	mov	r0, r1
{
    _spi = spi;
   b4aaa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4aac:	f7ff fed0 	bl	b4850 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4ab0:	2300      	movs	r3, #0
   b4ab2:	6063      	str	r3, [r4, #4]
}
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	bd10      	pop	{r4, pc}

000b4ab8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4ab8:	4b05      	ldr	r3, [pc, #20]	; (b4ad0 <_GLOBAL__sub_I_System+0x18>)
   b4aba:	2202      	movs	r2, #2
   b4abc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4abe:	4b05      	ldr	r3, [pc, #20]	; (b4ad4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4ac0:	4a05      	ldr	r2, [pc, #20]	; (b4ad8 <_GLOBAL__sub_I_System+0x20>)
   b4ac2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ac4:	2000      	movs	r0, #0
   b4ac6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4aca:	f7ff bf01 	b.w	b48d0 <set_system_mode>
   b4ace:	bf00      	nop
   b4ad0:	2003e6c4 	.word	0x2003e6c4
   b4ad4:	2003e6b8 	.word	0x2003e6b8
   b4ad8:	ffff0000 	.word	0xffff0000

000b4adc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4adc:	4802      	ldr	r0, [pc, #8]	; (b4ae8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4ade:	2300      	movs	r3, #0
   b4ae0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4ae2:	f7ff be2d 	b.w	b4740 <os_mutex_recursive_create>
   b4ae6:	bf00      	nop
   b4ae8:	2003e6c8 	.word	0x2003e6c8

000b4aec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4aee:	4606      	mov	r6, r0
   b4af0:	460d      	mov	r5, r1
  size_t n = 0;
   b4af2:	188f      	adds	r7, r1, r2
   b4af4:	2400      	movs	r4, #0
  while (size--) {
   b4af6:	42bd      	cmp	r5, r7
   b4af8:	d00c      	beq.n	b4b14 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4afa:	6833      	ldr	r3, [r6, #0]
   b4afc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4b00:	689b      	ldr	r3, [r3, #8]
   b4b02:	4630      	mov	r0, r6
   b4b04:	4798      	blx	r3
     if (chunk>=0)
   b4b06:	1e03      	subs	r3, r0, #0
   b4b08:	db01      	blt.n	b4b0e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4b0a:	441c      	add	r4, r3
  while (size--) {
   b4b0c:	e7f3      	b.n	b4af6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4b0e:	2c00      	cmp	r4, #0
   b4b10:	bf08      	it	eq
   b4b12:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4b14:	4620      	mov	r0, r4
   b4b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b18 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4b18:	b513      	push	{r0, r1, r4, lr}
   b4b1a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4b1c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4b1e:	b159      	cbz	r1, b4b38 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4b20:	9101      	str	r1, [sp, #4]
   b4b22:	f000 fcf1 	bl	b5508 <strlen>
   b4b26:	6823      	ldr	r3, [r4, #0]
   b4b28:	9901      	ldr	r1, [sp, #4]
   b4b2a:	68db      	ldr	r3, [r3, #12]
   b4b2c:	4602      	mov	r2, r0
   b4b2e:	4620      	mov	r0, r4
    }
   b4b30:	b002      	add	sp, #8
   b4b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4b36:	4718      	bx	r3
    }
   b4b38:	b002      	add	sp, #8
   b4b3a:	bd10      	pop	{r4, pc}

000b4b3c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4b3c:	6803      	ldr	r3, [r0, #0]
   b4b3e:	689b      	ldr	r3, [r3, #8]
   b4b40:	4718      	bx	r3

000b4b42 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4b42:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4b44:	210d      	movs	r1, #13
{
   b4b46:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4b48:	f7ff fff8 	bl	b4b3c <_ZN5Print5printEc>
  n += print('\n');
   b4b4c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4b4e:	4604      	mov	r4, r0
  n += print('\n');
   b4b50:	4628      	mov	r0, r5
   b4b52:	f7ff fff3 	bl	b4b3c <_ZN5Print5printEc>
  return n;
}
   b4b56:	4420      	add	r0, r4
   b4b58:	bd38      	pop	{r3, r4, r5, pc}

000b4b5a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4b5a:	b530      	push	{r4, r5, lr}
   b4b5c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4b5e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4b60:	2a01      	cmp	r2, #1
  *str = '\0';
   b4b62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4b66:	bf98      	it	ls
   b4b68:	220a      	movls	r2, #10
   b4b6a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4b6c:	460d      	mov	r5, r1
   b4b6e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4b72:	fb01 5312 	mls	r3, r1, r2, r5
   b4b76:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4b7a:	2b09      	cmp	r3, #9
   b4b7c:	bf94      	ite	ls
   b4b7e:	3330      	addls	r3, #48	; 0x30
   b4b80:	3337      	addhi	r3, #55	; 0x37
   b4b82:	b2db      	uxtb	r3, r3
  } while(n);
   b4b84:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4b86:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4b8a:	d9ef      	bls.n	b4b6c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4b8c:	4621      	mov	r1, r4
   b4b8e:	f7ff ffc3 	bl	b4b18 <_ZN5Print5writeEPKc>
}
   b4b92:	b00b      	add	sp, #44	; 0x2c
   b4b94:	bd30      	pop	{r4, r5, pc}

000b4b96 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4b9a:	b086      	sub	sp, #24
   b4b9c:	af00      	add	r7, sp, #0
   b4b9e:	4605      	mov	r5, r0
   b4ba0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4ba2:	1d38      	adds	r0, r7, #4
   b4ba4:	2114      	movs	r1, #20
{
   b4ba6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4ba8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4baa:	f7ff ff25 	bl	b49f8 <vsnprintf>

    if (n<bufsize)
   b4bae:	2813      	cmp	r0, #19
   b4bb0:	d80e      	bhi.n	b4bd0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4bb2:	1d39      	adds	r1, r7, #4
   b4bb4:	4628      	mov	r0, r5
   b4bb6:	f7ff ffaf 	bl	b4b18 <_ZN5Print5writeEPKc>
   b4bba:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4bbc:	b11e      	cbz	r6, b4bc6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4bbe:	4628      	mov	r0, r5
   b4bc0:	f7ff ffbf 	bl	b4b42 <_ZN5Print7printlnEv>
   b4bc4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4bc6:	4620      	mov	r0, r4
   b4bc8:	3718      	adds	r7, #24
   b4bca:	46bd      	mov	sp, r7
   b4bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4bd0:	f100 0308 	add.w	r3, r0, #8
   b4bd4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4bd8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4bda:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4bde:	4622      	mov	r2, r4
   b4be0:	1c41      	adds	r1, r0, #1
   b4be2:	683b      	ldr	r3, [r7, #0]
   b4be4:	4668      	mov	r0, sp
   b4be6:	f7ff ff07 	bl	b49f8 <vsnprintf>
  return write(str);
   b4bea:	4669      	mov	r1, sp
   b4bec:	4628      	mov	r0, r5
   b4bee:	f7ff ff93 	bl	b4b18 <_ZN5Print5writeEPKc>
   b4bf2:	4604      	mov	r4, r0
   b4bf4:	46c5      	mov	sp, r8
   b4bf6:	e7e1      	b.n	b4bbc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4bf8 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4bf8:	2300      	movs	r3, #0
   b4bfa:	6840      	ldr	r0, [r0, #4]
   b4bfc:	461a      	mov	r2, r3
   b4bfe:	4619      	mov	r1, r3
   b4c00:	f7ff bea2 	b.w	b4948 <network_on>

000b4c04 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4c04:	4b01      	ldr	r3, [pc, #4]	; (b4c0c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4c06:	4a02      	ldr	r2, [pc, #8]	; (b4c10 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4c08:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4c0a:	4770      	bx	lr
   b4c0c:	2003e6cc 	.word	0x2003e6cc
   b4c10:	000b5724 	.word	0x000b5724

000b4c14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4c14:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4c16:	681a      	ldr	r2, [r3, #0]
   b4c18:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4c1a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4c1c:	4770      	bx	lr
   b4c1e:	bf00      	nop
   b4c20:	2003e5e4 	.word	0x2003e5e4
   b4c24:	2003e6d0 	.word	0x2003e6d0

000b4c28 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4c28:	4b01      	ldr	r3, [pc, #4]	; (b4c30 <_GLOBAL__sub_I_RGB+0x8>)
   b4c2a:	2200      	movs	r2, #0
   b4c2c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4c2e:	4770      	bx	lr
   b4c30:	2003e6d4 	.word	0x2003e6d4

000b4c34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4c34:	4b01      	ldr	r3, [pc, #4]	; (b4c3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4c36:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4c38:	4770      	bx	lr
   b4c3a:	bf00      	nop
   b4c3c:	2003e5e8 	.word	0x2003e5e8

000b4c40 <serialEventRun>:
{
   b4c40:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4c42:	4b0b      	ldr	r3, [pc, #44]	; (b4c70 <serialEventRun+0x30>)
   b4c44:	b143      	cbz	r3, b4c58 <serialEventRun+0x18>
   b4c46:	f000 f963 	bl	b4f10 <_Z16_fetch_usbserialv>
   b4c4a:	6803      	ldr	r3, [r0, #0]
   b4c4c:	691b      	ldr	r3, [r3, #16]
   b4c4e:	4798      	blx	r3
   b4c50:	2800      	cmp	r0, #0
   b4c52:	dd01      	ble.n	b4c58 <serialEventRun+0x18>
        serialEvent();
   b4c54:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4c58:	4b06      	ldr	r3, [pc, #24]	; (b4c74 <serialEventRun+0x34>)
   b4c5a:	b143      	cbz	r3, b4c6e <serialEventRun+0x2e>
   b4c5c:	f000 fb92 	bl	b5384 <_Z22__fetch_global_Serial1v>
   b4c60:	6803      	ldr	r3, [r0, #0]
   b4c62:	691b      	ldr	r3, [r3, #16]
   b4c64:	4798      	blx	r3
   b4c66:	2800      	cmp	r0, #0
   b4c68:	dd01      	ble.n	b4c6e <serialEventRun+0x2e>
        serialEvent1();
   b4c6a:	f3af 8000 	nop.w
}
   b4c6e:	bd08      	pop	{r3, pc}
	...

000b4c78 <_post_loop>:
{
   b4c78:	b508      	push	{r3, lr}
	serialEventRun();
   b4c7a:	f7ff ffe1 	bl	b4c40 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4c7e:	f7ff fd3f 	bl	b4700 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4c82:	4b01      	ldr	r3, [pc, #4]	; (b4c88 <_post_loop+0x10>)
   b4c84:	6018      	str	r0, [r3, #0]
}
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	2003e738 	.word	0x2003e738

000b4c8c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c8c:	4805      	ldr	r0, [pc, #20]	; (b4ca4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4c8e:	4a06      	ldr	r2, [pc, #24]	; (b4ca8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4c90:	4906      	ldr	r1, [pc, #24]	; (b4cac <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4c92:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c94:	1a12      	subs	r2, r2, r0
   b4c96:	f000 fbf3 	bl	b5480 <memcpy>
    __backup_sram_signature = signature;
   b4c9a:	4b05      	ldr	r3, [pc, #20]	; (b4cb0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4c9c:	4a05      	ldr	r2, [pc, #20]	; (b4cb4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4c9e:	601a      	str	r2, [r3, #0]
}
   b4ca0:	bd08      	pop	{r3, pc}
   b4ca2:	bf00      	nop
   b4ca4:	2003f400 	.word	0x2003f400
   b4ca8:	2003f404 	.word	0x2003f404
   b4cac:	000b5920 	.word	0x000b5920
   b4cb0:	2003f400 	.word	0x2003f400
   b4cb4:	9a271c1e 	.word	0x9a271c1e

000b4cb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4cb8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4cba:	2300      	movs	r3, #0
   b4cbc:	9300      	str	r3, [sp, #0]
   b4cbe:	461a      	mov	r2, r3
   b4cc0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4cc4:	f7ff fe16 	bl	b48f4 <system_ctrl_set_result>
}
   b4cc8:	b003      	add	sp, #12
   b4cca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4cd0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4cd0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4cd2:	8843      	ldrh	r3, [r0, #2]
   b4cd4:	2b0a      	cmp	r3, #10
   b4cd6:	d008      	beq.n	b4cea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4cd8:	2b50      	cmp	r3, #80	; 0x50
   b4cda:	d10b      	bne.n	b4cf4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4cdc:	4b09      	ldr	r3, [pc, #36]	; (b4d04 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4cde:	681b      	ldr	r3, [r3, #0]
   b4ce0:	b14b      	cbz	r3, b4cf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4ce2:	b003      	add	sp, #12
   b4ce4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4ce8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4cea:	f7ff ffe5 	bl	b4cb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4cee:	b003      	add	sp, #12
   b4cf0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4cf4:	2300      	movs	r3, #0
   b4cf6:	9300      	str	r3, [sp, #0]
   b4cf8:	461a      	mov	r2, r3
   b4cfa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4cfe:	f7ff fdf9 	bl	b48f4 <system_ctrl_set_result>
}
   b4d02:	e7f4      	b.n	b4cee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4d04:	2003e6e8 	.word	0x2003e6e8

000b4d08 <module_user_init_hook>:
{
   b4d08:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4d0a:	4812      	ldr	r0, [pc, #72]	; (b4d54 <module_user_init_hook+0x4c>)
   b4d0c:	2100      	movs	r1, #0
   b4d0e:	f7ff fe83 	bl	b4a18 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4d12:	4b11      	ldr	r3, [pc, #68]	; (b4d58 <module_user_init_hook+0x50>)
   b4d14:	681a      	ldr	r2, [r3, #0]
   b4d16:	4b11      	ldr	r3, [pc, #68]	; (b4d5c <module_user_init_hook+0x54>)
   b4d18:	429a      	cmp	r2, r3
   b4d1a:	4b11      	ldr	r3, [pc, #68]	; (b4d60 <module_user_init_hook+0x58>)
   b4d1c:	bf0c      	ite	eq
   b4d1e:	2201      	moveq	r2, #1
   b4d20:	2200      	movne	r2, #0
   b4d22:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4d24:	d001      	beq.n	b4d2a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4d26:	f7ff ffb1 	bl	b4c8c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4d2a:	f7ff fce1 	bl	b46f0 <HAL_RNG_GetRandomNumber>
   b4d2e:	4604      	mov	r4, r0
    srand(seed);
   b4d30:	f000 fbbc 	bl	b54ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4d34:	4b0b      	ldr	r3, [pc, #44]	; (b4d64 <module_user_init_hook+0x5c>)
   b4d36:	b113      	cbz	r3, b4d3e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4d38:	4620      	mov	r0, r4
   b4d3a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4d3e:	2100      	movs	r1, #0
   b4d40:	4808      	ldr	r0, [pc, #32]	; (b4d64 <module_user_init_hook+0x5c>)
   b4d42:	f7ff fe41 	bl	b49c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4d4a:	4807      	ldr	r0, [pc, #28]	; (b4d68 <module_user_init_hook+0x60>)
   b4d4c:	2100      	movs	r1, #0
   b4d4e:	f7ff bdc7 	b.w	b48e0 <system_ctrl_set_app_request_handler>
   b4d52:	bf00      	nop
   b4d54:	000b4c35 	.word	0x000b4c35
   b4d58:	2003f400 	.word	0x2003f400
   b4d5c:	9a271c1e 	.word	0x9a271c1e
   b4d60:	2003e6e4 	.word	0x2003e6e4
   b4d64:	00000000 	.word	0x00000000
   b4d68:	000b4cd1 	.word	0x000b4cd1

000b4d6c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4d6c:	4770      	bx	lr

000b4d6e <_ZN9IPAddressD0Ev>:
   b4d6e:	b510      	push	{r4, lr}
   b4d70:	2118      	movs	r1, #24
   b4d72:	4604      	mov	r4, r0
   b4d74:	f7ff f98f 	bl	b4096 <_ZdlPvj>
   b4d78:	4620      	mov	r0, r4
   b4d7a:	bd10      	pop	{r4, pc}

000b4d7c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4d7e:	7d03      	ldrb	r3, [r0, #20]
   b4d80:	2b06      	cmp	r3, #6
{
   b4d82:	b08d      	sub	sp, #52	; 0x34
   b4d84:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d86:	f100 0704 	add.w	r7, r0, #4
   b4d8a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4d8e:	d012      	beq.n	b4db6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4d90:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4d94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4d98:	220a      	movs	r2, #10
   b4d9a:	4630      	mov	r0, r6
   b4d9c:	f7ff fedd 	bl	b4b5a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4da0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4da2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4da4:	d019      	beq.n	b4dda <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4da6:	2c00      	cmp	r4, #0
   b4da8:	d0f4      	beq.n	b4d94 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4daa:	212e      	movs	r1, #46	; 0x2e
   b4dac:	4630      	mov	r0, r6
   b4dae:	f7ff fec5 	bl	b4b3c <_ZN5Print5printEc>
   b4db2:	4404      	add	r4, r0
   b4db4:	e7ee      	b.n	b4d94 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4db6:	232f      	movs	r3, #47	; 0x2f
   b4db8:	466a      	mov	r2, sp
   b4dba:	4639      	mov	r1, r7
   b4dbc:	200a      	movs	r0, #10
		buf[0] = 0;
   b4dbe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4dc2:	f7ff fcc5 	bl	b4750 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4dc6:	4668      	mov	r0, sp
   b4dc8:	f000 fb9e 	bl	b5508 <strlen>
   b4dcc:	6833      	ldr	r3, [r6, #0]
   b4dce:	4602      	mov	r2, r0
   b4dd0:	68db      	ldr	r3, [r3, #12]
   b4dd2:	4669      	mov	r1, sp
   b4dd4:	4630      	mov	r0, r6
   b4dd6:	4798      	blx	r3
   b4dd8:	4604      	mov	r4, r0
    }
    return n;
}
   b4dda:	4620      	mov	r0, r4
   b4ddc:	b00d      	add	sp, #52	; 0x34
   b4dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4de0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4de0:	b510      	push	{r4, lr}
   b4de2:	4b05      	ldr	r3, [pc, #20]	; (b4df8 <_ZN9IPAddressC1Ev+0x18>)
   b4de4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4de6:	2211      	movs	r2, #17
   b4de8:	f840 3b04 	str.w	r3, [r0], #4
   b4dec:	2100      	movs	r1, #0
   b4dee:	f000 fb55 	bl	b549c <memset>
}
   b4df2:	4620      	mov	r0, r4
   b4df4:	bd10      	pop	{r4, pc}
   b4df6:	bf00      	nop
   b4df8:	000b574c 	.word	0x000b574c

000b4dfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4dfc:	4603      	mov	r3, r0
   b4dfe:	4a07      	ldr	r2, [pc, #28]	; (b4e1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4e00:	b510      	push	{r4, lr}
   b4e02:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4e06:	f101 0210 	add.w	r2, r1, #16
   b4e0a:	f851 4b04 	ldr.w	r4, [r1], #4
   b4e0e:	f843 4b04 	str.w	r4, [r3], #4
   b4e12:	4291      	cmp	r1, r2
   b4e14:	d1f9      	bne.n	b4e0a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4e16:	780a      	ldrb	r2, [r1, #0]
   b4e18:	701a      	strb	r2, [r3, #0]
}
   b4e1a:	bd10      	pop	{r4, pc}
   b4e1c:	000b574c 	.word	0x000b574c

000b4e20 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4e20:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4e22:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4e26:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4e2a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4e2e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4e32:	2304      	movs	r3, #4
   b4e34:	6041      	str	r1, [r0, #4]
   b4e36:	7503      	strb	r3, [r0, #20]
}
   b4e38:	bd10      	pop	{r4, pc}
	...

000b4e3c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4e3c:	b507      	push	{r0, r1, r2, lr}
   b4e3e:	4b06      	ldr	r3, [pc, #24]	; (b4e58 <_ZN9IPAddressC1EPKh+0x1c>)
   b4e40:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4e42:	78cb      	ldrb	r3, [r1, #3]
   b4e44:	9300      	str	r3, [sp, #0]
   b4e46:	788b      	ldrb	r3, [r1, #2]
   b4e48:	784a      	ldrb	r2, [r1, #1]
   b4e4a:	7809      	ldrb	r1, [r1, #0]
   b4e4c:	f7ff ffe8 	bl	b4e20 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4e50:	b003      	add	sp, #12
   b4e52:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e56:	bf00      	nop
   b4e58:	000b574c 	.word	0x000b574c

000b4e5c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4e5c:	7441      	strb	r1, [r0, #17]
}
   b4e5e:	4770      	bx	lr

000b4e60 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4e60:	4770      	bx	lr

000b4e62 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4e62:	4770      	bx	lr

000b4e64 <_ZN9USBSerial4readEv>:
{
   b4e64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4e66:	2100      	movs	r1, #0
   b4e68:	7c00      	ldrb	r0, [r0, #16]
   b4e6a:	f7ff fd19 	bl	b48a0 <HAL_USB_USART_Receive_Data>
}
   b4e6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e72:	bd08      	pop	{r3, pc}

000b4e74 <_ZN9USBSerial4peekEv>:
{
   b4e74:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4e76:	2101      	movs	r1, #1
   b4e78:	7c00      	ldrb	r0, [r0, #16]
   b4e7a:	f7ff fd11 	bl	b48a0 <HAL_USB_USART_Receive_Data>
}
   b4e7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e82:	bd08      	pop	{r3, pc}

000b4e84 <_ZN9USBSerial17availableForWriteEv>:
{
   b4e84:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4e86:	7c00      	ldrb	r0, [r0, #16]
   b4e88:	f7ff fd02 	bl	b4890 <HAL_USB_USART_Available_Data_For_Write>
}
   b4e8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e90:	bd08      	pop	{r3, pc}

000b4e92 <_ZN9USBSerial9availableEv>:
{
   b4e92:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4e94:	7c00      	ldrb	r0, [r0, #16]
   b4e96:	f7ff fcf3 	bl	b4880 <HAL_USB_USART_Available_Data>
}
   b4e9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e9e:	bd08      	pop	{r3, pc}

000b4ea0 <_ZN9USBSerial5writeEh>:
{
   b4ea0:	b513      	push	{r0, r1, r4, lr}
   b4ea2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4ea4:	7c00      	ldrb	r0, [r0, #16]
{
   b4ea6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4ea8:	f7ff fcf2 	bl	b4890 <HAL_USB_USART_Available_Data_For_Write>
   b4eac:	2800      	cmp	r0, #0
   b4eae:	9901      	ldr	r1, [sp, #4]
   b4eb0:	dc01      	bgt.n	b4eb6 <_ZN9USBSerial5writeEh+0x16>
   b4eb2:	7c60      	ldrb	r0, [r4, #17]
   b4eb4:	b120      	cbz	r0, b4ec0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4eb6:	7c20      	ldrb	r0, [r4, #16]
   b4eb8:	f7ff fcfa 	bl	b48b0 <HAL_USB_USART_Send_Data>
   b4ebc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4ec0:	b002      	add	sp, #8
   b4ec2:	bd10      	pop	{r4, pc}

000b4ec4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4ec4:	7c00      	ldrb	r0, [r0, #16]
   b4ec6:	f7ff bcfb 	b.w	b48c0 <HAL_USB_USART_Flush_Data>

000b4eca <_ZN9USBSerialD0Ev>:
   b4eca:	b510      	push	{r4, lr}
   b4ecc:	2114      	movs	r1, #20
   b4ece:	4604      	mov	r4, r0
   b4ed0:	f7ff f8e1 	bl	b4096 <_ZdlPvj>
   b4ed4:	4620      	mov	r0, r4
   b4ed6:	bd10      	pop	{r4, pc}

000b4ed8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4ed8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4ede:	4604      	mov	r4, r0
   b4ee0:	4608      	mov	r0, r1
   b4ee2:	2100      	movs	r1, #0
   b4ee4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4ee8:	4b04      	ldr	r3, [pc, #16]	; (b4efc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4eea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4eec:	2301      	movs	r3, #1
  _serial = serial;
   b4eee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4ef0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4ef2:	4611      	mov	r1, r2
   b4ef4:	f7ff fcbc 	bl	b4870 <HAL_USB_USART_Init>
}
   b4ef8:	4620      	mov	r0, r4
   b4efa:	bd10      	pop	{r4, pc}
   b4efc:	000b5760 	.word	0x000b5760

000b4f00 <_Z19acquireSerialBufferv>:
{
   b4f00:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4f02:	2214      	movs	r2, #20
{
   b4f04:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4f06:	2100      	movs	r1, #0
   b4f08:	f000 fac8 	bl	b549c <memset>
}
   b4f0c:	4620      	mov	r0, r4
   b4f0e:	bd10      	pop	{r4, pc}

000b4f10 <_Z16_fetch_usbserialv>:
{
   b4f10:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f12:	4c0f      	ldr	r4, [pc, #60]	; (b4f50 <_Z16_fetch_usbserialv+0x40>)
{
   b4f14:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4f16:	a803      	add	r0, sp, #12
   b4f18:	f7ff fff2 	bl	b4f00 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f1c:	7821      	ldrb	r1, [r4, #0]
   b4f1e:	f3bf 8f5b 	dmb	ish
   b4f22:	f011 0101 	ands.w	r1, r1, #1
   b4f26:	d10f      	bne.n	b4f48 <_Z16_fetch_usbserialv+0x38>
   b4f28:	4620      	mov	r0, r4
   b4f2a:	9101      	str	r1, [sp, #4]
   b4f2c:	f7ff f8b5 	bl	b409a <__cxa_guard_acquire>
   b4f30:	9901      	ldr	r1, [sp, #4]
   b4f32:	b148      	cbz	r0, b4f48 <_Z16_fetch_usbserialv+0x38>
   b4f34:	aa03      	add	r2, sp, #12
   b4f36:	4807      	ldr	r0, [pc, #28]	; (b4f54 <_Z16_fetch_usbserialv+0x44>)
   b4f38:	f7ff ffce 	bl	b4ed8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4f3c:	4620      	mov	r0, r4
   b4f3e:	f7ff f8b1 	bl	b40a4 <__cxa_guard_release>
   b4f42:	4805      	ldr	r0, [pc, #20]	; (b4f58 <_Z16_fetch_usbserialv+0x48>)
   b4f44:	f000 fa96 	bl	b5474 <atexit>
	return _usbserial;
}
   b4f48:	4802      	ldr	r0, [pc, #8]	; (b4f54 <_Z16_fetch_usbserialv+0x44>)
   b4f4a:	b008      	add	sp, #32
   b4f4c:	bd10      	pop	{r4, pc}
   b4f4e:	bf00      	nop
   b4f50:	2003e6ec 	.word	0x2003e6ec
   b4f54:	2003e6f0 	.word	0x2003e6f0
   b4f58:	000b4e61 	.word	0x000b4e61

000b4f5c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4f5c:	4770      	bx	lr

000b4f5e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4f5e:	7441      	strb	r1, [r0, #17]
}
   b4f60:	4770      	bx	lr

000b4f62 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4f62:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4f64:	7c00      	ldrb	r0, [r0, #16]
   b4f66:	f7ff fc2b 	bl	b47c0 <hal_usart_available_data_for_write>
}
   b4f6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f6e:	bd08      	pop	{r3, pc}

000b4f70 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4f70:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4f72:	7c00      	ldrb	r0, [r0, #16]
   b4f74:	f7ff fbfc 	bl	b4770 <hal_usart_available>
}
   b4f78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f7c:	bd08      	pop	{r3, pc}

000b4f7e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4f7e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4f80:	7c00      	ldrb	r0, [r0, #16]
   b4f82:	f7ff fc05 	bl	b4790 <hal_usart_peek>
}
   b4f86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f8a:	bd08      	pop	{r3, pc}

000b4f8c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4f8c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4f8e:	7c00      	ldrb	r0, [r0, #16]
   b4f90:	f7ff fbf6 	bl	b4780 <hal_usart_read>
}
   b4f94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f98:	bd08      	pop	{r3, pc}

000b4f9a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4f9a:	7c00      	ldrb	r0, [r0, #16]
   b4f9c:	f7ff bc00 	b.w	b47a0 <hal_usart_flush>

000b4fa0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4fa2:	7c45      	ldrb	r5, [r0, #17]
{
   b4fa4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4fa6:	b12d      	cbz	r5, b4fb4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4fa8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4faa:	b003      	add	sp, #12
   b4fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4fb0:	f7ff bbd6 	b.w	b4760 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4fb4:	7c00      	ldrb	r0, [r0, #16]
   b4fb6:	9101      	str	r1, [sp, #4]
   b4fb8:	f7ff fc02 	bl	b47c0 <hal_usart_available_data_for_write>
   b4fbc:	2800      	cmp	r0, #0
   b4fbe:	9901      	ldr	r1, [sp, #4]
   b4fc0:	dcf2      	bgt.n	b4fa8 <_ZN11USARTSerial5writeEh+0x8>
}
   b4fc2:	4628      	mov	r0, r5
   b4fc4:	b003      	add	sp, #12
   b4fc6:	bd30      	pop	{r4, r5, pc}

000b4fc8 <_ZN11USARTSerialD0Ev>:
   b4fc8:	b510      	push	{r4, lr}
   b4fca:	2114      	movs	r1, #20
   b4fcc:	4604      	mov	r4, r0
   b4fce:	f7ff f862 	bl	b4096 <_ZdlPvj>
   b4fd2:	4620      	mov	r0, r4
   b4fd4:	bd10      	pop	{r4, pc}
	...

000b4fd8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4fd8:	b510      	push	{r4, lr}
   b4fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fde:	4604      	mov	r4, r0
   b4fe0:	4608      	mov	r0, r1
   b4fe2:	4611      	mov	r1, r2
   b4fe4:	2200      	movs	r2, #0
   b4fe6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4fea:	4b04      	ldr	r3, [pc, #16]	; (b4ffc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4fec:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4fee:	2301      	movs	r3, #1
  _serial = serial;
   b4ff0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4ff2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4ff4:	f7ff fbec 	bl	b47d0 <hal_usart_init_ex>
}
   b4ff8:	4620      	mov	r0, r4
   b4ffa:	bd10      	pop	{r4, pc}
   b4ffc:	000b5790 	.word	0x000b5790

000b5000 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5000:	4770      	bx	lr

000b5002 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5004:	4606      	mov	r6, r0
   b5006:	4615      	mov	r5, r2
   b5008:	460c      	mov	r4, r1
   b500a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b500c:	42bc      	cmp	r4, r7
   b500e:	d006      	beq.n	b501e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5010:	6833      	ldr	r3, [r6, #0]
   b5012:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5016:	689b      	ldr	r3, [r3, #8]
   b5018:	4630      	mov	r0, r6
   b501a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b501c:	e7f6      	b.n	b500c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b501e:	4628      	mov	r0, r5
   b5020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5022 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5022:	7c00      	ldrb	r0, [r0, #16]
   b5024:	2200      	movs	r2, #0
   b5026:	f7ff bbdb 	b.w	b47e0 <hal_i2c_write>

000b502a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b502a:	7c00      	ldrb	r0, [r0, #16]
   b502c:	2100      	movs	r1, #0
   b502e:	f7ff bbdf 	b.w	b47f0 <hal_i2c_available>

000b5032 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5032:	7c00      	ldrb	r0, [r0, #16]
   b5034:	2100      	movs	r1, #0
   b5036:	f7ff bbe3 	b.w	b4800 <hal_i2c_read>

000b503a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b503a:	7c00      	ldrb	r0, [r0, #16]
   b503c:	2100      	movs	r1, #0
   b503e:	f7ff bbe7 	b.w	b4810 <hal_i2c_peek>

000b5042 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5042:	7c00      	ldrb	r0, [r0, #16]
   b5044:	2100      	movs	r1, #0
   b5046:	f7ff bbeb 	b.w	b4820 <hal_i2c_flush>

000b504a <_ZN7TwoWireD0Ev>:
   b504a:	b510      	push	{r4, lr}
   b504c:	2114      	movs	r1, #20
   b504e:	4604      	mov	r4, r0
   b5050:	f7ff f821 	bl	b4096 <_ZdlPvj>
   b5054:	4620      	mov	r0, r4
   b5056:	bd10      	pop	{r4, pc}

000b5058 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5058:	b510      	push	{r4, lr}
   b505a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b505e:	4604      	mov	r4, r0
   b5060:	4608      	mov	r0, r1
   b5062:	2100      	movs	r1, #0
   b5064:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5068:	4b03      	ldr	r3, [pc, #12]	; (b5078 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b506a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b506c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b506e:	4611      	mov	r1, r2
   b5070:	f7ff fbe6 	bl	b4840 <hal_i2c_init>
}
   b5074:	4620      	mov	r0, r4
   b5076:	bd10      	pop	{r4, pc}
   b5078:	000b57c0 	.word	0x000b57c0

000b507c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b507c:	2200      	movs	r2, #0
   b507e:	6840      	ldr	r0, [r0, #4]
   b5080:	4611      	mov	r1, r2
   b5082:	f7ff bc59 	b.w	b4938 <network_ready>

000b5086 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5086:	2200      	movs	r2, #0
   b5088:	6840      	ldr	r0, [r0, #4]
   b508a:	4611      	mov	r1, r2
   b508c:	f7ff bc74 	b.w	b4978 <network_listening>

000b5090 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5090:	2200      	movs	r2, #0
   b5092:	6840      	ldr	r0, [r0, #4]
   b5094:	4611      	mov	r1, r2
   b5096:	f7ff bc7f 	b.w	b4998 <network_get_listen_timeout>

000b509a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b509a:	6840      	ldr	r0, [r0, #4]
   b509c:	2200      	movs	r2, #0
   b509e:	f7ff bc73 	b.w	b4988 <network_set_listen_timeout>

000b50a2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b50a2:	6840      	ldr	r0, [r0, #4]
   b50a4:	2200      	movs	r2, #0
   b50a6:	f081 0101 	eor.w	r1, r1, #1
   b50aa:	f7ff bc5d 	b.w	b4968 <network_listen>

000b50ae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b50ae:	2300      	movs	r3, #0
   b50b0:	6840      	ldr	r0, [r0, #4]
   b50b2:	461a      	mov	r2, r3
   b50b4:	4619      	mov	r1, r3
   b50b6:	f7ff bc4f 	b.w	b4958 <network_off>

000b50ba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b50ba:	2200      	movs	r2, #0
   b50bc:	6840      	ldr	r0, [r0, #4]
   b50be:	4611      	mov	r1, r2
   b50c0:	f7ff bc2a 	b.w	b4918 <network_connecting>

000b50c4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b50c4:	6840      	ldr	r0, [r0, #4]
   b50c6:	2200      	movs	r2, #0
   b50c8:	2102      	movs	r1, #2
   b50ca:	f7ff bc2d 	b.w	b4928 <network_disconnect>

000b50ce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b50ce:	2300      	movs	r3, #0
   b50d0:	6840      	ldr	r0, [r0, #4]
   b50d2:	461a      	mov	r2, r3
   b50d4:	f7ff bc18 	b.w	b4908 <network_connect>

000b50d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b50d8:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b50da:	2204      	movs	r2, #4
   b50dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b50de:	4a02      	ldr	r2, [pc, #8]	; (b50e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b50e0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b50e2:	4770      	bx	lr
   b50e4:	2003e704 	.word	0x2003e704
   b50e8:	000b57e8 	.word	0x000b57e8

000b50ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b50ec:	2300      	movs	r3, #0
   b50ee:	6840      	ldr	r0, [r0, #4]
   b50f0:	461a      	mov	r2, r3
   b50f2:	f7ff bc09 	b.w	b4908 <network_connect>

000b50f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b50f6:	6840      	ldr	r0, [r0, #4]
   b50f8:	2200      	movs	r2, #0
   b50fa:	2102      	movs	r1, #2
   b50fc:	f7ff bc14 	b.w	b4928 <network_disconnect>

000b5100 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5100:	2200      	movs	r2, #0
   b5102:	6840      	ldr	r0, [r0, #4]
   b5104:	4611      	mov	r1, r2
   b5106:	f7ff bc07 	b.w	b4918 <network_connecting>

000b510a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b510a:	2200      	movs	r2, #0
   b510c:	6840      	ldr	r0, [r0, #4]
   b510e:	4611      	mov	r1, r2
   b5110:	f7ff bc12 	b.w	b4938 <network_ready>

000b5114 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5114:	2300      	movs	r3, #0
   b5116:	6840      	ldr	r0, [r0, #4]
   b5118:	461a      	mov	r2, r3
   b511a:	4619      	mov	r1, r3
   b511c:	f7ff bc14 	b.w	b4948 <network_on>

000b5120 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5120:	2300      	movs	r3, #0
   b5122:	6840      	ldr	r0, [r0, #4]
   b5124:	461a      	mov	r2, r3
   b5126:	4619      	mov	r1, r3
   b5128:	f7ff bc16 	b.w	b4958 <network_off>

000b512c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b512c:	6840      	ldr	r0, [r0, #4]
   b512e:	2100      	movs	r1, #0
   b5130:	f7ff bc3a 	b.w	b49a8 <network_is_on>

000b5134 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5134:	6840      	ldr	r0, [r0, #4]
   b5136:	2100      	movs	r1, #0
   b5138:	f7ff bc3e 	b.w	b49b8 <network_is_off>

000b513c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b513c:	6840      	ldr	r0, [r0, #4]
   b513e:	2200      	movs	r2, #0
   b5140:	f081 0101 	eor.w	r1, r1, #1
   b5144:	f7ff bc10 	b.w	b4968 <network_listen>

000b5148 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5148:	6840      	ldr	r0, [r0, #4]
   b514a:	2200      	movs	r2, #0
   b514c:	f7ff bc1c 	b.w	b4988 <network_set_listen_timeout>

000b5150 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5150:	2200      	movs	r2, #0
   b5152:	6840      	ldr	r0, [r0, #4]
   b5154:	4611      	mov	r1, r2
   b5156:	f7ff bc1f 	b.w	b4998 <network_get_listen_timeout>

000b515a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b515a:	2200      	movs	r2, #0
   b515c:	6840      	ldr	r0, [r0, #4]
   b515e:	4611      	mov	r1, r2
   b5160:	f7ff bc0a 	b.w	b4978 <network_listening>

000b5164 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5168:	b095      	sub	sp, #84	; 0x54
   b516a:	4614      	mov	r4, r2
   b516c:	460d      	mov	r5, r1
   b516e:	4607      	mov	r7, r0
    IPAddress addr;
   b5170:	f7ff fe36 	bl	b4de0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5174:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5176:	221c      	movs	r2, #28
   b5178:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b517a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b517c:	f000 f98e 	bl	b549c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5180:	2340      	movs	r3, #64	; 0x40
   b5182:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5184:	4620      	mov	r0, r4
   b5186:	466b      	mov	r3, sp
   b5188:	aa0c      	add	r2, sp, #48	; 0x30
   b518a:	2100      	movs	r1, #0
   b518c:	f7ff fa80 	bl	b4690 <netdb_getaddrinfo>
    if (!r) {
   b5190:	4604      	mov	r4, r0
   b5192:	2800      	cmp	r0, #0
   b5194:	d14b      	bne.n	b522e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5196:	4602      	mov	r2, r0
   b5198:	2101      	movs	r1, #1
   b519a:	6868      	ldr	r0, [r5, #4]
   b519c:	f7ff fbcc 	bl	b4938 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b51a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b51a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b51a4:	4622      	mov	r2, r4
   b51a6:	6868      	ldr	r0, [r5, #4]
   b51a8:	f7ff fbc6 	bl	b4938 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b51ae:	4681      	mov	r9, r0
        bool ok = false;
   b51b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51b2:	2e00      	cmp	r6, #0
   b51b4:	d03b      	beq.n	b522e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b51b6:	2900      	cmp	r1, #0
   b51b8:	d139      	bne.n	b522e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b51ba:	6873      	ldr	r3, [r6, #4]
   b51bc:	2b02      	cmp	r3, #2
   b51be:	d003      	beq.n	b51c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b51c0:	2b0a      	cmp	r3, #10
   b51c2:	d011      	beq.n	b51e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51c4:	69f6      	ldr	r6, [r6, #28]
   b51c6:	e7f4      	b.n	b51b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b51c8:	f1b8 0f00 	cmp.w	r8, #0
   b51cc:	d0fa      	beq.n	b51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b51ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b51d0:	a806      	add	r0, sp, #24
   b51d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b51d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b51d6:	f7ff fe31 	bl	b4e3c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b51da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51dc:	1d3c      	adds	r4, r7, #4
   b51de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51e0:	682b      	ldr	r3, [r5, #0]
   b51e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b51e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b51e6:	e7ed      	b.n	b51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b51e8:	f1b9 0f00 	cmp.w	r9, #0
   b51ec:	d0ea      	beq.n	b51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b51ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b51f0:	2210      	movs	r2, #16
   b51f2:	a801      	add	r0, sp, #4
   b51f4:	f000 f952 	bl	b549c <memset>
                    a.v = 6;
   b51f8:	2306      	movs	r3, #6
   b51fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b51fe:	ad01      	add	r5, sp, #4
   b5200:	f104 0308 	add.w	r3, r4, #8
   b5204:	3418      	adds	r4, #24
   b5206:	6818      	ldr	r0, [r3, #0]
   b5208:	6859      	ldr	r1, [r3, #4]
   b520a:	462a      	mov	r2, r5
   b520c:	c203      	stmia	r2!, {r0, r1}
   b520e:	3308      	adds	r3, #8
   b5210:	42a3      	cmp	r3, r4
   b5212:	4615      	mov	r5, r2
   b5214:	d1f7      	bne.n	b5206 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5216:	a901      	add	r1, sp, #4
   b5218:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b521a:	ad07      	add	r5, sp, #28
   b521c:	f7ff fdee 	bl	b4dfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5222:	1d3c      	adds	r4, r7, #4
   b5224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5226:	682b      	ldr	r3, [r5, #0]
   b5228:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b522a:	4649      	mov	r1, r9
   b522c:	e7ca      	b.n	b51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b522e:	9800      	ldr	r0, [sp, #0]
   b5230:	f7ff fa26 	bl	b4680 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5234:	4638      	mov	r0, r7
   b5236:	b015      	add	sp, #84	; 0x54
   b5238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b523c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b523c:	4b02      	ldr	r3, [pc, #8]	; (b5248 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b523e:	4a03      	ldr	r2, [pc, #12]	; (b524c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5240:	601a      	str	r2, [r3, #0]
   b5242:	2200      	movs	r2, #0
   b5244:	605a      	str	r2, [r3, #4]

} // spark
   b5246:	4770      	bx	lr
   b5248:	2003e70c 	.word	0x2003e70c
   b524c:	000b5824 	.word	0x000b5824

000b5250 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5250:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5252:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5254:	d902      	bls.n	b525c <pinAvailable+0xc>
    return false;
   b5256:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5258:	b002      	add	sp, #8
   b525a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b525c:	f1a0 030b 	sub.w	r3, r0, #11
   b5260:	2b02      	cmp	r3, #2
   b5262:	d81a      	bhi.n	b529a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5264:	4c17      	ldr	r4, [pc, #92]	; (b52c4 <pinAvailable+0x74>)
   b5266:	7821      	ldrb	r1, [r4, #0]
   b5268:	f3bf 8f5b 	dmb	ish
   b526c:	f011 0101 	ands.w	r1, r1, #1
   b5270:	d10b      	bne.n	b528a <pinAvailable+0x3a>
   b5272:	4620      	mov	r0, r4
   b5274:	9101      	str	r1, [sp, #4]
   b5276:	f7fe ff10 	bl	b409a <__cxa_guard_acquire>
   b527a:	9901      	ldr	r1, [sp, #4]
   b527c:	b128      	cbz	r0, b528a <pinAvailable+0x3a>
   b527e:	4812      	ldr	r0, [pc, #72]	; (b52c8 <pinAvailable+0x78>)
   b5280:	f7ff fc10 	bl	b4aa4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5284:	4620      	mov	r0, r4
   b5286:	f7fe ff0d 	bl	b40a4 <__cxa_guard_release>
   b528a:	4b0f      	ldr	r3, [pc, #60]	; (b52c8 <pinAvailable+0x78>)
   b528c:	7818      	ldrb	r0, [r3, #0]
   b528e:	f7ff fae7 	bl	b4860 <hal_spi_is_enabled>
   b5292:	2800      	cmp	r0, #0
   b5294:	d1df      	bne.n	b5256 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5296:	2001      	movs	r0, #1
   b5298:	e7de      	b.n	b5258 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b529a:	2801      	cmp	r0, #1
   b529c:	d809      	bhi.n	b52b2 <pinAvailable+0x62>
   b529e:	f000 f8c3 	bl	b5428 <_Z19__fetch_global_Wirev>
   b52a2:	2100      	movs	r1, #0
   b52a4:	7c00      	ldrb	r0, [r0, #16]
   b52a6:	f7ff fac3 	bl	b4830 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b52aa:	f080 0001 	eor.w	r0, r0, #1
   b52ae:	b2c0      	uxtb	r0, r0
   b52b0:	e7d2      	b.n	b5258 <pinAvailable+0x8>
   b52b2:	3809      	subs	r0, #9
   b52b4:	2801      	cmp	r0, #1
   b52b6:	d8ee      	bhi.n	b5296 <pinAvailable+0x46>
   b52b8:	f000 f864 	bl	b5384 <_Z22__fetch_global_Serial1v>
   b52bc:	7c00      	ldrb	r0, [r0, #16]
   b52be:	f7ff fa77 	bl	b47b0 <hal_usart_is_enabled>
   b52c2:	e7f2      	b.n	b52aa <pinAvailable+0x5a>
   b52c4:	2003e714 	.word	0x2003e714
   b52c8:	2003e718 	.word	0x2003e718

000b52cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b52cc:	2823      	cmp	r0, #35	; 0x23
{
   b52ce:	b538      	push	{r3, r4, r5, lr}
   b52d0:	4604      	mov	r4, r0
   b52d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b52d4:	d80a      	bhi.n	b52ec <pinMode+0x20>
   b52d6:	29ff      	cmp	r1, #255	; 0xff
   b52d8:	d008      	beq.n	b52ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b52da:	f7ff ffb9 	bl	b5250 <pinAvailable>
   b52de:	b128      	cbz	r0, b52ec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b52e0:	4629      	mov	r1, r5
   b52e2:	4620      	mov	r0, r4
}
   b52e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b52e8:	f7ff b9e2 	b.w	b46b0 <HAL_Pin_Mode>
}
   b52ec:	bd38      	pop	{r3, r4, r5, pc}

000b52ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b52ee:	b538      	push	{r3, r4, r5, lr}
   b52f0:	4604      	mov	r4, r0
   b52f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b52f4:	f7ff f9e4 	bl	b46c0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b52f8:	28ff      	cmp	r0, #255	; 0xff
   b52fa:	d010      	beq.n	b531e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b52fc:	2806      	cmp	r0, #6
   b52fe:	d804      	bhi.n	b530a <digitalWrite+0x1c>
   b5300:	234d      	movs	r3, #77	; 0x4d
   b5302:	fa23 f000 	lsr.w	r0, r3, r0
   b5306:	07c3      	lsls	r3, r0, #31
   b5308:	d409      	bmi.n	b531e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b530a:	4620      	mov	r0, r4
   b530c:	f7ff ffa0 	bl	b5250 <pinAvailable>
   b5310:	b128      	cbz	r0, b531e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5312:	4629      	mov	r1, r5
   b5314:	4620      	mov	r0, r4
}
   b5316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b531a:	f7ff b9d9 	b.w	b46d0 <HAL_GPIO_Write>
}
   b531e:	bd38      	pop	{r3, r4, r5, pc}

000b5320 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5320:	280d      	cmp	r0, #13
{
   b5322:	b510      	push	{r4, lr}
   b5324:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5326:	bf9c      	itt	ls
   b5328:	340e      	addls	r4, #14
   b532a:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b532c:	4620      	mov	r0, r4
   b532e:	f7ff ff8f 	bl	b5250 <pinAvailable>
   b5332:	b150      	cbz	r0, b534a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5334:	2103      	movs	r1, #3
   b5336:	4620      	mov	r0, r4
   b5338:	f7ff f9b2 	bl	b46a0 <HAL_Validate_Pin_Function>
   b533c:	2803      	cmp	r0, #3
   b533e:	d104      	bne.n	b534a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5340:	4620      	mov	r0, r4
}
   b5342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5346:	f7ff b9cb 	b.w	b46e0 <hal_adc_read>
}
   b534a:	2000      	movs	r0, #0
   b534c:	bd10      	pop	{r4, pc}

000b534e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b534e:	4770      	bx	lr

000b5350 <_Z20acquireSerial1Bufferv>:
{
   b5350:	b538      	push	{r3, r4, r5, lr}
   b5352:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5354:	2514      	movs	r5, #20
   b5356:	462a      	mov	r2, r5
   b5358:	2100      	movs	r1, #0
   b535a:	f000 f89f 	bl	b549c <memset>
   b535e:	8025      	strh	r5, [r4, #0]
   b5360:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5362:	4907      	ldr	r1, [pc, #28]	; (b5380 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5364:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5366:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5368:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b536a:	f000 f881 	bl	b5470 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b536e:	4904      	ldr	r1, [pc, #16]	; (b5380 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5370:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5372:	4628      	mov	r0, r5
   b5374:	f000 f87c 	bl	b5470 <_ZnajRKSt9nothrow_t>
    };
   b5378:	60e0      	str	r0, [r4, #12]
}
   b537a:	4620      	mov	r0, r4
   b537c:	bd38      	pop	{r3, r4, r5, pc}
   b537e:	bf00      	nop
   b5380:	000b5858 	.word	0x000b5858

000b5384 <_Z22__fetch_global_Serial1v>:
{
   b5384:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5386:	4d0e      	ldr	r5, [pc, #56]	; (b53c0 <_Z22__fetch_global_Serial1v+0x3c>)
   b5388:	7829      	ldrb	r1, [r5, #0]
   b538a:	f3bf 8f5b 	dmb	ish
   b538e:	f011 0401 	ands.w	r4, r1, #1
{
   b5392:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5394:	d111      	bne.n	b53ba <_Z22__fetch_global_Serial1v+0x36>
   b5396:	4628      	mov	r0, r5
   b5398:	f7fe fe7f 	bl	b409a <__cxa_guard_acquire>
   b539c:	b168      	cbz	r0, b53ba <_Z22__fetch_global_Serial1v+0x36>
   b539e:	a801      	add	r0, sp, #4
   b53a0:	f7ff ffd6 	bl	b5350 <_Z20acquireSerial1Bufferv>
   b53a4:	aa01      	add	r2, sp, #4
   b53a6:	4621      	mov	r1, r4
   b53a8:	4806      	ldr	r0, [pc, #24]	; (b53c4 <_Z22__fetch_global_Serial1v+0x40>)
   b53aa:	f7ff fe15 	bl	b4fd8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b53ae:	4628      	mov	r0, r5
   b53b0:	f7fe fe78 	bl	b40a4 <__cxa_guard_release>
   b53b4:	4804      	ldr	r0, [pc, #16]	; (b53c8 <_Z22__fetch_global_Serial1v+0x44>)
   b53b6:	f000 f85d 	bl	b5474 <atexit>
    return serial1;
}
   b53ba:	4802      	ldr	r0, [pc, #8]	; (b53c4 <_Z22__fetch_global_Serial1v+0x40>)
   b53bc:	b007      	add	sp, #28
   b53be:	bd30      	pop	{r4, r5, pc}
   b53c0:	2003e720 	.word	0x2003e720
   b53c4:	2003e724 	.word	0x2003e724
   b53c8:	000b534f 	.word	0x000b534f

000b53cc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b53cc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b53ce:	4c08      	ldr	r4, [pc, #32]	; (b53f0 <_Z21__fetch_global_EEPROMv+0x24>)
   b53d0:	7823      	ldrb	r3, [r4, #0]
   b53d2:	f3bf 8f5b 	dmb	ish
   b53d6:	07db      	lsls	r3, r3, #31
   b53d8:	d408      	bmi.n	b53ec <_Z21__fetch_global_EEPROMv+0x20>
   b53da:	4620      	mov	r0, r4
   b53dc:	f7fe fe5d 	bl	b409a <__cxa_guard_acquire>
   b53e0:	b120      	cbz	r0, b53ec <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b53e2:	f7ff f995 	bl	b4710 <HAL_EEPROM_Init>
   b53e6:	4620      	mov	r0, r4
   b53e8:	f7fe fe5c 	bl	b40a4 <__cxa_guard_release>
	return eeprom;
}
   b53ec:	4801      	ldr	r0, [pc, #4]	; (b53f4 <_Z21__fetch_global_EEPROMv+0x28>)
   b53ee:	bd10      	pop	{r4, pc}
   b53f0:	2003e73c 	.word	0x2003e73c
   b53f4:	2003e740 	.word	0x2003e740

000b53f8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b53f8:	4770      	bx	lr
	...

000b53fc <_Z17acquireWireBufferv>:
{
   b53fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b53fe:	2520      	movs	r5, #32
   b5400:	2314      	movs	r3, #20
{
   b5402:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5404:	6003      	str	r3, [r0, #0]
   b5406:	6085      	str	r5, [r0, #8]
   b5408:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b540a:	4906      	ldr	r1, [pc, #24]	; (b5424 <_Z17acquireWireBufferv+0x28>)
   b540c:	4628      	mov	r0, r5
   b540e:	f000 f82f 	bl	b5470 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5412:	4904      	ldr	r1, [pc, #16]	; (b5424 <_Z17acquireWireBufferv+0x28>)
	};
   b5414:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5416:	4628      	mov	r0, r5
   b5418:	f000 f82a 	bl	b5470 <_ZnajRKSt9nothrow_t>
	};
   b541c:	60e0      	str	r0, [r4, #12]
}
   b541e:	4620      	mov	r0, r4
   b5420:	bd38      	pop	{r3, r4, r5, pc}
   b5422:	bf00      	nop
   b5424:	000b5858 	.word	0x000b5858

000b5428 <_Z19__fetch_global_Wirev>:
{
   b5428:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b542a:	4d0e      	ldr	r5, [pc, #56]	; (b5464 <_Z19__fetch_global_Wirev+0x3c>)
   b542c:	7829      	ldrb	r1, [r5, #0]
   b542e:	f3bf 8f5b 	dmb	ish
   b5432:	f011 0401 	ands.w	r4, r1, #1
{
   b5436:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5438:	d111      	bne.n	b545e <_Z19__fetch_global_Wirev+0x36>
   b543a:	4628      	mov	r0, r5
   b543c:	f7fe fe2d 	bl	b409a <__cxa_guard_acquire>
   b5440:	b168      	cbz	r0, b545e <_Z19__fetch_global_Wirev+0x36>
   b5442:	a801      	add	r0, sp, #4
   b5444:	f7ff ffda 	bl	b53fc <_Z17acquireWireBufferv>
   b5448:	aa01      	add	r2, sp, #4
   b544a:	4621      	mov	r1, r4
   b544c:	4806      	ldr	r0, [pc, #24]	; (b5468 <_Z19__fetch_global_Wirev+0x40>)
   b544e:	f7ff fe03 	bl	b5058 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5452:	4628      	mov	r0, r5
   b5454:	f7fe fe26 	bl	b40a4 <__cxa_guard_release>
   b5458:	4804      	ldr	r0, [pc, #16]	; (b546c <_Z19__fetch_global_Wirev+0x44>)
   b545a:	f000 f80b 	bl	b5474 <atexit>
	return wire;
}
   b545e:	4802      	ldr	r0, [pc, #8]	; (b5468 <_Z19__fetch_global_Wirev+0x40>)
   b5460:	b007      	add	sp, #28
   b5462:	bd30      	pop	{r4, r5, pc}
   b5464:	2003e744 	.word	0x2003e744
   b5468:	2003e748 	.word	0x2003e748
   b546c:	000b53f9 	.word	0x000b53f9

000b5470 <_ZnajRKSt9nothrow_t>:
   b5470:	f7fe be0f 	b.w	b4092 <_Znaj>

000b5474 <atexit>:
   b5474:	2300      	movs	r3, #0
   b5476:	4601      	mov	r1, r0
   b5478:	461a      	mov	r2, r3
   b547a:	4618      	mov	r0, r3
   b547c:	f000 b84c 	b.w	b5518 <__register_exitproc>

000b5480 <memcpy>:
   b5480:	440a      	add	r2, r1
   b5482:	4291      	cmp	r1, r2
   b5484:	f100 33ff 	add.w	r3, r0, #4294967295
   b5488:	d100      	bne.n	b548c <memcpy+0xc>
   b548a:	4770      	bx	lr
   b548c:	b510      	push	{r4, lr}
   b548e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5492:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5496:	4291      	cmp	r1, r2
   b5498:	d1f9      	bne.n	b548e <memcpy+0xe>
   b549a:	bd10      	pop	{r4, pc}

000b549c <memset>:
   b549c:	4402      	add	r2, r0
   b549e:	4603      	mov	r3, r0
   b54a0:	4293      	cmp	r3, r2
   b54a2:	d100      	bne.n	b54a6 <memset+0xa>
   b54a4:	4770      	bx	lr
   b54a6:	f803 1b01 	strb.w	r1, [r3], #1
   b54aa:	e7f9      	b.n	b54a0 <memset+0x4>

000b54ac <srand>:
   b54ac:	b538      	push	{r3, r4, r5, lr}
   b54ae:	4b10      	ldr	r3, [pc, #64]	; (b54f0 <srand+0x44>)
   b54b0:	681d      	ldr	r5, [r3, #0]
   b54b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b54b4:	4604      	mov	r4, r0
   b54b6:	b9b3      	cbnz	r3, b54e6 <srand+0x3a>
   b54b8:	2018      	movs	r0, #24
   b54ba:	f7ff fa8d 	bl	b49d8 <malloc>
   b54be:	4602      	mov	r2, r0
   b54c0:	63a8      	str	r0, [r5, #56]	; 0x38
   b54c2:	b920      	cbnz	r0, b54ce <srand+0x22>
   b54c4:	4b0b      	ldr	r3, [pc, #44]	; (b54f4 <srand+0x48>)
   b54c6:	480c      	ldr	r0, [pc, #48]	; (b54f8 <srand+0x4c>)
   b54c8:	2142      	movs	r1, #66	; 0x42
   b54ca:	f7ff fa9d 	bl	b4a08 <__assert_func>
   b54ce:	490b      	ldr	r1, [pc, #44]	; (b54fc <srand+0x50>)
   b54d0:	4b0b      	ldr	r3, [pc, #44]	; (b5500 <srand+0x54>)
   b54d2:	e9c0 1300 	strd	r1, r3, [r0]
   b54d6:	4b0b      	ldr	r3, [pc, #44]	; (b5504 <srand+0x58>)
   b54d8:	6083      	str	r3, [r0, #8]
   b54da:	230b      	movs	r3, #11
   b54dc:	8183      	strh	r3, [r0, #12]
   b54de:	2100      	movs	r1, #0
   b54e0:	2001      	movs	r0, #1
   b54e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b54e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b54e8:	2200      	movs	r2, #0
   b54ea:	611c      	str	r4, [r3, #16]
   b54ec:	615a      	str	r2, [r3, #20]
   b54ee:	bd38      	pop	{r3, r4, r5, pc}
   b54f0:	2003e5e8 	.word	0x2003e5e8
   b54f4:	000b5859 	.word	0x000b5859
   b54f8:	000b5870 	.word	0x000b5870
   b54fc:	abcd330e 	.word	0xabcd330e
   b5500:	e66d1234 	.word	0xe66d1234
   b5504:	0005deec 	.word	0x0005deec

000b5508 <strlen>:
   b5508:	4603      	mov	r3, r0
   b550a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b550e:	2a00      	cmp	r2, #0
   b5510:	d1fb      	bne.n	b550a <strlen+0x2>
   b5512:	1a18      	subs	r0, r3, r0
   b5514:	3801      	subs	r0, #1
   b5516:	4770      	bx	lr

000b5518 <__register_exitproc>:
   b5518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b551c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b55d8 <__register_exitproc+0xc0>
   b5520:	4606      	mov	r6, r0
   b5522:	f8d8 0000 	ldr.w	r0, [r8]
   b5526:	461f      	mov	r7, r3
   b5528:	460d      	mov	r5, r1
   b552a:	4691      	mov	r9, r2
   b552c:	f000 f856 	bl	b55dc <__retarget_lock_acquire_recursive>
   b5530:	4b25      	ldr	r3, [pc, #148]	; (b55c8 <__register_exitproc+0xb0>)
   b5532:	681c      	ldr	r4, [r3, #0]
   b5534:	b934      	cbnz	r4, b5544 <__register_exitproc+0x2c>
   b5536:	4c25      	ldr	r4, [pc, #148]	; (b55cc <__register_exitproc+0xb4>)
   b5538:	601c      	str	r4, [r3, #0]
   b553a:	4b25      	ldr	r3, [pc, #148]	; (b55d0 <__register_exitproc+0xb8>)
   b553c:	b113      	cbz	r3, b5544 <__register_exitproc+0x2c>
   b553e:	681b      	ldr	r3, [r3, #0]
   b5540:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5544:	6863      	ldr	r3, [r4, #4]
   b5546:	2b1f      	cmp	r3, #31
   b5548:	dd07      	ble.n	b555a <__register_exitproc+0x42>
   b554a:	f8d8 0000 	ldr.w	r0, [r8]
   b554e:	f000 f847 	bl	b55e0 <__retarget_lock_release_recursive>
   b5552:	f04f 30ff 	mov.w	r0, #4294967295
   b5556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b555a:	b34e      	cbz	r6, b55b0 <__register_exitproc+0x98>
   b555c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5560:	b988      	cbnz	r0, b5586 <__register_exitproc+0x6e>
   b5562:	4b1c      	ldr	r3, [pc, #112]	; (b55d4 <__register_exitproc+0xbc>)
   b5564:	b923      	cbnz	r3, b5570 <__register_exitproc+0x58>
   b5566:	f8d8 0000 	ldr.w	r0, [r8]
   b556a:	f000 f838 	bl	b55de <__retarget_lock_release>
   b556e:	e7f0      	b.n	b5552 <__register_exitproc+0x3a>
   b5570:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5574:	f7ff fa30 	bl	b49d8 <malloc>
   b5578:	2800      	cmp	r0, #0
   b557a:	d0f4      	beq.n	b5566 <__register_exitproc+0x4e>
   b557c:	2300      	movs	r3, #0
   b557e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5582:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5586:	6863      	ldr	r3, [r4, #4]
   b5588:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b558c:	2201      	movs	r2, #1
   b558e:	409a      	lsls	r2, r3
   b5590:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5594:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5598:	4313      	orrs	r3, r2
   b559a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b559e:	2e02      	cmp	r6, #2
   b55a0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b55a4:	bf02      	ittt	eq
   b55a6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b55aa:	4313      	orreq	r3, r2
   b55ac:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b55b0:	6863      	ldr	r3, [r4, #4]
   b55b2:	f8d8 0000 	ldr.w	r0, [r8]
   b55b6:	1c5a      	adds	r2, r3, #1
   b55b8:	3302      	adds	r3, #2
   b55ba:	6062      	str	r2, [r4, #4]
   b55bc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b55c0:	f000 f80e 	bl	b55e0 <__retarget_lock_release_recursive>
   b55c4:	2000      	movs	r0, #0
   b55c6:	e7c6      	b.n	b5556 <__register_exitproc+0x3e>
   b55c8:	2003e7e8 	.word	0x2003e7e8
   b55cc:	2003e75c 	.word	0x2003e75c
   b55d0:	00000000 	.word	0x00000000
   b55d4:	000b49d9 	.word	0x000b49d9
   b55d8:	2003e64c 	.word	0x2003e64c

000b55dc <__retarget_lock_acquire_recursive>:
   b55dc:	4770      	bx	lr

000b55de <__retarget_lock_release>:
   b55de:	4770      	bx	lr

000b55e0 <__retarget_lock_release_recursive>:
   b55e0:	4770      	bx	lr

000b55e2 <link_code_end>:
	...

000b55e4 <dynalib_user>:
   b55e4:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b55f4:	0000 0000 754d 746c 7069 656c 6578 2e72     ....Multiplexer.
   b5604:	6573 2874 2029 203e 6176 756c 2065 756d     set() > value mu
   b5614:	7473 6220 2065 6e69 7420 6568 7220 6e61     st be in the ran
   b5624:	6567 6f20 2066 2e30 2e2e 3531 202c 6176     ge of 0...15, va
   b5634:	756c 2065 203d 6425 000a 6542 7473 6320     lue = %d..Best c
   b5644:	6c6f 656c 7463 6f69 206e 7369 2520 0a64     ollection is %d.
   b5654:	4200 6765 6e69 696e 676e 7720 7069 0a65     .Beginning wipe.
   b5664:	5700 7069 6465 2520 2f64 6425 000a 6957     .Wiped %d/%d..Wi
   b5674:	6570 6320 6d6f 6c70 7465 6465 000a 7250     pe completed..Pr
   b5684:	676f 6172 6d6d 6465 6620 6e69 6567 2072     ogrammed finger 
   b5694:	6f70 2073 7825 000a 6e55 6e6b 776f 206e     pos %x..Unknown 
   b56a4:	6f63 6d6d 6e61 0a64 4200 7365 2074 6863     command..Best ch
   b56b4:	696f 6563 203a 6425 000a 6425 202c 4300     oice: %d..%d, .C
   b56c4:	756f 746e 6465 7520 2070 6f68 0a65 4300     ounted up hoe..C
   b56d4:	756f 746e 6465 6420 776f 206e 6f68 0a65     ounted down hoe.
   b56e4:	0000 0000                                   ....

000b56e8 <_ZTVN5spark13EthernetClassE>:
	...
   b56f0:	4a87 000b 4a7d 000b 4a73 000b 4a69 000b     .J..}J..sJ..iJ..
   b5700:	4a5d 000b 4a51 000b 512d 000b 5135 000b     ]J..QJ..-Q..5Q..
   b5710:	4a45 000b 4a3d 000b 4a33 000b 4a29 000b     EJ..=J..3J..)J..
   b5720:	5165 000b 7061 0070 5925 252d 2d6d 6425     eQ..app.%Y-%m-%d
   b5730:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5740:	6d69 0065                                   ime.

000b5744 <_ZTV9IPAddress>:
	...
   b574c:	4d7d 000b 4d6d 000b 4d6f 000b               }M..mM..oM..

000b5758 <_ZTV9USBSerial>:
	...
   b5760:	4e63 000b 4ecb 000b 4ea1 000b 4aed 000b     cN...N...N...J..
   b5770:	4e93 000b 4e65 000b 4e75 000b 4ec5 000b     .N..eN..uN...N..
   b5780:	4e85 000b 4e5d 000b                         .N..]N..

000b5788 <_ZTV11USARTSerial>:
	...
   b5790:	4f5d 000b 4fc9 000b 4fa1 000b 4aed 000b     ]O...O...O...J..
   b57a0:	4f71 000b 4f8d 000b 4f7f 000b 4f9b 000b     qO...O...O...O..
   b57b0:	4f5f 000b 4f63 000b                         _O..cO..

000b57b8 <_ZTV7TwoWire>:
	...
   b57c0:	5001 000b 504b 000b 5023 000b 5003 000b     .P..KP..#P...P..
   b57d0:	502b 000b 5033 000b 503b 000b 5043 000b     +P..3P..;P..CP..

000b57e0 <_ZTVN5spark9WiFiClassE>:
	...
   b57e8:	50cf 000b 50c5 000b 50bb 000b 507d 000b     .P...P...P..}P..
   b57f8:	4bf9 000b 50af 000b 512d 000b 5135 000b     .K...P..-Q..5Q..
   b5808:	50a3 000b 509b 000b 5091 000b 5087 000b     .P...P...P...P..
   b5818:	5165 000b                                   eQ..

000b581c <_ZTVN5spark12NetworkClassE>:
	...
   b5824:	50ed 000b 50f7 000b 5101 000b 510b 000b     .P...P...Q...Q..
   b5834:	5115 000b 5121 000b 512d 000b 5135 000b     .Q..!Q..-Q..5Q..
   b5844:	513d 000b 5149 000b 5151 000b 515b 000b     =Q..IQ..QQ..[Q..
   b5854:	5165 000b                                   eQ..

000b5858 <_ZSt7nothrow>:
   b5858:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5868:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5878:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5888:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5898:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b58a8:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b58b8:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b58c8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b58d8:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b58e8:	646e 632e                                    nd.c.

000b58ed <link_const_variable_data_end>:
   b58ed:	00          	.byte	0x00
	...

000b58f0 <link_constructors_location>:
   b58f0:	000b4621 	.word	0x000b4621
   b58f4:	000b4a91 	.word	0x000b4a91
   b58f8:	000b4ab9 	.word	0x000b4ab9
   b58fc:	000b4add 	.word	0x000b4add
   b5900:	000b4c05 	.word	0x000b4c05
   b5904:	000b4c15 	.word	0x000b4c15
   b5908:	000b4c29 	.word	0x000b4c29
   b590c:	000b50d9 	.word	0x000b50d9
   b5910:	000b523d 	.word	0x000b523d

000b5914 <link_constructors_end>:
	...
