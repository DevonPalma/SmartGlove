
c:/Users/deedp/Documents/IOT/SmartGlove/FinalCode/target/3.2.0/argon/FinalCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ce4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b5d00  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e5f0  000b5d04  0001e5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000194  2003e65c  2003e65c  0002e65c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b5d70  000b5d70  00025d70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b5d98  000b5d98  00025d98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010def1  00000000  00000000  00025d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00012465  00000000  00000000  00133c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00033573  00000000  00000000  001460f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002800  00000000  00000000  00179665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000097d0  00000000  00000000  0017be65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003983d  00000000  00000000  00185635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003bb2c  00000000  00000000  001bee72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001286d5  00000000  00000000  001fa99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006fa4  00000000  00000000  00323074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fc4d 	bl	b58cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fc55 	bl	b58e8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5f0 	.word	0x2003e5f0
   b4048:	000b5d04 	.word	0x000b5d04
   b404c:	2003e65c 	.word	0x2003e65c
   b4050:	2003e65c 	.word	0x2003e65c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f83d 	bl	b50dc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5cd8 	.word	0x000b5cd8
   b407c:	000b5cfc 	.word	0x000b5cfc

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba54 	b.w	b452c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fab9 	bl	b45fc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bfdd 	b.w	b504c <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 be87 	b.w	b4da4 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 be8d 	b.w	b4db4 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5EERefaSEh.isra.0>:
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   b40aa:	6800      	ldr	r0, [r0, #0]
   b40ac:	f000 bcfe 	b.w	b4aac <HAL_EEPROM_Write>

000b40b0 <_ZNK5EERefdeEv.isra.0>:
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b40b0:	f000 bcf4 	b.w	b4a9c <HAL_EEPROM_Read>

000b40b4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b4:	b40e      	push	{r1, r2, r3}
   b40b6:	b503      	push	{r0, r1, lr}
   b40b8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ba:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40bc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40c0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40c2:	f000 ff4e 	bl	b4f62 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c6:	b002      	add	sp, #8
   b40c8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40cc:	b003      	add	sp, #12
   b40ce:	4770      	bx	lr

000b40d0 <_ZN11Multiplexer3setEh>:
    void disable() {
        digitalWrite(en, HIGH);
    }

    void set(byte index) {
        if (index < 0 || index > 15) {
   b40d0:	290f      	cmp	r1, #15
    void set(byte index) {
   b40d2:	b538      	push	{r3, r4, r5, lr}
   b40d4:	4605      	mov	r5, r0
   b40d6:	460c      	mov	r4, r1
        if (index < 0 || index > 15) {
   b40d8:	d906      	bls.n	b40e8 <_ZN11Multiplexer3setEh+0x18>
            Serial.printf("Multiplexer.set() > value must be in the range of 0...15, value = %d\n", index);
   b40da:	f001 f903 	bl	b52e4 <_Z16_fetch_usbserialv>
   b40de:	490d      	ldr	r1, [pc, #52]	; (b4114 <_ZN11Multiplexer3setEh+0x44>)
   b40e0:	4622      	mov	r2, r4
   b40e2:	f7ff ffe7 	bl	b40b4 <_ZN5Print6printfEPKcz>

        digitalWrite(s0, (index & 0x1) >> 0);
        digitalWrite(s1, (index & 0x2) >> 1);
        digitalWrite(s2, (index & 0x4) >> 2);
        digitalWrite(s3, (index & 0x8) >> 3);
    }
   b40e6:	bd38      	pop	{r3, r4, r5, pc}
        digitalWrite(s0, (index & 0x1) >> 0);
   b40e8:	7840      	ldrb	r0, [r0, #1]
   b40ea:	f001 0101 	and.w	r1, r1, #1
   b40ee:	f001 fb24 	bl	b573a <digitalWrite>
        digitalWrite(s1, (index & 0x2) >> 1);
   b40f2:	78a8      	ldrb	r0, [r5, #2]
   b40f4:	f3c4 0140 	ubfx	r1, r4, #1, #1
   b40f8:	f001 fb1f 	bl	b573a <digitalWrite>
        digitalWrite(s2, (index & 0x4) >> 2);
   b40fc:	78e8      	ldrb	r0, [r5, #3]
   b40fe:	f3c4 0180 	ubfx	r1, r4, #2, #1
   b4102:	f001 fb1a 	bl	b573a <digitalWrite>
        digitalWrite(s3, (index & 0x8) >> 3);
   b4106:	7928      	ldrb	r0, [r5, #4]
   b4108:	08e1      	lsrs	r1, r4, #3
    }
   b410a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(s3, (index & 0x8) >> 3);
   b410e:	f001 bb14 	b.w	b573a <digitalWrite>
   b4112:	bf00      	nop
   b4114:	000b5a44 	.word	0x000b5a44

000b4118 <_ZN11Multiplexer4readEh>:

    int read(byte index) {
   b4118:	b538      	push	{r3, r4, r5, lr}
   b411a:	4604      	mov	r4, r0
        set(index);
   b411c:	f7ff ffd8 	bl	b40d0 <_ZN11Multiplexer3setEh>
        digitalWrite(en, LOW);
   b4120:	7820      	ldrb	r0, [r4, #0]
   b4122:	2100      	movs	r1, #0
   b4124:	f001 fb09 	bl	b573a <digitalWrite>
        return read();
    }

    int read() {
        enable();
        int val = analogRead(sig);
   b4128:	7960      	ldrb	r0, [r4, #5]
   b412a:	f001 fb1f 	bl	b576c <analogRead>
        digitalWrite(en, HIGH);
   b412e:	2101      	movs	r1, #1
        int val = analogRead(sig);
   b4130:	4605      	mov	r5, r0
        digitalWrite(en, HIGH);
   b4132:	7820      	ldrb	r0, [r4, #0]
   b4134:	f001 fb01 	bl	b573a <digitalWrite>
    }
   b4138:	4628      	mov	r0, r5
   b413a:	bd38      	pop	{r3, r4, r5, pc}

000b413c <_ZN21MultiplexerCollectionC1EP11Multiplexer>:
    // This results in a simple range conversion of [VAL * (2^8/2^12)] or [VAL / 2^4] or [VAL/16]
    // Fingers range now between 0-255

    MultiplexerCollection() {}

    MultiplexerCollection(Multiplexer *mulp) {
   b413c:	b538      	push	{r3, r4, r5, lr}
   b413e:	460d      	mov	r5, r1
   b4140:	4604      	mov	r4, r0
        thumb = mulp->read(M_THUMB) / 16;
   b4142:	2109      	movs	r1, #9
   b4144:	4628      	mov	r0, r5
   b4146:	f7ff ffe7 	bl	b4118 <_ZN11Multiplexer4readEh>
   b414a:	2800      	cmp	r0, #0
   b414c:	bfb8      	it	lt
   b414e:	300f      	addlt	r0, #15
   b4150:	1100      	asrs	r0, r0, #4
   b4152:	7020      	strb	r0, [r4, #0]
        pointer_high = mulp->read(M_POINTER_HIGH) / 16;
   b4154:	2108      	movs	r1, #8
   b4156:	4628      	mov	r0, r5
   b4158:	f7ff ffde 	bl	b4118 <_ZN11Multiplexer4readEh>
   b415c:	2800      	cmp	r0, #0
   b415e:	bfb8      	it	lt
   b4160:	300f      	addlt	r0, #15
   b4162:	1100      	asrs	r0, r0, #4
   b4164:	7060      	strb	r0, [r4, #1]
        pointer_low = mulp->read(M_POINTER_LOW) / 16;
   b4166:	2107      	movs	r1, #7
   b4168:	4628      	mov	r0, r5
   b416a:	f7ff ffd5 	bl	b4118 <_ZN11Multiplexer4readEh>
   b416e:	2800      	cmp	r0, #0
   b4170:	bfb8      	it	lt
   b4172:	300f      	addlt	r0, #15
   b4174:	1100      	asrs	r0, r0, #4
   b4176:	70a0      	strb	r0, [r4, #2]
        middle_high = mulp->read(M_MIDDLE_HIGH) / 16;
   b4178:	210c      	movs	r1, #12
   b417a:	4628      	mov	r0, r5
   b417c:	f7ff ffcc 	bl	b4118 <_ZN11Multiplexer4readEh>
   b4180:	2800      	cmp	r0, #0
   b4182:	bfb8      	it	lt
   b4184:	300f      	addlt	r0, #15
   b4186:	1100      	asrs	r0, r0, #4
   b4188:	70e0      	strb	r0, [r4, #3]
        middle_low = mulp->read(M_MIDDLE_LOW) / 16;
   b418a:	210d      	movs	r1, #13
   b418c:	4628      	mov	r0, r5
   b418e:	f7ff ffc3 	bl	b4118 <_ZN11Multiplexer4readEh>
   b4192:	2800      	cmp	r0, #0
   b4194:	bfb8      	it	lt
   b4196:	300f      	addlt	r0, #15
   b4198:	1100      	asrs	r0, r0, #4
   b419a:	7120      	strb	r0, [r4, #4]
        ring_high = mulp->read(M_RING_HIGH) / 16;
   b419c:	210a      	movs	r1, #10
   b419e:	4628      	mov	r0, r5
   b41a0:	f7ff ffba 	bl	b4118 <_ZN11Multiplexer4readEh>
   b41a4:	2800      	cmp	r0, #0
   b41a6:	bfb8      	it	lt
   b41a8:	300f      	addlt	r0, #15
   b41aa:	1100      	asrs	r0, r0, #4
   b41ac:	7160      	strb	r0, [r4, #5]
        ring_low = mulp->read(M_RING_LOW) / 16;
   b41ae:	210b      	movs	r1, #11
   b41b0:	4628      	mov	r0, r5
   b41b2:	f7ff ffb1 	bl	b4118 <_ZN11Multiplexer4readEh>
   b41b6:	2800      	cmp	r0, #0
   b41b8:	bfb8      	it	lt
   b41ba:	300f      	addlt	r0, #15
   b41bc:	1100      	asrs	r0, r0, #4
   b41be:	71a0      	strb	r0, [r4, #6]
        pinky_high = mulp->read(M_PINKY_HIGH) / 16;
   b41c0:	210e      	movs	r1, #14
   b41c2:	4628      	mov	r0, r5
   b41c4:	f7ff ffa8 	bl	b4118 <_ZN11Multiplexer4readEh>
   b41c8:	2800      	cmp	r0, #0
   b41ca:	bfb8      	it	lt
   b41cc:	300f      	addlt	r0, #15
   b41ce:	1100      	asrs	r0, r0, #4
   b41d0:	71e0      	strb	r0, [r4, #7]
        pinky_low = mulp->read(M_PINKY_LOW) / 16;
   b41d2:	210f      	movs	r1, #15
   b41d4:	4628      	mov	r0, r5
   b41d6:	f7ff ff9f 	bl	b4118 <_ZN11Multiplexer4readEh>
   b41da:	2800      	cmp	r0, #0
   b41dc:	bfb8      	it	lt
   b41de:	300f      	addlt	r0, #15
   b41e0:	1100      	asrs	r0, r0, #4
   b41e2:	7220      	strb	r0, [r4, #8]
    }
   b41e4:	4620      	mov	r0, r4
   b41e6:	bd38      	pop	{r3, r4, r5, pc}

000b41e8 <_ZN21MultiplexerCollection12saveToEEPROMEi>:
        val += abs(pinky_high - mulpC->pinky_high);
        val += abs(pinky_low - mulpC->pinky_low);
        return val;
    }

    void saveToEEPROM(int index) {
   b41e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b41ea:	4605      	mov	r5, r0
        int startIndex = index * 9;
   b41ec:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
        EEPROM.write(startIndex + 0, thumb);
   b41f0:	f001 fb12 	bl	b5818 <_Z21__fetch_global_EEPROMv>


    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b41f4:	7829      	ldrb	r1, [r5, #0]
        : index( index )                 {}
   b41f6:	9401      	str	r4, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b41f8:	a801      	add	r0, sp, #4
   b41fa:	f7ff ff56 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 1, pointer_high);
   b41fe:	f001 fb0b 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b4202:	1c63      	adds	r3, r4, #1
   b4204:	7869      	ldrb	r1, [r5, #1]
        : index( index )                 {}
   b4206:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4208:	a801      	add	r0, sp, #4
   b420a:	f7ff ff4e 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 2, pointer_low);
   b420e:	f001 fb03 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b4212:	1ca3      	adds	r3, r4, #2
   b4214:	78a9      	ldrb	r1, [r5, #2]
        : index( index )                 {}
   b4216:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4218:	a801      	add	r0, sp, #4
   b421a:	f7ff ff46 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 3, middle_high);
   b421e:	f001 fafb 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b4222:	1ce3      	adds	r3, r4, #3
   b4224:	78e9      	ldrb	r1, [r5, #3]
        : index( index )                 {}
   b4226:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4228:	a801      	add	r0, sp, #4
   b422a:	f7ff ff3e 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 4, middle_low);
   b422e:	f001 faf3 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b4232:	1d23      	adds	r3, r4, #4
   b4234:	7929      	ldrb	r1, [r5, #4]
        : index( index )                 {}
   b4236:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4238:	a801      	add	r0, sp, #4
   b423a:	f7ff ff36 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 5, ring_high);
   b423e:	f001 faeb 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b4242:	1d63      	adds	r3, r4, #5
   b4244:	7969      	ldrb	r1, [r5, #5]
        : index( index )                 {}
   b4246:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4248:	a801      	add	r0, sp, #4
   b424a:	f7ff ff2e 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 6, ring_low);
   b424e:	f001 fae3 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b4252:	1da3      	adds	r3, r4, #6
   b4254:	79a9      	ldrb	r1, [r5, #6]
        : index( index )                 {}
   b4256:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4258:	a801      	add	r0, sp, #4
   b425a:	f7ff ff26 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 7, pinky_high);
   b425e:	f001 fadb 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b4262:	1de3      	adds	r3, r4, #7
   b4264:	79e9      	ldrb	r1, [r5, #7]
        : index( index )                 {}
   b4266:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4268:	a801      	add	r0, sp, #4
   b426a:	f7ff ff1e 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 8, pinky_low);
   b426e:	3408      	adds	r4, #8
   b4270:	f001 fad2 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b4274:	7a29      	ldrb	r1, [r5, #8]
        : index( index )                 {}
   b4276:	9401      	str	r4, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4278:	a801      	add	r0, sp, #4
   b427a:	f7ff ff16 	bl	b40aa <_ZN5EERefaSEh.isra.0>
    }
   b427e:	b003      	add	sp, #12
   b4280:	bd30      	pop	{r4, r5, pc}

000b4282 <_ZN21MultiplexerCollection14loadFromEEPROMEi>:

    void loadFromEEPROM(int index) {
   b4282:	b538      	push	{r3, r4, r5, lr}
        int startIndex = index * 9;
   b4284:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
    void loadFromEEPROM(int index) {
   b4288:	4605      	mov	r5, r0
        thumb = EEPROM.read(startIndex + 0);
   b428a:	f001 fac5 	bl	b5818 <_Z21__fetch_global_EEPROMv>
    operator uint8_t() const       { return **this; }
   b428e:	4620      	mov	r0, r4
   b4290:	f7ff ff0e 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b4294:	7028      	strb	r0, [r5, #0]
        pointer_high = EEPROM.read(startIndex + 1);
   b4296:	f001 fabf 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b429a:	1c60      	adds	r0, r4, #1
   b429c:	f7ff ff08 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42a0:	7068      	strb	r0, [r5, #1]
        pointer_low = EEPROM.read(startIndex + 2);
   b42a2:	f001 fab9 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b42a6:	1ca0      	adds	r0, r4, #2
   b42a8:	f7ff ff02 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42ac:	70a8      	strb	r0, [r5, #2]
        middle_high = EEPROM.read(startIndex + 3);
   b42ae:	f001 fab3 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b42b2:	1ce0      	adds	r0, r4, #3
   b42b4:	f7ff fefc 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42b8:	70e8      	strb	r0, [r5, #3]
        middle_low = EEPROM.read(startIndex + 4);
   b42ba:	f001 faad 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b42be:	1d20      	adds	r0, r4, #4
   b42c0:	f7ff fef6 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42c4:	7128      	strb	r0, [r5, #4]
        ring_high = EEPROM.read(startIndex + 5);
   b42c6:	f001 faa7 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b42ca:	1d60      	adds	r0, r4, #5
   b42cc:	f7ff fef0 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42d0:	7168      	strb	r0, [r5, #5]
        ring_low = EEPROM.read(startIndex + 6);
   b42d2:	f001 faa1 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b42d6:	1da0      	adds	r0, r4, #6
   b42d8:	f7ff feea 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42dc:	71a8      	strb	r0, [r5, #6]
        pinky_high = EEPROM.read(startIndex + 7);
   b42de:	f001 fa9b 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b42e2:	1de0      	adds	r0, r4, #7
   b42e4:	f7ff fee4 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42e8:	71e8      	strb	r0, [r5, #7]
        pinky_low = EEPROM.read(startIndex + 8);
   b42ea:	f001 fa95 	bl	b5818 <_Z21__fetch_global_EEPROMv>
   b42ee:	f104 0008 	add.w	r0, r4, #8
   b42f2:	f7ff fedd 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42f6:	7228      	strb	r0, [r5, #8]
    }
   b42f8:	bd38      	pop	{r3, r4, r5, pc}

000b42fa <_Z11readCommandPhS_>:
    UNIMPLEMENTED_COMMAND = 0x10,
    NO_DATA_AVAILABLE = 0x11,
    REQUEST_FAILED = 0x12,
};

void readCommand(byte *mainCmd, byte *data) {
   b42fa:	b538      	push	{r3, r4, r5, lr}
   b42fc:	460c      	mov	r4, r1
   b42fe:	4605      	mov	r5, r0
    if (Serial.available() > 0) {
   b4300:	f000 fff0 	bl	b52e4 <_Z16_fetch_usbserialv>
   b4304:	6803      	ldr	r3, [r0, #0]
   b4306:	691b      	ldr	r3, [r3, #16]
   b4308:	4798      	blx	r3
   b430a:	2800      	cmp	r0, #0
   b430c:	dd0b      	ble.n	b4326 <_Z11readCommandPhS_+0x2c>
        byte packet = Serial.read();
   b430e:	f000 ffe9 	bl	b52e4 <_Z16_fetch_usbserialv>
   b4312:	6803      	ldr	r3, [r0, #0]
   b4314:	695b      	ldr	r3, [r3, #20]
   b4316:	4798      	blx	r3
        *mainCmd = (packet & 0xE0) >> 5;
   b4318:	f3c0 1342 	ubfx	r3, r0, #5, #3
        *data = (packet & 0x1F);
   b431c:	f000 001f 	and.w	r0, r0, #31
        *mainCmd = (packet & 0xE0) >> 5;
   b4320:	702b      	strb	r3, [r5, #0]
        *data = (packet & 0x1F);
   b4322:	7020      	strb	r0, [r4, #0]
    } else {
        *mainCmd = STATUS;
        *data = NO_DATA_AVAILABLE;
    }
}
   b4324:	bd38      	pop	{r3, r4, r5, pc}
        *mainCmd = STATUS;
   b4326:	2301      	movs	r3, #1
   b4328:	702b      	strb	r3, [r5, #0]
        *data = NO_DATA_AVAILABLE;
   b432a:	2311      	movs	r3, #17
   b432c:	7023      	strb	r3, [r4, #0]
}
   b432e:	e7f9      	b.n	b4324 <_Z11readCommandPhS_+0x2a>

000b4330 <_Z11sendCommandhh>:

void sendCommand(byte mainCmd, byte data) {
   b4330:	b570      	push	{r4, r5, r6, lr}
   b4332:	4605      	mov	r5, r0
   b4334:	460c      	mov	r4, r1
    Serial.write(mainCmd << 5 | data);
   b4336:	f000 ffd5 	bl	b52e4 <_Z16_fetch_usbserialv>
   b433a:	6803      	ldr	r3, [r0, #0]
   b433c:	ea44 1145 	orr.w	r1, r4, r5, lsl #5
   b4340:	689b      	ldr	r3, [r3, #8]
}
   b4342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.write(mainCmd << 5 | data);
   b4346:	b2c9      	uxtb	r1, r1
   b4348:	4718      	bx	r3

000b434a <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>:
                break;
            }
        }
    }

    int getBestCollection(MultiplexerCollection *comparedCol) {
   b434a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        int bestVal = 256 * 9; // Impossible to get past this with the algorithm i use
   b434e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   b4352:	6883      	ldr	r3, [r0, #8]
   b4354:	9201      	str	r2, [sp, #4]
        int bestColIndex = -1;

        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4356:	f04f 0a00 	mov.w	sl, #0
        int bestColIndex = -1;
   b435a:	f04f 30ff 	mov.w	r0, #4294967295
        return thumb != 0 &&
   b435e:	f893 9000 	ldrb.w	r9, [r3]
               pinky_high != 0 &&
   b4362:	f1b9 0f00 	cmp.w	r9, #0
   b4366:	d06b      	beq.n	b4440 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               pointer_high != 0 &&
   b4368:	f893 8001 	ldrb.w	r8, [r3, #1]
        return thumb != 0 &&
   b436c:	f1b8 0f00 	cmp.w	r8, #0
   b4370:	d066      	beq.n	b4440 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               pointer_low != 0 &&
   b4372:	f893 e002 	ldrb.w	lr, [r3, #2]
               pointer_high != 0 &&
   b4376:	f1be 0f00 	cmp.w	lr, #0
   b437a:	d061      	beq.n	b4440 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               middle_high != 0 &&
   b437c:	f893 c003 	ldrb.w	ip, [r3, #3]
               pointer_low != 0 &&
   b4380:	f1bc 0f00 	cmp.w	ip, #0
   b4384:	d05c      	beq.n	b4440 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               middle_low != 0 &&
   b4386:	791f      	ldrb	r7, [r3, #4]
               middle_high != 0 &&
   b4388:	2f00      	cmp	r7, #0
   b438a:	d059      	beq.n	b4440 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               ring_high != 0 &&
   b438c:	795e      	ldrb	r6, [r3, #5]
               middle_low != 0 &&
   b438e:	2e00      	cmp	r6, #0
   b4390:	d056      	beq.n	b4440 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               ring_low != 0 &&
   b4392:	799d      	ldrb	r5, [r3, #6]
               ring_high != 0 &&
   b4394:	2d00      	cmp	r5, #0
   b4396:	d053      	beq.n	b4440 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               pinky_high != 0 &&
   b4398:	79dc      	ldrb	r4, [r3, #7]
               ring_low != 0 &&
   b439a:	2c00      	cmp	r4, #0
   b439c:	d050      	beq.n	b4440 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               pinky_low != 0;
   b439e:	7a1a      	ldrb	r2, [r3, #8]
               pinky_high != 0 &&
   b43a0:	2a00      	cmp	r2, #0
   b43a2:	d04d      	beq.n	b4440 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
        val += abs(thumb - mulpC->thumb);
   b43a4:	f891 b000 	ldrb.w	fp, [r1]
   b43a8:	eba9 090b 	sub.w	r9, r9, fp
        val += abs(pointer_high - mulpC->pointer_high);
   b43ac:	f891 b001 	ldrb.w	fp, [r1, #1]
        val += abs(thumb - mulpC->thumb);
   b43b0:	f1b9 0f00 	cmp.w	r9, #0
        val += abs(pointer_high - mulpC->pointer_high);
   b43b4:	eba8 080b 	sub.w	r8, r8, fp
        val += abs(thumb - mulpC->thumb);
   b43b8:	bfb8      	it	lt
   b43ba:	f1c9 0900 	rsblt	r9, r9, #0
        val += abs(pointer_high - mulpC->pointer_high);
   b43be:	f1b8 0f00 	cmp.w	r8, #0
   b43c2:	bfb8      	it	lt
   b43c4:	f1c8 0800 	rsblt	r8, r8, #0
   b43c8:	44c1      	add	r9, r8
        val += abs(pointer_low - mulpC->pointer_low);
   b43ca:	f891 8002 	ldrb.w	r8, [r1, #2]
   b43ce:	ebae 0e08 	sub.w	lr, lr, r8
   b43d2:	f1be 0f00 	cmp.w	lr, #0
   b43d6:	bfb8      	it	lt
   b43d8:	f1ce 0e00 	rsblt	lr, lr, #0
   b43dc:	44ce      	add	lr, r9
        val += abs(middle_high - mulpC->middle_high);
   b43de:	f891 9003 	ldrb.w	r9, [r1, #3]
   b43e2:	ebac 0909 	sub.w	r9, ip, r9
        val += abs(middle_low - mulpC->middle_low);
   b43e6:	f891 c004 	ldrb.w	ip, [r1, #4]
   b43ea:	eba7 070c 	sub.w	r7, r7, ip
        val += abs(ring_high - mulpC->ring_high);
   b43ee:	f891 c005 	ldrb.w	ip, [r1, #5]
        val += abs(middle_high - mulpC->middle_high);
   b43f2:	f1b9 0f00 	cmp.w	r9, #0
        val += abs(ring_high - mulpC->ring_high);
   b43f6:	eba6 060c 	sub.w	r6, r6, ip
        val += abs(middle_high - mulpC->middle_high);
   b43fa:	bfb8      	it	lt
   b43fc:	f1c9 0900 	rsblt	r9, r9, #0
        val += abs(middle_low - mulpC->middle_low);
   b4400:	2f00      	cmp	r7, #0
   b4402:	bfb8      	it	lt
   b4404:	427f      	neglt	r7, r7
        val += abs(middle_high - mulpC->middle_high);
   b4406:	44f1      	add	r9, lr
        val += abs(ring_high - mulpC->ring_high);
   b4408:	2e00      	cmp	r6, #0
        val += abs(middle_low - mulpC->middle_low);
   b440a:	444f      	add	r7, r9
        val += abs(ring_high - mulpC->ring_high);
   b440c:	bfb8      	it	lt
   b440e:	4276      	neglt	r6, r6
   b4410:	443e      	add	r6, r7
        val += abs(ring_low - mulpC->ring_low);
   b4412:	798f      	ldrb	r7, [r1, #6]
   b4414:	1bed      	subs	r5, r5, r7
   b4416:	2d00      	cmp	r5, #0
   b4418:	bfb8      	it	lt
   b441a:	426d      	neglt	r5, r5
   b441c:	4435      	add	r5, r6
        val += abs(pinky_high - mulpC->pinky_high);
   b441e:	79ce      	ldrb	r6, [r1, #7]
   b4420:	1ba4      	subs	r4, r4, r6
   b4422:	2c00      	cmp	r4, #0
   b4424:	bfb8      	it	lt
   b4426:	4264      	neglt	r4, r4
   b4428:	442c      	add	r4, r5
        val += abs(pinky_low - mulpC->pinky_low);
   b442a:	7a0d      	ldrb	r5, [r1, #8]
   b442c:	1b52      	subs	r2, r2, r5
   b442e:	2a00      	cmp	r2, #0
   b4430:	bfb8      	it	lt
   b4432:	4252      	neglt	r2, r2
   b4434:	4422      	add	r2, r4
            MultiplexerCollection *curSign = &allSigns[i];
            if (curSign->isSet()) {
                int curVal = curSign->compare(comparedCol);
                if (curVal < bestVal) {
   b4436:	9c01      	ldr	r4, [sp, #4]
   b4438:	42a2      	cmp	r2, r4
   b443a:	bfbc      	itt	lt
   b443c:	4650      	movlt	r0, sl
   b443e:	9201      	strlt	r2, [sp, #4]
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4440:	f10a 0a01 	add.w	sl, sl, #1
   b4444:	f1ba 0f20 	cmp.w	sl, #32
   b4448:	f103 0309 	add.w	r3, r3, #9
   b444c:	d187      	bne.n	b435e <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x14>
                }
            }
        }

        return bestColIndex;
    }
   b444e:	b003      	add	sp, #12
   b4450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4454 <_ZN17ProgramController13handleRequestEh>:
            delay(500);
            sendCommand(STATUS, PROGRAM_SUCCESSFUL);
        }
    }

    void handleRequest(byte request) {
   b4454:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4456:	4605      	mov	r5, r0
   b4458:	b085      	sub	sp, #20
        if (request == BEST) {
   b445a:	b999      	cbnz	r1, b4484 <_ZN17ProgramController13handleRequestEh+0x30>
        MultiplexerCollection mpc(&myMulp);
   b445c:	4601      	mov	r1, r0
   b445e:	a801      	add	r0, sp, #4
   b4460:	f7ff fe6c 	bl	b413c <_ZN21MultiplexerCollectionC1EP11Multiplexer>
        return getBestCollection(&mpc);
   b4464:	a901      	add	r1, sp, #4
   b4466:	4628      	mov	r0, r5
   b4468:	f7ff ff6f 	bl	b434a <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>
            int bestCol = getBestCollection();
            if (bestCol == -1) {
   b446c:	1c43      	adds	r3, r0, #1
   b446e:	d106      	bne.n	b447e <_ZN17ProgramController13handleRequestEh+0x2a>
                sendCommand(STATUS, REQUEST_FAILED);
   b4470:	2112      	movs	r1, #18
   b4472:	2001      	movs	r0, #1
                allSigns[i].saveToEEPROM(i);
            }
            delay(500);
            sendCommand(STATUS, WIPE_SUCCESSFUL);
        }
    }
   b4474:	b005      	add	sp, #20
   b4476:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                sendCommand(STATUS, REQUEST_FAILED);
   b447a:	f7ff bf59 	b.w	b4330 <_Z11sendCommandhh>
                sendCommand(BEST_FINGER, bestCol);
   b447e:	b2c1      	uxtb	r1, r0
   b4480:	2003      	movs	r0, #3
   b4482:	e7f7      	b.n	b4474 <_ZN17ProgramController13handleRequestEh+0x20>
        } else if (request == WIPE) {
   b4484:	2901      	cmp	r1, #1
   b4486:	d13c      	bne.n	b4502 <_ZN17ProgramController13handleRequestEh+0xae>
            Serial.printf("WIPING\n");
   b4488:	f000 ff2c 	bl	b52e4 <_Z16_fetch_usbserialv>
   b448c:	491e      	ldr	r1, [pc, #120]	; (b4508 <_ZN17ProgramController13handleRequestEh+0xb4>)
                Serial.printf("Wiped %d/%d\n", i + 1, HAND_POS_COUNT);
   b448e:	4f1f      	ldr	r7, [pc, #124]	; (b450c <_ZN17ProgramController13handleRequestEh+0xb8>)
            Serial.printf("WIPING\n");
   b4490:	f7ff fe10 	bl	b40b4 <_ZN5Print6printfEPKcz>
            for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4494:	2400      	movs	r4, #0
                Serial.printf("Wiped %d/%d\n", i + 1, HAND_POS_COUNT);
   b4496:	4626      	mov	r6, r4
   b4498:	3401      	adds	r4, #1
   b449a:	f000 ff23 	bl	b52e4 <_Z16_fetch_usbserialv>
   b449e:	2320      	movs	r3, #32
   b44a0:	4622      	mov	r2, r4
   b44a2:	4639      	mov	r1, r7
   b44a4:	f7ff fe06 	bl	b40b4 <_ZN5Print6printfEPKcz>
                allSigns[i].set(&empty);
   b44a8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   b44ac:	68a9      	ldr	r1, [r5, #8]
        thumb = mulpC->thumb;
   b44ae:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b44b2:	3a09      	subs	r2, #9
   b44b4:	188b      	adds	r3, r1, r2
   b44b6:	5488      	strb	r0, [r1, r2]
        pointer_high = mulpC->pointer_high;
   b44b8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b44bc:	7059      	strb	r1, [r3, #1]
        pointer_low = mulpC->pointer_low;
   b44be:	f89d 1006 	ldrb.w	r1, [sp, #6]
   b44c2:	7099      	strb	r1, [r3, #2]
        middle_high = mulpC->middle_high;
   b44c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b44c8:	70d9      	strb	r1, [r3, #3]
        middle_low = mulpC->middle_low;
   b44ca:	f89d 1008 	ldrb.w	r1, [sp, #8]
   b44ce:	7119      	strb	r1, [r3, #4]
        ring_high = mulpC->ring_high;
   b44d0:	f89d 1009 	ldrb.w	r1, [sp, #9]
   b44d4:	7159      	strb	r1, [r3, #5]
        ring_low = mulpC->ring_low;
   b44d6:	f89d 100a 	ldrb.w	r1, [sp, #10]
   b44da:	7199      	strb	r1, [r3, #6]
        pinky_high = mulpC->pinky_high;
   b44dc:	f89d 100b 	ldrb.w	r1, [sp, #11]
   b44e0:	71d9      	strb	r1, [r3, #7]
        pinky_low = mulpC->pinky_low;
   b44e2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b44e6:	7219      	strb	r1, [r3, #8]
                allSigns[i].saveToEEPROM(i);
   b44e8:	68a8      	ldr	r0, [r5, #8]
   b44ea:	4631      	mov	r1, r6
   b44ec:	4410      	add	r0, r2
   b44ee:	f7ff fe7b 	bl	b41e8 <_ZN21MultiplexerCollection12saveToEEPROMEi>
            for (int i = 0; i < HAND_POS_COUNT; i++) {
   b44f2:	2c20      	cmp	r4, #32
   b44f4:	d1cf      	bne.n	b4496 <_ZN17ProgramController13handleRequestEh+0x42>
            delay(500);
   b44f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b44fa:	f000 fd7b 	bl	b4ff4 <delay>
            sendCommand(STATUS, WIPE_SUCCESSFUL);
   b44fe:	2101      	movs	r1, #1
   b4500:	e7b7      	b.n	b4472 <_ZN17ProgramController13handleRequestEh+0x1e>
    }
   b4502:	b005      	add	sp, #20
   b4504:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4506:	bf00      	nop
   b4508:	000b5a8a 	.word	0x000b5a8a
   b450c:	000b5a92 	.word	0x000b5a92

000b4510 <_ZN13SequenceSaver4pushE14FingerPosition>:

    ~SequenceSaver() {
        delete[] poses;
    }

    void push(FingerPosition pos) {
   b4510:	b510      	push	{r4, lr}
        for (int i = length - 1; i > 0; i--) {
   b4512:	6843      	ldr	r3, [r0, #4]
            poses[i] = poses[i - 1];
   b4514:	6802      	ldr	r2, [r0, #0]
        for (int i = length - 1; i > 0; i--) {
   b4516:	3b01      	subs	r3, #1
   b4518:	2b00      	cmp	r3, #0
   b451a:	dd04      	ble.n	b4526 <_ZN13SequenceSaver4pushE14FingerPosition+0x16>
            poses[i] = poses[i - 1];
   b451c:	18d4      	adds	r4, r2, r3
   b451e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   b4522:	54d4      	strb	r4, [r2, r3]
        for (int i = length - 1; i > 0; i--) {
   b4524:	e7f6      	b.n	b4514 <_ZN13SequenceSaver4pushE14FingerPosition+0x4>
        }
        poses[0] = pos;
   b4526:	7011      	strb	r1, [r2, #0]
    }
   b4528:	bd10      	pop	{r4, pc}
	...

000b452c <setup>:
MPU6050 myMPU;

SequenceSaver comparer(3);
SequenceSaver curData(3);

void setup() {
   b452c:	b538      	push	{r3, r4, r5, lr}
        pinMode(en, OUTPUT);
   b452e:	4c1f      	ldr	r4, [pc, #124]	; (b45ac <setup+0x80>)
   b4530:	2101      	movs	r1, #1
   b4532:	7820      	ldrb	r0, [r4, #0]
   b4534:	f001 f8f0 	bl	b5718 <pinMode>
        pinMode(s0, OUTPUT);
   b4538:	7860      	ldrb	r0, [r4, #1]
   b453a:	2101      	movs	r1, #1
   b453c:	f001 f8ec 	bl	b5718 <pinMode>
        pinMode(s1, OUTPUT);
   b4540:	78a0      	ldrb	r0, [r4, #2]
   b4542:	2101      	movs	r1, #1
   b4544:	f001 f8e8 	bl	b5718 <pinMode>
        pinMode(s2, OUTPUT);
   b4548:	78e0      	ldrb	r0, [r4, #3]
   b454a:	2101      	movs	r1, #1
   b454c:	f001 f8e4 	bl	b5718 <pinMode>
        pinMode(s3, OUTPUT);
   b4550:	7920      	ldrb	r0, [r4, #4]
   b4552:	2101      	movs	r1, #1
   b4554:	f001 f8e0 	bl	b5718 <pinMode>
        pinMode(sig, INPUT);
   b4558:	7960      	ldrb	r0, [r4, #5]
   b455a:	2100      	movs	r1, #0
   b455c:	f001 f8dc 	bl	b5718 <pinMode>
        set(index);
   b4560:	79a1      	ldrb	r1, [r4, #6]
   b4562:	4620      	mov	r0, r4
   b4564:	f7ff fdb4 	bl	b40d0 <_ZN11Multiplexer3setEh>
        digitalWrite(en, HIGH);
   b4568:	7820      	ldrb	r0, [r4, #0]
   b456a:	2101      	movs	r1, #1
   b456c:	f001 f8e5 	bl	b573a <digitalWrite>
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4570:	2500      	movs	r5, #0
            allSigns[i].loadFromEEPROM(i);
   b4572:	68a0      	ldr	r0, [r4, #8]
   b4574:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   b4578:	4629      	mov	r1, r5
   b457a:	4418      	add	r0, r3
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b457c:	3501      	adds	r5, #1
            allSigns[i].loadFromEEPROM(i);
   b457e:	f7ff fe80 	bl	b4282 <_ZN21MultiplexerCollection14loadFromEEPROMEi>
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4582:	2d20      	cmp	r5, #32
   b4584:	d1f5      	bne.n	b4572 <setup+0x46>
        isProgrammerEnabled = true;
   b4586:	2301      	movs	r3, #1
    programmer.begin();
    programmer.enableProgrammer(); // Enables programming the controller via byte commands if needed
    myMPU.begin();
   b4588:	4809      	ldr	r0, [pc, #36]	; (b45b0 <setup+0x84>)
   b458a:	7323      	strb	r3, [r4, #12]
   b458c:	f000 f9c4 	bl	b4918 <_ZN7MPU60505beginEv>
    comparer.push(F_10011);
   b4590:	4808      	ldr	r0, [pc, #32]	; (b45b4 <setup+0x88>)
   b4592:	2113      	movs	r1, #19
   b4594:	f7ff ffbc 	bl	b4510 <_ZN13SequenceSaver4pushE14FingerPosition>
    comparer.push(F_00010);
   b4598:	4806      	ldr	r0, [pc, #24]	; (b45b4 <setup+0x88>)
   b459a:	2102      	movs	r1, #2
   b459c:	f7ff ffb8 	bl	b4510 <_ZN13SequenceSaver4pushE14FingerPosition>
    comparer.push(F_00110);
   b45a0:	4804      	ldr	r0, [pc, #16]	; (b45b4 <setup+0x88>)
   b45a2:	2106      	movs	r1, #6
   b45a4:	f7ff ffb4 	bl	b4510 <_ZN13SequenceSaver4pushE14FingerPosition>
}
   b45a8:	bd38      	pop	{r3, r4, r5, pc}
   b45aa:	bf00      	nop
   b45ac:	2003e6a0 	.word	0x2003e6a0
   b45b0:	2003e68c 	.word	0x2003e68c
   b45b4:	2003e67c 	.word	0x2003e67c

000b45b8 <_Z9timer10MSv>:
            lastChangeTime = curTime;
        }
    }
}

bool timer10MS() {
   b45b8:	b538      	push	{r3, r4, r5, lr}
    static int lastTime = millis();
   b45ba:	4d0e      	ldr	r5, [pc, #56]	; (b45f4 <_Z9timer10MSv+0x3c>)
   b45bc:	4c0e      	ldr	r4, [pc, #56]	; (b45f8 <_Z9timer10MSv+0x40>)
   b45be:	782b      	ldrb	r3, [r5, #0]
   b45c0:	f3bf 8f5b 	dmb	ish
   b45c4:	f013 0f01 	tst.w	r3, #1
   b45c8:	d109      	bne.n	b45de <_Z9timer10MSv+0x26>
   b45ca:	4628      	mov	r0, r5
   b45cc:	f7ff fd65 	bl	b409a <__cxa_guard_acquire>
   b45d0:	b128      	cbz	r0, b45de <_Z9timer10MSv+0x26>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b45d2:	f000 fa53 	bl	b4a7c <HAL_Timer_Get_Milli_Seconds>
   b45d6:	6020      	str	r0, [r4, #0]
   b45d8:	4628      	mov	r0, r5
   b45da:	f7ff fd63 	bl	b40a4 <__cxa_guard_release>
   b45de:	f000 fa4d 	bl	b4a7c <HAL_Timer_Get_Milli_Seconds>
    int curTime = millis();

    if (curTime - lastTime > 10) {
   b45e2:	6823      	ldr	r3, [r4, #0]
   b45e4:	1ac3      	subs	r3, r0, r3
   b45e6:	2b0a      	cmp	r3, #10
        lastTime = curTime;
   b45e8:	bfca      	itet	gt
   b45ea:	6020      	strgt	r0, [r4, #0]
        return true;
    }
    return false;
   b45ec:	2000      	movle	r0, #0
        return true;
   b45ee:	2001      	movgt	r0, #1
   b45f0:	bd38      	pop	{r3, r4, r5, pc}
   b45f2:	bf00      	nop
   b45f4:	2003e66c 	.word	0x2003e66c
   b45f8:	2003e678 	.word	0x2003e678

000b45fc <loop>:
void loop() {
   b45fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (isProgrammerEnabled && Serial.available() > 0) {
   b4600:	4c60      	ldr	r4, [pc, #384]	; (b4784 <loop+0x188>)
   b4602:	7b23      	ldrb	r3, [r4, #12]
   b4604:	b085      	sub	sp, #20
   b4606:	2b00      	cmp	r3, #0
   b4608:	d04d      	beq.n	b46a6 <loop+0xaa>
   b460a:	f000 fe6b 	bl	b52e4 <_Z16_fetch_usbserialv>
   b460e:	6803      	ldr	r3, [r0, #0]
   b4610:	691b      	ldr	r3, [r3, #16]
   b4612:	4798      	blx	r3
   b4614:	2800      	cmp	r0, #0
   b4616:	dd46      	ble.n	b46a6 <loop+0xaa>
            readCommand(&cmd, &data);
   b4618:	f10d 0103 	add.w	r1, sp, #3
   b461c:	f10d 0002 	add.w	r0, sp, #2
   b4620:	f7ff fe6b 	bl	b42fa <_Z11readCommandPhS_>
            switch (cmd) {
   b4624:	f89d 6002 	ldrb.w	r6, [sp, #2]
   b4628:	b11e      	cbz	r6, b4632 <loop+0x36>
   b462a:	2e02      	cmp	r6, #2
   b462c:	d036      	beq.n	b469c <loop+0xa0>
                sendCommand(STATUS, UNIMPLEMENTED_COMMAND);
   b462e:	2110      	movs	r1, #16
   b4630:	e030      	b.n	b4694 <loop+0x98>
                programFingerPosition(data);
   b4632:	f89d 5003 	ldrb.w	r5, [sp, #3]
        if (fingerPos < HAND_POS_COUNT) {
   b4636:	2d1f      	cmp	r5, #31
   b4638:	d835      	bhi.n	b46a6 <loop+0xaa>
            MultiplexerCollection mpc(&myMulp);
   b463a:	4621      	mov	r1, r4
   b463c:	a801      	add	r0, sp, #4
   b463e:	f7ff fd7d 	bl	b413c <_ZN21MultiplexerCollectionC1EP11Multiplexer>
            allSigns[fingerPos].set(&mpc);
   b4642:	68a1      	ldr	r1, [r4, #8]
        thumb = mulpC->thumb;
   b4644:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b4648:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   b464c:	188b      	adds	r3, r1, r2
   b464e:	5488      	strb	r0, [r1, r2]
        pointer_high = mulpC->pointer_high;
   b4650:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b4654:	7059      	strb	r1, [r3, #1]
        pointer_low = mulpC->pointer_low;
   b4656:	f89d 1006 	ldrb.w	r1, [sp, #6]
   b465a:	7099      	strb	r1, [r3, #2]
        middle_high = mulpC->middle_high;
   b465c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4660:	70d9      	strb	r1, [r3, #3]
        middle_low = mulpC->middle_low;
   b4662:	f89d 1008 	ldrb.w	r1, [sp, #8]
   b4666:	7119      	strb	r1, [r3, #4]
        ring_high = mulpC->ring_high;
   b4668:	f89d 1009 	ldrb.w	r1, [sp, #9]
   b466c:	7159      	strb	r1, [r3, #5]
        ring_low = mulpC->ring_low;
   b466e:	f89d 100a 	ldrb.w	r1, [sp, #10]
   b4672:	7199      	strb	r1, [r3, #6]
        pinky_high = mulpC->pinky_high;
   b4674:	f89d 100b 	ldrb.w	r1, [sp, #11]
   b4678:	71d9      	strb	r1, [r3, #7]
        pinky_low = mulpC->pinky_low;
   b467a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b467e:	7219      	strb	r1, [r3, #8]
            allSigns[fingerPos].saveToEEPROM(fingerPos);
   b4680:	68a0      	ldr	r0, [r4, #8]
   b4682:	4629      	mov	r1, r5
   b4684:	4410      	add	r0, r2
   b4686:	f7ff fdaf 	bl	b41e8 <_ZN21MultiplexerCollection12saveToEEPROMEi>
            delay(500);
   b468a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b468e:	f000 fcb1 	bl	b4ff4 <delay>
            sendCommand(STATUS, PROGRAM_SUCCESSFUL);
   b4692:	4631      	mov	r1, r6
                sendCommand(STATUS, UNIMPLEMENTED_COMMAND);
   b4694:	2001      	movs	r0, #1
   b4696:	f7ff fe4b 	bl	b4330 <_Z11sendCommandhh>
    }
   b469a:	e004      	b.n	b46a6 <loop+0xaa>
                handleRequest(data);
   b469c:	f89d 1003 	ldrb.w	r1, [sp, #3]
   b46a0:	4620      	mov	r0, r4
   b46a2:	f7ff fed7 	bl	b4454 <_ZN17ProgramController13handleRequestEh>
    if (timer10MS()) {
   b46a6:	f7ff ff87 	bl	b45b8 <_Z9timer10MSv>
   b46aa:	2800      	cmp	r0, #0
   b46ac:	d066      	beq.n	b477c <loop+0x180>
        static int lastChangeTime = millis();
   b46ae:	4c36      	ldr	r4, [pc, #216]	; (b4788 <loop+0x18c>)
   b46b0:	7823      	ldrb	r3, [r4, #0]
   b46b2:	f3bf 8f5b 	dmb	ish
   b46b6:	07db      	lsls	r3, r3, #31
   b46b8:	d40a      	bmi.n	b46d0 <loop+0xd4>
   b46ba:	4620      	mov	r0, r4
   b46bc:	f7ff fced 	bl	b409a <__cxa_guard_acquire>
   b46c0:	b130      	cbz	r0, b46d0 <loop+0xd4>
   b46c2:	f000 f9db 	bl	b4a7c <HAL_Timer_Get_Milli_Seconds>
   b46c6:	4b31      	ldr	r3, [pc, #196]	; (b478c <loop+0x190>)
   b46c8:	6018      	str	r0, [r3, #0]
   b46ca:	4620      	mov	r0, r4
   b46cc:	f7ff fcea 	bl	b40a4 <__cxa_guard_release>
        MultiplexerCollection mpc(&myMulp);
   b46d0:	492c      	ldr	r1, [pc, #176]	; (b4784 <loop+0x188>)
        if (lastPos != curPos) {
   b46d2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b47a0 <loop+0x1a4>
   b46d6:	a801      	add	r0, sp, #4
   b46d8:	f7ff fd30 	bl	b413c <_ZN21MultiplexerCollectionC1EP11Multiplexer>
        return getBestCollection(&mpc);
   b46dc:	a901      	add	r1, sp, #4
   b46de:	4829      	ldr	r0, [pc, #164]	; (b4784 <loop+0x188>)
   b46e0:	f7ff fe33 	bl	b434a <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>
        FingerPosition curPos = (FingerPosition)programmer.getBestCollection();
   b46e4:	b2c4      	uxtb	r4, r0
   b46e6:	4606      	mov	r6, r0
   b46e8:	f000 f9c8 	bl	b4a7c <HAL_Timer_Get_Milli_Seconds>
        if (lastPos != curPos) {
   b46ec:	f898 3000 	ldrb.w	r3, [r8]
   b46f0:	42a3      	cmp	r3, r4
   b46f2:	4605      	mov	r5, r0
   b46f4:	d042      	beq.n	b477c <loop+0x180>
            if (curTime - lastChangeTime > 600 && lastAdded != curPos) {
   b46f6:	4f25      	ldr	r7, [pc, #148]	; (b478c <loop+0x190>)
   b46f8:	683b      	ldr	r3, [r7, #0]
   b46fa:	1ac3      	subs	r3, r0, r3
   b46fc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4700:	dd39      	ble.n	b4776 <loop+0x17a>
   b4702:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b47a4 <loop+0x1a8>
   b4706:	f899 3000 	ldrb.w	r3, [r9]
   b470a:	42a3      	cmp	r3, r4
   b470c:	d033      	beq.n	b4776 <loop+0x17a>
                curData.push(curPos);
   b470e:	4621      	mov	r1, r4
   b4710:	481f      	ldr	r0, [pc, #124]	; (b4790 <loop+0x194>)
   b4712:	f7ff fefd 	bl	b4510 <_ZN13SequenceSaver4pushE14FingerPosition>
                lastAdded = curPos;
   b4716:	f889 4000 	strb.w	r4, [r9]
                Serial.printf("Added ");
   b471a:	f000 fde3 	bl	b52e4 <_Z16_fetch_usbserialv>
   b471e:	491d      	ldr	r1, [pc, #116]	; (b4794 <loop+0x198>)
   b4720:	f7ff fcc8 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x10) >> 4);
   b4724:	f000 fdde 	bl	b52e4 <_Z16_fetch_usbserialv>
   b4728:	491b      	ldr	r1, [pc, #108]	; (b4798 <loop+0x19c>)
   b472a:	f3c4 1200 	ubfx	r2, r4, #4, #1
   b472e:	f7ff fcc1 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x08) >> 3);
   b4732:	f000 fdd7 	bl	b52e4 <_Z16_fetch_usbserialv>
   b4736:	4918      	ldr	r1, [pc, #96]	; (b4798 <loop+0x19c>)
   b4738:	f3c4 02c0 	ubfx	r2, r4, #3, #1
   b473c:	f7ff fcba 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x04) >> 2);
   b4740:	f000 fdd0 	bl	b52e4 <_Z16_fetch_usbserialv>
   b4744:	4914      	ldr	r1, [pc, #80]	; (b4798 <loop+0x19c>)
   b4746:	f3c4 0280 	ubfx	r2, r4, #2, #1
   b474a:	f7ff fcb3 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x02) >> 1);
   b474e:	f000 fdc9 	bl	b52e4 <_Z16_fetch_usbserialv>
   b4752:	4911      	ldr	r1, [pc, #68]	; (b4798 <loop+0x19c>)
   b4754:	f3c4 0240 	ubfx	r2, r4, #1, #1
   b4758:	f7ff fcac 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x01));
   b475c:	f000 fdc2 	bl	b52e4 <_Z16_fetch_usbserialv>
   b4760:	490d      	ldr	r1, [pc, #52]	; (b4798 <loop+0x19c>)
   b4762:	f006 0201 	and.w	r2, r6, #1
   b4766:	f7ff fca5 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf(" to curData\n", curPos);
   b476a:	f000 fdbb 	bl	b52e4 <_Z16_fetch_usbserialv>
   b476e:	490b      	ldr	r1, [pc, #44]	; (b479c <loop+0x1a0>)
   b4770:	4622      	mov	r2, r4
   b4772:	f7ff fc9f 	bl	b40b4 <_ZN5Print6printfEPKcz>
            lastPos = curPos;
   b4776:	f888 4000 	strb.w	r4, [r8]
            lastChangeTime = curTime;
   b477a:	603d      	str	r5, [r7, #0]
}
   b477c:	b005      	add	sp, #20
   b477e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4782:	bf00      	nop
   b4784:	2003e6a0 	.word	0x2003e6a0
   b4788:	2003e668 	.word	0x2003e668
   b478c:	2003e670 	.word	0x2003e670
   b4790:	2003e684 	.word	0x2003e684
   b4794:	000b5a9f 	.word	0x000b5a9f
   b4798:	000b5aa6 	.word	0x000b5aa6
   b479c:	000b5aa9 	.word	0x000b5aa9
   b47a0:	2003e674 	.word	0x2003e674
   b47a4:	2003e675 	.word	0x2003e675

000b47a8 <_GLOBAL__sub_I_SystemMode>:
   b47a8:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b47aa:	4b13      	ldr	r3, [pc, #76]	; (b47f8 <_GLOBAL__sub_I_SystemMode+0x50>)
    SleepResult() {}
   b47ac:	4a13      	ldr	r2, [pc, #76]	; (b47fc <_GLOBAL__sub_I_SystemMode+0x54>)
   b47ae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b47b0:	2500      	movs	r5, #0
   b47b2:	e9c3 5500 	strd	r5, r5, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b47b6:	2002      	movs	r0, #2
   b47b8:	f000 fa68 	bl	b4c8c <set_system_mode>
    ProgramController(int P_MULP_ENABLE, int P_MULP_S0, int P_MULP_S1, int P_MULP_S2, int P_MULP_S3, int P_MULP_SIGNAL) : myMulp(P_MULP_ENABLE, P_MULP_S0, P_MULP_S1, P_MULP_S2, P_MULP_S3, P_MULP_SIGNAL) {
   b47bc:	4c10      	ldr	r4, [pc, #64]	; (b4800 <_GLOBAL__sub_I_SystemMode+0x58>)
   b47be:	4a11      	ldr	r2, [pc, #68]	; (b4804 <_GLOBAL__sub_I_SystemMode+0x5c>)
   b47c0:	7325      	strb	r5, [r4, #12]
   b47c2:	f241 3305 	movw	r3, #4869	; 0x1305
   b47c6:	e9c4 2300 	strd	r2, r3, [r4]
        allSigns = new MultiplexerCollection[HAND_POS_COUNT];
   b47ca:	f44f 7090 	mov.w	r0, #288	; 0x120
   b47ce:	f7ff fc60 	bl	b4092 <_Znaj>
        this->length = length;
   b47d2:	4d0d      	ldr	r5, [pc, #52]	; (b4808 <_GLOBAL__sub_I_SystemMode+0x60>)
   b47d4:	60a0      	str	r0, [r4, #8]

    void loadPowerManagement1Config();
    void savePowerManagement1Config();

public:
    MPU6050() : MPU6050(MPU6050_ADDRESS_GROUND) {}
   b47d6:	2168      	movs	r1, #104	; 0x68
   b47d8:	2403      	movs	r4, #3
   b47da:	480c      	ldr	r0, [pc, #48]	; (b480c <_GLOBAL__sub_I_SystemMode+0x64>)
   b47dc:	f000 f899 	bl	b4912 <_ZN7MPU6050C1Eh>
   b47e0:	606c      	str	r4, [r5, #4]
        poses = new FingerPosition[length];
   b47e2:	4620      	mov	r0, r4
   b47e4:	f7ff fc55 	bl	b4092 <_Znaj>
   b47e8:	6028      	str	r0, [r5, #0]
        this->length = length;
   b47ea:	4d09      	ldr	r5, [pc, #36]	; (b4810 <_GLOBAL__sub_I_SystemMode+0x68>)
        poses = new FingerPosition[length];
   b47ec:	4620      	mov	r0, r4
        this->length = length;
   b47ee:	606c      	str	r4, [r5, #4]
        poses = new FingerPosition[length];
   b47f0:	f7ff fc4f 	bl	b4092 <_Znaj>
   b47f4:	6028      	str	r0, [r5, #0]
   b47f6:	bd38      	pop	{r3, r4, r5, pc}
   b47f8:	2003e65c 	.word	0x2003e65c
   b47fc:	ffff0000 	.word	0xffff0000
   b4800:	2003e6a0 	.word	0x2003e6a0
   b4804:	04030206 	.word	0x04030206
   b4808:	2003e67c 	.word	0x2003e67c
   b480c:	2003e68c 	.word	0x2003e68c
   b4810:	2003e684 	.word	0x2003e684

000b4814 <_ZN7MPU605019loadGyroscopeConfigEv>:
    loadAccelerometerConfig();
    loadPowerManagement1Config();
    loadInterruptEnableConfig();
}

void MPU6050::loadGyroscopeConfig() {
   b4814:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, GYRO_CONFIG);
   b4816:	221b      	movs	r2, #27
void MPU6050::loadGyroscopeConfig() {
   b4818:	4604      	mov	r4, r0
    WireReader reader(_address, GYRO_CONFIG);
   b481a:	7801      	ldrb	r1, [r0, #0]
   b481c:	2301      	movs	r3, #1
   b481e:	a801      	add	r0, sp, #4
   b4820:	f000 f8c4 	bl	b49ac <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b4824:	a801      	add	r0, sp, #4
   b4826:	f000 f8e0 	bl	b49ea <_ZN10WireReader4readEv>

    XG_ST = (cfg & 0b10000000) >> 7;
   b482a:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   b482e:	70a3      	strb	r3, [r4, #2]
    YG_ST = (cfg & 0b01000000) >> 6;
   b4830:	f3c0 1380 	ubfx	r3, r0, #6, #1
   b4834:	70e3      	strb	r3, [r4, #3]
    ZG_ST = (cfg & 0b00100000) >> 5;
   b4836:	f3c0 1340 	ubfx	r3, r0, #5, #1
   b483a:	7123      	strb	r3, [r4, #4]
    FS_SEL = (cfg & 0b00011000) >> 3;
   b483c:	f3c0 03c1 	ubfx	r3, r0, #3, #2
   b4840:	7163      	strb	r3, [r4, #5]
    WireReader reader(_address, GYRO_CONFIG);
   b4842:	a801      	add	r0, sp, #4
   b4844:	f000 f89e 	bl	b4984 <_ZN10WireReaderD1Ev>
}
   b4848:	b002      	add	sp, #8
   b484a:	bd10      	pop	{r4, pc}

000b484c <_ZN7MPU605023loadAccelerometerConfigEv>:
               (FS_SEL << 3);
    WireWriter writer(_address, GYRO_CONFIG);
    writer.write(cfg);
}

void MPU6050::loadAccelerometerConfig() {
   b484c:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, ACCEL_CONFIG);
   b484e:	221c      	movs	r2, #28
void MPU6050::loadAccelerometerConfig() {
   b4850:	4604      	mov	r4, r0
    WireReader reader(_address, ACCEL_CONFIG);
   b4852:	7801      	ldrb	r1, [r0, #0]
   b4854:	2301      	movs	r3, #1
   b4856:	a801      	add	r0, sp, #4
   b4858:	f000 f8a8 	bl	b49ac <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b485c:	a801      	add	r0, sp, #4
   b485e:	f000 f8c4 	bl	b49ea <_ZN10WireReader4readEv>

    XA_ST = (cfg & 0b10000000) >> 7;
   b4862:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   b4866:	71a3      	strb	r3, [r4, #6]
    YA_ST = (cfg & 0b01000000) >> 6;
   b4868:	f3c0 1380 	ubfx	r3, r0, #6, #1
   b486c:	71e3      	strb	r3, [r4, #7]
    ZA_ST = (cfg & 0b00100000) >> 5;
   b486e:	f3c0 1340 	ubfx	r3, r0, #5, #1
   b4872:	7223      	strb	r3, [r4, #8]
    AFS_SEL = (cfg & 0b00011000) >> 3;
   b4874:	f3c0 03c1 	ubfx	r3, r0, #3, #2
   b4878:	7263      	strb	r3, [r4, #9]
    WireReader reader(_address, ACCEL_CONFIG);
   b487a:	a801      	add	r0, sp, #4
   b487c:	f000 f882 	bl	b4984 <_ZN10WireReaderD1Ev>
}
   b4880:	b002      	add	sp, #8
   b4882:	bd10      	pop	{r4, pc}

000b4884 <_ZN7MPU605025loadInterruptEnableConfigEv>:
               (AFS_SEL << 3);
    WireWriter writer(_address, ACCEL_CONFIG);
    writer.write(cfg);
}

void MPU6050::loadInterruptEnableConfig() {
   b4884:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, INT_ENABLE);
   b4886:	2238      	movs	r2, #56	; 0x38
   b4888:	7801      	ldrb	r1, [r0, #0]
void MPU6050::loadInterruptEnableConfig() {
   b488a:	4604      	mov	r4, r0
    WireReader reader(_address, INT_ENABLE);
   b488c:	2301      	movs	r3, #1
   b488e:	a801      	add	r0, sp, #4
   b4890:	f000 f88c 	bl	b49ac <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b4894:	a801      	add	r0, sp, #4
   b4896:	f000 f8a8 	bl	b49ea <_ZN10WireReader4readEv>
    FIFO_OFLOW_EN = (cfg & 0b00010000) >> 4;
   b489a:	f3c0 1300 	ubfx	r3, r0, #4, #1
   b489e:	72a3      	strb	r3, [r4, #10]
    I2C_MST_INT_EN = (cfg & 0b00001000) >> 3;
   b48a0:	f3c0 03c0 	ubfx	r3, r0, #3, #1
   b48a4:	72e3      	strb	r3, [r4, #11]
    DATA_RDY_EN = (cfg & 0b00000001);
   b48a6:	f000 0301 	and.w	r3, r0, #1
   b48aa:	7323      	strb	r3, [r4, #12]
    WireReader reader(_address, INT_ENABLE);
   b48ac:	a801      	add	r0, sp, #4
   b48ae:	f000 f869 	bl	b4984 <_ZN10WireReaderD1Ev>
}
   b48b2:	b002      	add	sp, #8
   b48b4:	bd10      	pop	{r4, pc}

000b48b6 <_ZN7MPU605026loadPowerManagement1ConfigEv>:
               (DATA_RDY_EN);
    WireWriter writer(_address, INT_ENABLE);
    writer.write(cfg);
}

void MPU6050::loadPowerManagement1Config() {
   b48b6:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, PWR_MGMT_1);
   b48b8:	226b      	movs	r2, #107	; 0x6b
void MPU6050::loadPowerManagement1Config() {
   b48ba:	4604      	mov	r4, r0
    WireReader reader(_address, PWR_MGMT_1);
   b48bc:	7801      	ldrb	r1, [r0, #0]
   b48be:	2301      	movs	r3, #1
   b48c0:	a801      	add	r0, sp, #4
   b48c2:	f000 f873 	bl	b49ac <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b48c6:	a801      	add	r0, sp, #4
   b48c8:	f000 f88f 	bl	b49ea <_ZN10WireReader4readEv>

    DEVICE_RESET = (cfg & 0b10000000) >> 7;
   b48cc:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   b48d0:	7363      	strb	r3, [r4, #13]
    SLEEP = (cfg & 0b01000000) >> 6;
   b48d2:	f3c0 1380 	ubfx	r3, r0, #6, #1
   b48d6:	73a3      	strb	r3, [r4, #14]
    CYCLE = (cfg & 0b00100000) >> 5;
   b48d8:	f3c0 1340 	ubfx	r3, r0, #5, #1
   b48dc:	73e3      	strb	r3, [r4, #15]
    TEMP_DIS = (cfg & 0b00001000) >> 3;
   b48de:	f3c0 03c0 	ubfx	r3, r0, #3, #1
   b48e2:	7423      	strb	r3, [r4, #16]
    CLKSEL = (cfg & 0b00000111);
   b48e4:	f000 0307 	and.w	r3, r0, #7
   b48e8:	7463      	strb	r3, [r4, #17]
    WireReader reader(_address, PWR_MGMT_1);
   b48ea:	a801      	add	r0, sp, #4
   b48ec:	f000 f84a 	bl	b4984 <_ZN10WireReaderD1Ev>
}
   b48f0:	b002      	add	sp, #8
   b48f2:	bd10      	pop	{r4, pc}

000b48f4 <_ZN7MPU605013loadAllConfigEv>:
void MPU6050::loadAllConfig() {
   b48f4:	b510      	push	{r4, lr}
   b48f6:	4604      	mov	r4, r0
    loadGyroscopeConfig();
   b48f8:	f7ff ff8c 	bl	b4814 <_ZN7MPU605019loadGyroscopeConfigEv>
    loadAccelerometerConfig();
   b48fc:	4620      	mov	r0, r4
   b48fe:	f7ff ffa5 	bl	b484c <_ZN7MPU605023loadAccelerometerConfigEv>
    loadPowerManagement1Config();
   b4902:	4620      	mov	r0, r4
   b4904:	f7ff ffd7 	bl	b48b6 <_ZN7MPU605026loadPowerManagement1ConfigEv>
    loadInterruptEnableConfig();
   b4908:	4620      	mov	r0, r4
}
   b490a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    loadInterruptEnableConfig();
   b490e:	f7ff bfb9 	b.w	b4884 <_ZN7MPU605025loadInterruptEnableConfigEv>

000b4912 <_ZN7MPU6050C1Eh>:
}

// Public Functions

MPU6050::MPU6050(byte address) {
    _address = address;
   b4912:	7001      	strb	r1, [r0, #0]
}
   b4914:	4770      	bx	lr
	...

000b4918 <_ZN7MPU60505beginEv>:

void MPU6050::begin() {
   b4918:	b513      	push	{r0, r1, r4, lr}
   b491a:	4604      	mov	r4, r0
    if (!Wire.isEnabled()) {
   b491c:	f000 ffaa 	bl	b5874 <_Z19__fetch_global_Wirev>
   b4920:	f000 fdcd 	bl	b54be <_ZN7TwoWire9isEnabledEv>
   b4924:	b940      	cbnz	r0, b4938 <_ZN7MPU60505beginEv+0x20>
        Serial.printf("MPU6050 > Enabling Wire\n");
   b4926:	f000 fcdd 	bl	b52e4 <_Z16_fetch_usbserialv>
   b492a:	490c      	ldr	r1, [pc, #48]	; (b495c <_ZN7MPU60505beginEv+0x44>)
   b492c:	f7ff fbc2 	bl	b40b4 <_ZN5Print6printfEPKcz>
        Wire.begin();
   b4930:	f000 ffa0 	bl	b5874 <_Z19__fetch_global_Wirev>
   b4934:	f000 fd8c 	bl	b5450 <_ZN7TwoWire5beginEv>
    }

    loadAllConfig();
   b4938:	4620      	mov	r0, r4
   b493a:	f7ff ffdb 	bl	b48f4 <_ZN7MPU605013loadAllConfigEv>

    {
        WireWriter writer(_address, PWR_MGMT_1);
   b493e:	226b      	movs	r2, #107	; 0x6b
   b4940:	7821      	ldrb	r1, [r4, #0]
   b4942:	a801      	add	r0, sp, #4
   b4944:	f000 f80c 	bl	b4960 <_ZN10WireWriterC1Ehh>
        writer.write(0x00);
   b4948:	2100      	movs	r1, #0
   b494a:	a801      	add	r0, sp, #4
   b494c:	f000 f823 	bl	b4996 <_ZN10WireWriter5writeEh>
        WireWriter writer(_address, PWR_MGMT_1);
   b4950:	a801      	add	r0, sp, #4
   b4952:	f000 f817 	bl	b4984 <_ZN10WireReaderD1Ev>
    }
}
   b4956:	b002      	add	sp, #8
   b4958:	bd10      	pop	{r4, pc}
   b495a:	bf00      	nop
   b495c:	000b5ab6 	.word	0x000b5ab6

000b4960 <_ZN10WireWriterC1Ehh>:
#include "I2CHelper.h"

// ------------- Wire Writer --------------

WireWriter::WireWriter(byte address, byte reg) {
   b4960:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4962:	4615      	mov	r5, r2
   b4964:	4604      	mov	r4, r0
   b4966:	9101      	str	r1, [sp, #4]
    Wire.beginTransmission(address);
   b4968:	f000 ff84 	bl	b5874 <_Z19__fetch_global_Wirev>
   b496c:	9901      	ldr	r1, [sp, #4]
   b496e:	f000 fd9e 	bl	b54ae <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(reg);
   b4972:	f000 ff7f 	bl	b5874 <_Z19__fetch_global_Wirev>
   b4976:	6803      	ldr	r3, [r0, #0]
   b4978:	4629      	mov	r1, r5
   b497a:	689b      	ldr	r3, [r3, #8]
   b497c:	4798      	blx	r3
}
   b497e:	4620      	mov	r0, r4
   b4980:	b003      	add	sp, #12
   b4982:	bd30      	pop	{r4, r5, pc}

000b4984 <_ZN10WireReaderD1Ev>:

WireWriter::~WireWriter() {
   b4984:	b510      	push	{r4, lr}
   b4986:	4604      	mov	r4, r0
    Wire.endTransmission(true);
   b4988:	f000 ff74 	bl	b5874 <_Z19__fetch_global_Wirev>
   b498c:	2101      	movs	r1, #1
   b498e:	f000 fd92 	bl	b54b6 <_ZN7TwoWire15endTransmissionEh>
}
   b4992:	4620      	mov	r0, r4
   b4994:	bd10      	pop	{r4, pc}

000b4996 <_ZN10WireWriter5writeEh>:

void WireWriter::write(byte data) {
   b4996:	b507      	push	{r0, r1, r2, lr}
   b4998:	9101      	str	r1, [sp, #4]
    Wire.write(data);
   b499a:	f000 ff6b 	bl	b5874 <_Z19__fetch_global_Wirev>
   b499e:	6803      	ldr	r3, [r0, #0]
   b49a0:	9901      	ldr	r1, [sp, #4]
   b49a2:	689b      	ldr	r3, [r3, #8]
}
   b49a4:	b003      	add	sp, #12
   b49a6:	f85d eb04 	ldr.w	lr, [sp], #4
    Wire.write(data);
   b49aa:	4718      	bx	r3

000b49ac <_ZN10WireReaderC1Ehhh>:

// ------------- Wire Reader --------------

WireReader::WireReader(byte address, byte reg, byte count) {
   b49ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b49ae:	460c      	mov	r4, r1
   b49b0:	4616      	mov	r6, r2
   b49b2:	9301      	str	r3, [sp, #4]
   b49b4:	4605      	mov	r5, r0
    Wire.beginTransmission(address);
   b49b6:	f000 ff5d 	bl	b5874 <_Z19__fetch_global_Wirev>
   b49ba:	4621      	mov	r1, r4
   b49bc:	f000 fd77 	bl	b54ae <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(reg);
   b49c0:	f000 ff58 	bl	b5874 <_Z19__fetch_global_Wirev>
   b49c4:	6803      	ldr	r3, [r0, #0]
   b49c6:	4631      	mov	r1, r6
   b49c8:	689b      	ldr	r3, [r3, #8]
   b49ca:	4798      	blx	r3
    Wire.endTransmission(false);
   b49cc:	f000 ff52 	bl	b5874 <_Z19__fetch_global_Wirev>
   b49d0:	2100      	movs	r1, #0
   b49d2:	f000 fd70 	bl	b54b6 <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(address, count, false);
   b49d6:	f000 ff4d 	bl	b5874 <_Z19__fetch_global_Wirev>
   b49da:	9a01      	ldr	r2, [sp, #4]
   b49dc:	2300      	movs	r3, #0
   b49de:	4621      	mov	r1, r4
   b49e0:	f000 fd53 	bl	b548a <_ZN7TwoWire11requestFromEhjh>
}
   b49e4:	4628      	mov	r0, r5
   b49e6:	b002      	add	sp, #8
   b49e8:	bd70      	pop	{r4, r5, r6, pc}

000b49ea <_ZN10WireReader4readEv>:

WireReader::~WireReader() {
    Wire.endTransmission(true);
}

byte WireReader::read() {
   b49ea:	b508      	push	{r3, lr}
    return (byte)Wire.read();
   b49ec:	f000 ff42 	bl	b5874 <_Z19__fetch_global_Wirev>
   b49f0:	6803      	ldr	r3, [r0, #0]
   b49f2:	695b      	ldr	r3, [r3, #20]
   b49f4:	4798      	blx	r3
}
   b49f6:	b2c0      	uxtb	r0, r0
   b49f8:	bd08      	pop	{r3, pc}
	...

000b49fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <netdb_freeaddrinfo+0xc>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	689b      	ldr	r3, [r3, #8]
   b4a04:	9301      	str	r3, [sp, #4]
   b4a06:	bd08      	pop	{r3, pc}
   b4a08:	00030268 	.word	0x00030268

000b4a0c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <netdb_getaddrinfo+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	68db      	ldr	r3, [r3, #12]
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	00030268 	.word	0x00030268

000b4a1c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <HAL_Validate_Pin_Function+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	685b      	ldr	r3, [r3, #4]
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	0003022c 	.word	0x0003022c

000b4a2c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <HAL_Pin_Mode+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	689b      	ldr	r3, [r3, #8]
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	0003022c 	.word	0x0003022c

000b4a3c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <HAL_Get_Pin_Mode+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	68db      	ldr	r3, [r3, #12]
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	0003022c 	.word	0x0003022c

000b4a4c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <HAL_GPIO_Write+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	691b      	ldr	r3, [r3, #16]
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	0003022c 	.word	0x0003022c

000b4a5c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b02      	ldr	r3, [pc, #8]	; (b4a68 <hal_adc_read+0xc>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	0003022c 	.word	0x0003022c

000b4a6c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	4b02      	ldr	r3, [pc, #8]	; (b4a78 <HAL_RNG_GetRandomNumber+0xc>)
   b4a70:	681b      	ldr	r3, [r3, #0]
   b4a72:	685b      	ldr	r3, [r3, #4]
   b4a74:	9301      	str	r3, [sp, #4]
   b4a76:	bd08      	pop	{r3, pc}
   b4a78:	00030218 	.word	0x00030218

000b4a7c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4a7c:	b508      	push	{r3, lr}
   b4a7e:	4b02      	ldr	r3, [pc, #8]	; (b4a88 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	695b      	ldr	r3, [r3, #20]
   b4a84:	9301      	str	r3, [sp, #4]
   b4a86:	bd08      	pop	{r3, pc}
   b4a88:	00030218 	.word	0x00030218

000b4a8c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b4a8c:	b508      	push	{r3, lr}
   b4a8e:	4b02      	ldr	r3, [pc, #8]	; (b4a98 <HAL_EEPROM_Init+0xc>)
   b4a90:	681b      	ldr	r3, [r3, #0]
   b4a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a94:	9301      	str	r3, [sp, #4]
   b4a96:	bd08      	pop	{r3, pc}
   b4a98:	00030218 	.word	0x00030218

000b4a9c <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b4a9c:	b508      	push	{r3, lr}
   b4a9e:	4b02      	ldr	r3, [pc, #8]	; (b4aa8 <HAL_EEPROM_Read+0xc>)
   b4aa0:	681b      	ldr	r3, [r3, #0]
   b4aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4aa4:	9301      	str	r3, [sp, #4]
   b4aa6:	bd08      	pop	{r3, pc}
   b4aa8:	00030218 	.word	0x00030218

000b4aac <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   b4aac:	b508      	push	{r3, lr}
   b4aae:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <HAL_EEPROM_Write+0xc>)
   b4ab0:	681b      	ldr	r3, [r3, #0]
   b4ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ab4:	9301      	str	r3, [sp, #4]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	00030218 	.word	0x00030218

000b4abc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b02      	ldr	r3, [pc, #8]	; (b4ac8 <os_mutex_recursive_create+0xc>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ac4:	9301      	str	r3, [sp, #4]
   b4ac6:	bd08      	pop	{r3, pc}
   b4ac8:	00030248 	.word	0x00030248

000b4acc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4acc:	b508      	push	{r3, lr}
   b4ace:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <inet_inet_ntop+0xc>)
   b4ad0:	681b      	ldr	r3, [r3, #0]
   b4ad2:	695b      	ldr	r3, [r3, #20]
   b4ad4:	9301      	str	r3, [sp, #4]
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	00030264 	.word	0x00030264

000b4adc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4adc:	b508      	push	{r3, lr}
   b4ade:	4b02      	ldr	r3, [pc, #8]	; (b4ae8 <hal_usart_write+0xc>)
   b4ae0:	681b      	ldr	r3, [r3, #0]
   b4ae2:	68db      	ldr	r3, [r3, #12]
   b4ae4:	9301      	str	r3, [sp, #4]
   b4ae6:	bd08      	pop	{r3, pc}
   b4ae8:	0003023c 	.word	0x0003023c

000b4aec <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4aec:	b508      	push	{r3, lr}
   b4aee:	4b02      	ldr	r3, [pc, #8]	; (b4af8 <hal_usart_available+0xc>)
   b4af0:	681b      	ldr	r3, [r3, #0]
   b4af2:	691b      	ldr	r3, [r3, #16]
   b4af4:	9301      	str	r3, [sp, #4]
   b4af6:	bd08      	pop	{r3, pc}
   b4af8:	0003023c 	.word	0x0003023c

000b4afc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4afc:	b508      	push	{r3, lr}
   b4afe:	4b02      	ldr	r3, [pc, #8]	; (b4b08 <hal_usart_read+0xc>)
   b4b00:	681b      	ldr	r3, [r3, #0]
   b4b02:	695b      	ldr	r3, [r3, #20]
   b4b04:	9301      	str	r3, [sp, #4]
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	0003023c 	.word	0x0003023c

000b4b0c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4b0c:	b508      	push	{r3, lr}
   b4b0e:	4b02      	ldr	r3, [pc, #8]	; (b4b18 <hal_usart_peek+0xc>)
   b4b10:	681b      	ldr	r3, [r3, #0]
   b4b12:	699b      	ldr	r3, [r3, #24]
   b4b14:	9301      	str	r3, [sp, #4]
   b4b16:	bd08      	pop	{r3, pc}
   b4b18:	0003023c 	.word	0x0003023c

000b4b1c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4b1c:	b508      	push	{r3, lr}
   b4b1e:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <hal_usart_flush+0xc>)
   b4b20:	681b      	ldr	r3, [r3, #0]
   b4b22:	69db      	ldr	r3, [r3, #28]
   b4b24:	9301      	str	r3, [sp, #4]
   b4b26:	bd08      	pop	{r3, pc}
   b4b28:	0003023c 	.word	0x0003023c

000b4b2c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4b2c:	b508      	push	{r3, lr}
   b4b2e:	4b02      	ldr	r3, [pc, #8]	; (b4b38 <hal_usart_is_enabled+0xc>)
   b4b30:	681b      	ldr	r3, [r3, #0]
   b4b32:	6a1b      	ldr	r3, [r3, #32]
   b4b34:	9301      	str	r3, [sp, #4]
   b4b36:	bd08      	pop	{r3, pc}
   b4b38:	0003023c 	.word	0x0003023c

000b4b3c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4b3c:	b508      	push	{r3, lr}
   b4b3e:	4b02      	ldr	r3, [pc, #8]	; (b4b48 <hal_usart_available_data_for_write+0xc>)
   b4b40:	681b      	ldr	r3, [r3, #0]
   b4b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b44:	9301      	str	r3, [sp, #4]
   b4b46:	bd08      	pop	{r3, pc}
   b4b48:	0003023c 	.word	0x0003023c

000b4b4c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b02      	ldr	r3, [pc, #8]	; (b4b58 <hal_usart_init_ex+0xc>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b54:	9301      	str	r3, [sp, #4]
   b4b56:	bd08      	pop	{r3, pc}
   b4b58:	0003023c 	.word	0x0003023c

000b4b5c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4b5c:	b508      	push	{r3, lr}
   b4b5e:	4b02      	ldr	r3, [pc, #8]	; (b4b68 <hal_i2c_begin+0xc>)
   b4b60:	681b      	ldr	r3, [r3, #0]
   b4b62:	68db      	ldr	r3, [r3, #12]
   b4b64:	9301      	str	r3, [sp, #4]
   b4b66:	bd08      	pop	{r3, pc}
   b4b68:	00030228 	.word	0x00030228

000b4b6c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4b6c:	b508      	push	{r3, lr}
   b4b6e:	4b02      	ldr	r3, [pc, #8]	; (b4b78 <hal_i2c_begin_transmission+0xc>)
   b4b70:	681b      	ldr	r3, [r3, #0]
   b4b72:	699b      	ldr	r3, [r3, #24]
   b4b74:	9301      	str	r3, [sp, #4]
   b4b76:	bd08      	pop	{r3, pc}
   b4b78:	00030228 	.word	0x00030228

000b4b7c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <hal_i2c_end_transmission+0xc>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	69db      	ldr	r3, [r3, #28]
   b4b84:	9301      	str	r3, [sp, #4]
   b4b86:	bd08      	pop	{r3, pc}
   b4b88:	00030228 	.word	0x00030228

000b4b8c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4b8c:	b508      	push	{r3, lr}
   b4b8e:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <hal_i2c_write+0xc>)
   b4b90:	681b      	ldr	r3, [r3, #0]
   b4b92:	6a1b      	ldr	r3, [r3, #32]
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	bd08      	pop	{r3, pc}
   b4b98:	00030228 	.word	0x00030228

000b4b9c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <hal_i2c_available+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	00030228 	.word	0x00030228

000b4bac <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <hal_i2c_read+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	00030228 	.word	0x00030228

000b4bbc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <hal_i2c_peek+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	00030228 	.word	0x00030228

000b4bcc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <hal_i2c_flush+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	00030228 	.word	0x00030228

000b4bdc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <hal_i2c_is_enabled+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	00030228 	.word	0x00030228

000b4bec <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <hal_i2c_init+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	00030228 	.word	0x00030228

000b4bfc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <hal_i2c_request_ex+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	00030228 	.word	0x00030228

000b4c0c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <hal_spi_init+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	69db      	ldr	r3, [r3, #28]
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	00030230 	.word	0x00030230

000b4c1c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <hal_spi_is_enabled+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	6a1b      	ldr	r3, [r3, #32]
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	00030230 	.word	0x00030230

000b4c2c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <HAL_USB_USART_Init+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	681b      	ldr	r3, [r3, #0]
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	0003024c 	.word	0x0003024c

000b4c3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <HAL_USB_USART_Available_Data+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	691b      	ldr	r3, [r3, #16]
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	0003024c 	.word	0x0003024c

000b4c4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	695b      	ldr	r3, [r3, #20]
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	0003024c 	.word	0x0003024c

000b4c5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <HAL_USB_USART_Receive_Data+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	699b      	ldr	r3, [r3, #24]
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	0003024c 	.word	0x0003024c

000b4c6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <HAL_USB_USART_Send_Data+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	69db      	ldr	r3, [r3, #28]
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	0003024c 	.word	0x0003024c

000b4c7c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <HAL_USB_USART_Flush_Data+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	6a1b      	ldr	r3, [r3, #32]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	0003024c 	.word	0x0003024c

000b4c8c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <set_system_mode+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	685b      	ldr	r3, [r3, #4]
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030220 	.word	0x00030220

000b4c9c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <system_delay_ms+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	695b      	ldr	r3, [r3, #20]
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030220 	.word	0x00030220

000b4cac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b03      	ldr	r3, [pc, #12]	; (b4cbc <system_ctrl_set_app_request_handler+0x10>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4cb6:	9301      	str	r3, [sp, #4]
   b4cb8:	bd08      	pop	{r3, pc}
   b4cba:	0000      	.short	0x0000
   b4cbc:	00030220 	.word	0x00030220

000b4cc0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b03      	ldr	r3, [pc, #12]	; (b4cd0 <system_ctrl_set_result+0x10>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4cca:	9301      	str	r3, [sp, #4]
   b4ccc:	bd08      	pop	{r3, pc}
   b4cce:	0000      	.short	0x0000
   b4cd0:	00030220 	.word	0x00030220

000b4cd4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cd4:	b508      	push	{r3, lr}
   b4cd6:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <network_connect+0xc>)
   b4cd8:	681b      	ldr	r3, [r3, #0]
   b4cda:	685b      	ldr	r3, [r3, #4]
   b4cdc:	9301      	str	r3, [sp, #4]
   b4cde:	bd08      	pop	{r3, pc}
   b4ce0:	00030240 	.word	0x00030240

000b4ce4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4ce4:	b508      	push	{r3, lr}
   b4ce6:	4b02      	ldr	r3, [pc, #8]	; (b4cf0 <network_connecting+0xc>)
   b4ce8:	681b      	ldr	r3, [r3, #0]
   b4cea:	689b      	ldr	r3, [r3, #8]
   b4cec:	9301      	str	r3, [sp, #4]
   b4cee:	bd08      	pop	{r3, pc}
   b4cf0:	00030240 	.word	0x00030240

000b4cf4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4cf4:	b508      	push	{r3, lr}
   b4cf6:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <network_disconnect+0xc>)
   b4cf8:	681b      	ldr	r3, [r3, #0]
   b4cfa:	68db      	ldr	r3, [r3, #12]
   b4cfc:	9301      	str	r3, [sp, #4]
   b4cfe:	bd08      	pop	{r3, pc}
   b4d00:	00030240 	.word	0x00030240

000b4d04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <network_ready+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	691b      	ldr	r3, [r3, #16]
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	00030240 	.word	0x00030240

000b4d14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <network_on+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	695b      	ldr	r3, [r3, #20]
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	00030240 	.word	0x00030240

000b4d24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <network_off+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	699b      	ldr	r3, [r3, #24]
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	00030240 	.word	0x00030240

000b4d34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <network_listen+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	69db      	ldr	r3, [r3, #28]
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	00030240 	.word	0x00030240

000b4d44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <network_listening+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	6a1b      	ldr	r3, [r3, #32]
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	00030240 	.word	0x00030240

000b4d54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <network_set_listen_timeout+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	00030240 	.word	0x00030240

000b4d64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <network_get_listen_timeout+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	00030240 	.word	0x00030240

000b4d74 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <network_is_on+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	00030240 	.word	0x00030240

000b4d84 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <network_is_off+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030240 	.word	0x00030240

000b4d94 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030244 	.word	0x00030244

000b4da4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <malloc+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	681b      	ldr	r3, [r3, #0]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	0003021c 	.word	0x0003021c

000b4db4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <free+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	685b      	ldr	r3, [r3, #4]
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	0003021c 	.word	0x0003021c

000b4dc4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <vsnprintf+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	0003021c 	.word	0x0003021c

000b4dd4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <__assert_func+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	0003021c 	.word	0x0003021c

000b4de4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <newlib_impure_ptr_callback+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	0003021c 	.word	0x0003021c

000b4df4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4df4:	2200      	movs	r2, #0
   b4df6:	6840      	ldr	r0, [r0, #4]
   b4df8:	4611      	mov	r1, r2
   b4dfa:	f7ff bfa3 	b.w	b4d44 <network_listening>

000b4dfe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4dfe:	2200      	movs	r2, #0
   b4e00:	6840      	ldr	r0, [r0, #4]
   b4e02:	4611      	mov	r1, r2
   b4e04:	f7ff bfae 	b.w	b4d64 <network_get_listen_timeout>

000b4e08 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4e08:	6840      	ldr	r0, [r0, #4]
   b4e0a:	2200      	movs	r2, #0
   b4e0c:	f7ff bfa2 	b.w	b4d54 <network_set_listen_timeout>

000b4e10 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e10:	6840      	ldr	r0, [r0, #4]
   b4e12:	2200      	movs	r2, #0
   b4e14:	f081 0101 	eor.w	r1, r1, #1
   b4e18:	f7ff bf8c 	b.w	b4d34 <network_listen>

000b4e1c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4e1c:	2300      	movs	r3, #0
   b4e1e:	6840      	ldr	r0, [r0, #4]
   b4e20:	461a      	mov	r2, r3
   b4e22:	4619      	mov	r1, r3
   b4e24:	f7ff bf7e 	b.w	b4d24 <network_off>

000b4e28 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e28:	2300      	movs	r3, #0
   b4e2a:	6840      	ldr	r0, [r0, #4]
   b4e2c:	461a      	mov	r2, r3
   b4e2e:	4619      	mov	r1, r3
   b4e30:	f7ff bf70 	b.w	b4d14 <network_on>

000b4e34 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e34:	2200      	movs	r2, #0
   b4e36:	6840      	ldr	r0, [r0, #4]
   b4e38:	4611      	mov	r1, r2
   b4e3a:	f7ff bf63 	b.w	b4d04 <network_ready>

000b4e3e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e3e:	2200      	movs	r2, #0
   b4e40:	6840      	ldr	r0, [r0, #4]
   b4e42:	4611      	mov	r1, r2
   b4e44:	f7ff bf4e 	b.w	b4ce4 <network_connecting>

000b4e48 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e48:	6840      	ldr	r0, [r0, #4]
   b4e4a:	2200      	movs	r2, #0
   b4e4c:	2102      	movs	r1, #2
   b4e4e:	f7ff bf51 	b.w	b4cf4 <network_disconnect>

000b4e52 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e52:	2300      	movs	r3, #0
   b4e54:	6840      	ldr	r0, [r0, #4]
   b4e56:	461a      	mov	r2, r3
   b4e58:	f7ff bf3c 	b.w	b4cd4 <network_connect>

000b4e5c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e5c:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e5e:	2203      	movs	r2, #3
   b4e60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e62:	4a02      	ldr	r2, [pc, #8]	; (b4e6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e64:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e66:	4770      	bx	lr
   b4e68:	2003e6b0 	.word	0x2003e6b0
   b4e6c:	000b5ad8 	.word	0x000b5ad8

000b4e70 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4e70:	b510      	push	{r4, lr}
   b4e72:	4604      	mov	r4, r0
   b4e74:	4608      	mov	r0, r1
{
    _spi = spi;
   b4e76:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4e78:	f7ff fec8 	bl	b4c0c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4e7c:	2300      	movs	r3, #0
   b4e7e:	6063      	str	r3, [r4, #4]
}
   b4e80:	4620      	mov	r0, r4
   b4e82:	bd10      	pop	{r4, pc}

000b4e84 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e84:	4b05      	ldr	r3, [pc, #20]	; (b4e9c <_GLOBAL__sub_I_System+0x18>)
   b4e86:	2202      	movs	r2, #2
   b4e88:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e8a:	4b05      	ldr	r3, [pc, #20]	; (b4ea0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e8c:	4a05      	ldr	r2, [pc, #20]	; (b4ea4 <_GLOBAL__sub_I_System+0x20>)
   b4e8e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e90:	2000      	movs	r0, #0
   b4e92:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e96:	f7ff bef9 	b.w	b4c8c <set_system_mode>
   b4e9a:	bf00      	nop
   b4e9c:	2003e6c4 	.word	0x2003e6c4
   b4ea0:	2003e6b8 	.word	0x2003e6b8
   b4ea4:	ffff0000 	.word	0xffff0000

000b4ea8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ea8:	4802      	ldr	r0, [pc, #8]	; (b4eb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4eaa:	2300      	movs	r3, #0
   b4eac:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4eae:	f7ff be05 	b.w	b4abc <os_mutex_recursive_create>
   b4eb2:	bf00      	nop
   b4eb4:	2003e6c8 	.word	0x2003e6c8

000b4eb8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4eba:	4606      	mov	r6, r0
   b4ebc:	460d      	mov	r5, r1
  size_t n = 0;
   b4ebe:	188f      	adds	r7, r1, r2
   b4ec0:	2400      	movs	r4, #0
  while (size--) {
   b4ec2:	42bd      	cmp	r5, r7
   b4ec4:	d00c      	beq.n	b4ee0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4ec6:	6833      	ldr	r3, [r6, #0]
   b4ec8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4ecc:	689b      	ldr	r3, [r3, #8]
   b4ece:	4630      	mov	r0, r6
   b4ed0:	4798      	blx	r3
     if (chunk>=0)
   b4ed2:	1e03      	subs	r3, r0, #0
   b4ed4:	db01      	blt.n	b4eda <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4ed6:	441c      	add	r4, r3
  while (size--) {
   b4ed8:	e7f3      	b.n	b4ec2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4eda:	2c00      	cmp	r4, #0
   b4edc:	bf08      	it	eq
   b4ede:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4ee0:	4620      	mov	r0, r4
   b4ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ee4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4ee4:	b513      	push	{r0, r1, r4, lr}
   b4ee6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4ee8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4eea:	b159      	cbz	r1, b4f04 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4eec:	9101      	str	r1, [sp, #4]
   b4eee:	f000 fd31 	bl	b5954 <strlen>
   b4ef2:	6823      	ldr	r3, [r4, #0]
   b4ef4:	9901      	ldr	r1, [sp, #4]
   b4ef6:	68db      	ldr	r3, [r3, #12]
   b4ef8:	4602      	mov	r2, r0
   b4efa:	4620      	mov	r0, r4
    }
   b4efc:	b002      	add	sp, #8
   b4efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4f02:	4718      	bx	r3
    }
   b4f04:	b002      	add	sp, #8
   b4f06:	bd10      	pop	{r4, pc}

000b4f08 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4f08:	6803      	ldr	r3, [r0, #0]
   b4f0a:	689b      	ldr	r3, [r3, #8]
   b4f0c:	4718      	bx	r3

000b4f0e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4f0e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4f10:	210d      	movs	r1, #13
{
   b4f12:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4f14:	f7ff fff8 	bl	b4f08 <_ZN5Print5printEc>
  n += print('\n');
   b4f18:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4f1a:	4604      	mov	r4, r0
  n += print('\n');
   b4f1c:	4628      	mov	r0, r5
   b4f1e:	f7ff fff3 	bl	b4f08 <_ZN5Print5printEc>
  return n;
}
   b4f22:	4420      	add	r0, r4
   b4f24:	bd38      	pop	{r3, r4, r5, pc}

000b4f26 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4f26:	b530      	push	{r4, r5, lr}
   b4f28:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4f2a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4f2c:	2a01      	cmp	r2, #1
  *str = '\0';
   b4f2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4f32:	bf98      	it	ls
   b4f34:	220a      	movls	r2, #10
   b4f36:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4f38:	460d      	mov	r5, r1
   b4f3a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4f3e:	fb01 5312 	mls	r3, r1, r2, r5
   b4f42:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f46:	2b09      	cmp	r3, #9
   b4f48:	bf94      	ite	ls
   b4f4a:	3330      	addls	r3, #48	; 0x30
   b4f4c:	3337      	addhi	r3, #55	; 0x37
   b4f4e:	b2db      	uxtb	r3, r3
  } while(n);
   b4f50:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f52:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4f56:	d9ef      	bls.n	b4f38 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4f58:	4621      	mov	r1, r4
   b4f5a:	f7ff ffc3 	bl	b4ee4 <_ZN5Print5writeEPKc>
}
   b4f5e:	b00b      	add	sp, #44	; 0x2c
   b4f60:	bd30      	pop	{r4, r5, pc}

000b4f62 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f66:	b086      	sub	sp, #24
   b4f68:	af00      	add	r7, sp, #0
   b4f6a:	4605      	mov	r5, r0
   b4f6c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4f6e:	1d38      	adds	r0, r7, #4
   b4f70:	2114      	movs	r1, #20
{
   b4f72:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4f74:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4f76:	f7ff ff25 	bl	b4dc4 <vsnprintf>

    if (n<bufsize)
   b4f7a:	2813      	cmp	r0, #19
   b4f7c:	d80e      	bhi.n	b4f9c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4f7e:	1d39      	adds	r1, r7, #4
   b4f80:	4628      	mov	r0, r5
   b4f82:	f7ff ffaf 	bl	b4ee4 <_ZN5Print5writeEPKc>
   b4f86:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4f88:	b11e      	cbz	r6, b4f92 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4f8a:	4628      	mov	r0, r5
   b4f8c:	f7ff ffbf 	bl	b4f0e <_ZN5Print7printlnEv>
   b4f90:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4f92:	4620      	mov	r0, r4
   b4f94:	3718      	adds	r7, #24
   b4f96:	46bd      	mov	sp, r7
   b4f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4f9c:	f100 0308 	add.w	r3, r0, #8
   b4fa0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4fa4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4fa6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4faa:	4622      	mov	r2, r4
   b4fac:	1c41      	adds	r1, r0, #1
   b4fae:	683b      	ldr	r3, [r7, #0]
   b4fb0:	4668      	mov	r0, sp
   b4fb2:	f7ff ff07 	bl	b4dc4 <vsnprintf>
  return write(str);
   b4fb6:	4669      	mov	r1, sp
   b4fb8:	4628      	mov	r0, r5
   b4fba:	f7ff ff93 	bl	b4ee4 <_ZN5Print5writeEPKc>
   b4fbe:	4604      	mov	r4, r0
   b4fc0:	46c5      	mov	sp, r8
   b4fc2:	e7e1      	b.n	b4f88 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4fc4 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4fc4:	2300      	movs	r3, #0
   b4fc6:	6840      	ldr	r0, [r0, #4]
   b4fc8:	461a      	mov	r2, r3
   b4fca:	4619      	mov	r1, r3
   b4fcc:	f7ff bea2 	b.w	b4d14 <network_on>

000b4fd0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4fd0:	4b01      	ldr	r3, [pc, #4]	; (b4fd8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4fd2:	4a02      	ldr	r2, [pc, #8]	; (b4fdc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4fd4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4fd6:	4770      	bx	lr
   b4fd8:	2003e6cc 	.word	0x2003e6cc
   b4fdc:	000b5b0c 	.word	0x000b5b0c

000b4fe0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4fe0:	4b02      	ldr	r3, [pc, #8]	; (b4fec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4fe2:	681a      	ldr	r2, [r3, #0]
   b4fe4:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4fe6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4fe8:	4770      	bx	lr
   b4fea:	bf00      	nop
   b4fec:	2003e5f0 	.word	0x2003e5f0
   b4ff0:	2003e6d0 	.word	0x2003e6d0

000b4ff4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4ff4:	2100      	movs	r1, #0
   b4ff6:	f7ff be51 	b.w	b4c9c <system_delay_ms>
	...

000b4ffc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4ffc:	4b01      	ldr	r3, [pc, #4]	; (b5004 <_GLOBAL__sub_I_RGB+0x8>)
   b4ffe:	2200      	movs	r2, #0
   b5000:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5002:	4770      	bx	lr
   b5004:	2003e6d4 	.word	0x2003e6d4

000b5008 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5008:	4b01      	ldr	r3, [pc, #4]	; (b5010 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b500a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b500c:	4770      	bx	lr
   b500e:	bf00      	nop
   b5010:	2003e5f4 	.word	0x2003e5f4

000b5014 <serialEventRun>:
{
   b5014:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5016:	4b0b      	ldr	r3, [pc, #44]	; (b5044 <serialEventRun+0x30>)
   b5018:	b143      	cbz	r3, b502c <serialEventRun+0x18>
   b501a:	f000 f963 	bl	b52e4 <_Z16_fetch_usbserialv>
   b501e:	6803      	ldr	r3, [r0, #0]
   b5020:	691b      	ldr	r3, [r3, #16]
   b5022:	4798      	blx	r3
   b5024:	2800      	cmp	r0, #0
   b5026:	dd01      	ble.n	b502c <serialEventRun+0x18>
        serialEvent();
   b5028:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b502c:	4b06      	ldr	r3, [pc, #24]	; (b5048 <serialEventRun+0x34>)
   b502e:	b143      	cbz	r3, b5042 <serialEventRun+0x2e>
   b5030:	f000 fbce 	bl	b57d0 <_Z22__fetch_global_Serial1v>
   b5034:	6803      	ldr	r3, [r0, #0]
   b5036:	691b      	ldr	r3, [r3, #16]
   b5038:	4798      	blx	r3
   b503a:	2800      	cmp	r0, #0
   b503c:	dd01      	ble.n	b5042 <serialEventRun+0x2e>
        serialEvent1();
   b503e:	f3af 8000 	nop.w
}
   b5042:	bd08      	pop	{r3, pc}
	...

000b504c <_post_loop>:
{
   b504c:	b508      	push	{r3, lr}
	serialEventRun();
   b504e:	f7ff ffe1 	bl	b5014 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5052:	f7ff fd13 	bl	b4a7c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5056:	4b01      	ldr	r3, [pc, #4]	; (b505c <_post_loop+0x10>)
   b5058:	6018      	str	r0, [r3, #0]
}
   b505a:	bd08      	pop	{r3, pc}
   b505c:	2003e738 	.word	0x2003e738

000b5060 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5060:	4805      	ldr	r0, [pc, #20]	; (b5078 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5062:	4a06      	ldr	r2, [pc, #24]	; (b507c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5064:	4906      	ldr	r1, [pc, #24]	; (b5080 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5066:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5068:	1a12      	subs	r2, r2, r0
   b506a:	f000 fc2f 	bl	b58cc <memcpy>
    __backup_sram_signature = signature;
   b506e:	4b05      	ldr	r3, [pc, #20]	; (b5084 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5070:	4a05      	ldr	r2, [pc, #20]	; (b5088 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5072:	601a      	str	r2, [r3, #0]
}
   b5074:	bd08      	pop	{r3, pc}
   b5076:	bf00      	nop
   b5078:	2003f400 	.word	0x2003f400
   b507c:	2003f404 	.word	0x2003f404
   b5080:	000b5d00 	.word	0x000b5d00
   b5084:	2003f400 	.word	0x2003f400
   b5088:	9a271c1e 	.word	0x9a271c1e

000b508c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b508c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b508e:	2300      	movs	r3, #0
   b5090:	9300      	str	r3, [sp, #0]
   b5092:	461a      	mov	r2, r3
   b5094:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5098:	f7ff fe12 	bl	b4cc0 <system_ctrl_set_result>
}
   b509c:	b003      	add	sp, #12
   b509e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b50a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b50a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b50a6:	8843      	ldrh	r3, [r0, #2]
   b50a8:	2b0a      	cmp	r3, #10
   b50aa:	d008      	beq.n	b50be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b50ac:	2b50      	cmp	r3, #80	; 0x50
   b50ae:	d10b      	bne.n	b50c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b50b0:	4b09      	ldr	r3, [pc, #36]	; (b50d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b50b2:	681b      	ldr	r3, [r3, #0]
   b50b4:	b14b      	cbz	r3, b50ca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b50b6:	b003      	add	sp, #12
   b50b8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b50bc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b50be:	f7ff ffe5 	bl	b508c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b50c2:	b003      	add	sp, #12
   b50c4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b50c8:	2300      	movs	r3, #0
   b50ca:	9300      	str	r3, [sp, #0]
   b50cc:	461a      	mov	r2, r3
   b50ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b50d2:	f7ff fdf5 	bl	b4cc0 <system_ctrl_set_result>
}
   b50d6:	e7f4      	b.n	b50c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b50d8:	2003e6e8 	.word	0x2003e6e8

000b50dc <module_user_init_hook>:
{
   b50dc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b50de:	4812      	ldr	r0, [pc, #72]	; (b5128 <module_user_init_hook+0x4c>)
   b50e0:	2100      	movs	r1, #0
   b50e2:	f7ff fe7f 	bl	b4de4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b50e6:	4b11      	ldr	r3, [pc, #68]	; (b512c <module_user_init_hook+0x50>)
   b50e8:	681a      	ldr	r2, [r3, #0]
   b50ea:	4b11      	ldr	r3, [pc, #68]	; (b5130 <module_user_init_hook+0x54>)
   b50ec:	429a      	cmp	r2, r3
   b50ee:	4b11      	ldr	r3, [pc, #68]	; (b5134 <module_user_init_hook+0x58>)
   b50f0:	bf0c      	ite	eq
   b50f2:	2201      	moveq	r2, #1
   b50f4:	2200      	movne	r2, #0
   b50f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b50f8:	d001      	beq.n	b50fe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b50fa:	f7ff ffb1 	bl	b5060 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b50fe:	f7ff fcb5 	bl	b4a6c <HAL_RNG_GetRandomNumber>
   b5102:	4604      	mov	r4, r0
    srand(seed);
   b5104:	f000 fbf8 	bl	b58f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5108:	4b0b      	ldr	r3, [pc, #44]	; (b5138 <module_user_init_hook+0x5c>)
   b510a:	b113      	cbz	r3, b5112 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b510c:	4620      	mov	r0, r4
   b510e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5112:	2100      	movs	r1, #0
   b5114:	4808      	ldr	r0, [pc, #32]	; (b5138 <module_user_init_hook+0x5c>)
   b5116:	f7ff fe3d 	bl	b4d94 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b511a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b511e:	4807      	ldr	r0, [pc, #28]	; (b513c <module_user_init_hook+0x60>)
   b5120:	2100      	movs	r1, #0
   b5122:	f7ff bdc3 	b.w	b4cac <system_ctrl_set_app_request_handler>
   b5126:	bf00      	nop
   b5128:	000b5009 	.word	0x000b5009
   b512c:	2003f400 	.word	0x2003f400
   b5130:	9a271c1e 	.word	0x9a271c1e
   b5134:	2003e6e4 	.word	0x2003e6e4
   b5138:	00000000 	.word	0x00000000
   b513c:	000b50a5 	.word	0x000b50a5

000b5140 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5140:	4770      	bx	lr

000b5142 <_ZN9IPAddressD0Ev>:
   b5142:	b510      	push	{r4, lr}
   b5144:	2118      	movs	r1, #24
   b5146:	4604      	mov	r4, r0
   b5148:	f7fe ffa5 	bl	b4096 <_ZdlPvj>
   b514c:	4620      	mov	r0, r4
   b514e:	bd10      	pop	{r4, pc}

000b5150 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5150:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5152:	7d03      	ldrb	r3, [r0, #20]
   b5154:	2b06      	cmp	r3, #6
{
   b5156:	b08d      	sub	sp, #52	; 0x34
   b5158:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b515a:	f100 0704 	add.w	r7, r0, #4
   b515e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5162:	d012      	beq.n	b518a <_ZNK9IPAddress7printToER5Print+0x3a>
   b5164:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5168:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b516c:	220a      	movs	r2, #10
   b516e:	4630      	mov	r0, r6
   b5170:	f7ff fed9 	bl	b4f26 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5174:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5176:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5178:	d019      	beq.n	b51ae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b517a:	2c00      	cmp	r4, #0
   b517c:	d0f4      	beq.n	b5168 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b517e:	212e      	movs	r1, #46	; 0x2e
   b5180:	4630      	mov	r0, r6
   b5182:	f7ff fec1 	bl	b4f08 <_ZN5Print5printEc>
   b5186:	4404      	add	r4, r0
   b5188:	e7ee      	b.n	b5168 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b518a:	232f      	movs	r3, #47	; 0x2f
   b518c:	466a      	mov	r2, sp
   b518e:	4639      	mov	r1, r7
   b5190:	200a      	movs	r0, #10
		buf[0] = 0;
   b5192:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5196:	f7ff fc99 	bl	b4acc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b519a:	4668      	mov	r0, sp
   b519c:	f000 fbda 	bl	b5954 <strlen>
   b51a0:	6833      	ldr	r3, [r6, #0]
   b51a2:	4602      	mov	r2, r0
   b51a4:	68db      	ldr	r3, [r3, #12]
   b51a6:	4669      	mov	r1, sp
   b51a8:	4630      	mov	r0, r6
   b51aa:	4798      	blx	r3
   b51ac:	4604      	mov	r4, r0
    }
    return n;
}
   b51ae:	4620      	mov	r0, r4
   b51b0:	b00d      	add	sp, #52	; 0x34
   b51b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b51b4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b51b4:	b510      	push	{r4, lr}
   b51b6:	4b05      	ldr	r3, [pc, #20]	; (b51cc <_ZN9IPAddressC1Ev+0x18>)
   b51b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b51ba:	2211      	movs	r2, #17
   b51bc:	f840 3b04 	str.w	r3, [r0], #4
   b51c0:	2100      	movs	r1, #0
   b51c2:	f000 fb91 	bl	b58e8 <memset>
}
   b51c6:	4620      	mov	r0, r4
   b51c8:	bd10      	pop	{r4, pc}
   b51ca:	bf00      	nop
   b51cc:	000b5b34 	.word	0x000b5b34

000b51d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b51d0:	4603      	mov	r3, r0
   b51d2:	4a07      	ldr	r2, [pc, #28]	; (b51f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b51d4:	b510      	push	{r4, lr}
   b51d6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b51da:	f101 0210 	add.w	r2, r1, #16
   b51de:	f851 4b04 	ldr.w	r4, [r1], #4
   b51e2:	f843 4b04 	str.w	r4, [r3], #4
   b51e6:	4291      	cmp	r1, r2
   b51e8:	d1f9      	bne.n	b51de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b51ea:	780a      	ldrb	r2, [r1, #0]
   b51ec:	701a      	strb	r2, [r3, #0]
}
   b51ee:	bd10      	pop	{r4, pc}
   b51f0:	000b5b34 	.word	0x000b5b34

000b51f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b51f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b51f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b51fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b51fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5202:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5206:	2304      	movs	r3, #4
   b5208:	6041      	str	r1, [r0, #4]
   b520a:	7503      	strb	r3, [r0, #20]
}
   b520c:	bd10      	pop	{r4, pc}
	...

000b5210 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5210:	b507      	push	{r0, r1, r2, lr}
   b5212:	4b06      	ldr	r3, [pc, #24]	; (b522c <_ZN9IPAddressC1EPKh+0x1c>)
   b5214:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5216:	78cb      	ldrb	r3, [r1, #3]
   b5218:	9300      	str	r3, [sp, #0]
   b521a:	788b      	ldrb	r3, [r1, #2]
   b521c:	784a      	ldrb	r2, [r1, #1]
   b521e:	7809      	ldrb	r1, [r1, #0]
   b5220:	f7ff ffe8 	bl	b51f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5224:	b003      	add	sp, #12
   b5226:	f85d fb04 	ldr.w	pc, [sp], #4
   b522a:	bf00      	nop
   b522c:	000b5b34 	.word	0x000b5b34

000b5230 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5230:	7441      	strb	r1, [r0, #17]
}
   b5232:	4770      	bx	lr

000b5234 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5234:	4770      	bx	lr

000b5236 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5236:	4770      	bx	lr

000b5238 <_ZN9USBSerial4readEv>:
{
   b5238:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b523a:	2100      	movs	r1, #0
   b523c:	7c00      	ldrb	r0, [r0, #16]
   b523e:	f7ff fd0d 	bl	b4c5c <HAL_USB_USART_Receive_Data>
}
   b5242:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5246:	bd08      	pop	{r3, pc}

000b5248 <_ZN9USBSerial4peekEv>:
{
   b5248:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b524a:	2101      	movs	r1, #1
   b524c:	7c00      	ldrb	r0, [r0, #16]
   b524e:	f7ff fd05 	bl	b4c5c <HAL_USB_USART_Receive_Data>
}
   b5252:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5256:	bd08      	pop	{r3, pc}

000b5258 <_ZN9USBSerial17availableForWriteEv>:
{
   b5258:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b525a:	7c00      	ldrb	r0, [r0, #16]
   b525c:	f7ff fcf6 	bl	b4c4c <HAL_USB_USART_Available_Data_For_Write>
}
   b5260:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5264:	bd08      	pop	{r3, pc}

000b5266 <_ZN9USBSerial9availableEv>:
{
   b5266:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5268:	7c00      	ldrb	r0, [r0, #16]
   b526a:	f7ff fce7 	bl	b4c3c <HAL_USB_USART_Available_Data>
}
   b526e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5272:	bd08      	pop	{r3, pc}

000b5274 <_ZN9USBSerial5writeEh>:
{
   b5274:	b513      	push	{r0, r1, r4, lr}
   b5276:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5278:	7c00      	ldrb	r0, [r0, #16]
{
   b527a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b527c:	f7ff fce6 	bl	b4c4c <HAL_USB_USART_Available_Data_For_Write>
   b5280:	2800      	cmp	r0, #0
   b5282:	9901      	ldr	r1, [sp, #4]
   b5284:	dc01      	bgt.n	b528a <_ZN9USBSerial5writeEh+0x16>
   b5286:	7c60      	ldrb	r0, [r4, #17]
   b5288:	b120      	cbz	r0, b5294 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b528a:	7c20      	ldrb	r0, [r4, #16]
   b528c:	f7ff fcee 	bl	b4c6c <HAL_USB_USART_Send_Data>
   b5290:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5294:	b002      	add	sp, #8
   b5296:	bd10      	pop	{r4, pc}

000b5298 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5298:	7c00      	ldrb	r0, [r0, #16]
   b529a:	f7ff bcef 	b.w	b4c7c <HAL_USB_USART_Flush_Data>

000b529e <_ZN9USBSerialD0Ev>:
   b529e:	b510      	push	{r4, lr}
   b52a0:	2114      	movs	r1, #20
   b52a2:	4604      	mov	r4, r0
   b52a4:	f7fe fef7 	bl	b4096 <_ZdlPvj>
   b52a8:	4620      	mov	r0, r4
   b52aa:	bd10      	pop	{r4, pc}

000b52ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b52ac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b52ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b52b2:	4604      	mov	r4, r0
   b52b4:	4608      	mov	r0, r1
   b52b6:	2100      	movs	r1, #0
   b52b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b52bc:	4b04      	ldr	r3, [pc, #16]	; (b52d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b52be:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b52c0:	2301      	movs	r3, #1
  _serial = serial;
   b52c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b52c4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b52c6:	4611      	mov	r1, r2
   b52c8:	f7ff fcb0 	bl	b4c2c <HAL_USB_USART_Init>
}
   b52cc:	4620      	mov	r0, r4
   b52ce:	bd10      	pop	{r4, pc}
   b52d0:	000b5b48 	.word	0x000b5b48

000b52d4 <_Z19acquireSerialBufferv>:
{
   b52d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b52d6:	2214      	movs	r2, #20
{
   b52d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b52da:	2100      	movs	r1, #0
   b52dc:	f000 fb04 	bl	b58e8 <memset>
}
   b52e0:	4620      	mov	r0, r4
   b52e2:	bd10      	pop	{r4, pc}

000b52e4 <_Z16_fetch_usbserialv>:
{
   b52e4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52e6:	4c0f      	ldr	r4, [pc, #60]	; (b5324 <_Z16_fetch_usbserialv+0x40>)
{
   b52e8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b52ea:	a803      	add	r0, sp, #12
   b52ec:	f7ff fff2 	bl	b52d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52f0:	7821      	ldrb	r1, [r4, #0]
   b52f2:	f3bf 8f5b 	dmb	ish
   b52f6:	f011 0101 	ands.w	r1, r1, #1
   b52fa:	d10f      	bne.n	b531c <_Z16_fetch_usbserialv+0x38>
   b52fc:	4620      	mov	r0, r4
   b52fe:	9101      	str	r1, [sp, #4]
   b5300:	f7fe fecb 	bl	b409a <__cxa_guard_acquire>
   b5304:	9901      	ldr	r1, [sp, #4]
   b5306:	b148      	cbz	r0, b531c <_Z16_fetch_usbserialv+0x38>
   b5308:	aa03      	add	r2, sp, #12
   b530a:	4807      	ldr	r0, [pc, #28]	; (b5328 <_Z16_fetch_usbserialv+0x44>)
   b530c:	f7ff ffce 	bl	b52ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5310:	4620      	mov	r0, r4
   b5312:	f7fe fec7 	bl	b40a4 <__cxa_guard_release>
   b5316:	4805      	ldr	r0, [pc, #20]	; (b532c <_Z16_fetch_usbserialv+0x48>)
   b5318:	f000 fad2 	bl	b58c0 <atexit>
	return _usbserial;
}
   b531c:	4802      	ldr	r0, [pc, #8]	; (b5328 <_Z16_fetch_usbserialv+0x44>)
   b531e:	b008      	add	sp, #32
   b5320:	bd10      	pop	{r4, pc}
   b5322:	bf00      	nop
   b5324:	2003e6ec 	.word	0x2003e6ec
   b5328:	2003e6f0 	.word	0x2003e6f0
   b532c:	000b5235 	.word	0x000b5235

000b5330 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5330:	4770      	bx	lr

000b5332 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5332:	7441      	strb	r1, [r0, #17]
}
   b5334:	4770      	bx	lr

000b5336 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5336:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5338:	7c00      	ldrb	r0, [r0, #16]
   b533a:	f7ff fbff 	bl	b4b3c <hal_usart_available_data_for_write>
}
   b533e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5342:	bd08      	pop	{r3, pc}

000b5344 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5344:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5346:	7c00      	ldrb	r0, [r0, #16]
   b5348:	f7ff fbd0 	bl	b4aec <hal_usart_available>
}
   b534c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5350:	bd08      	pop	{r3, pc}

000b5352 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5352:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5354:	7c00      	ldrb	r0, [r0, #16]
   b5356:	f7ff fbd9 	bl	b4b0c <hal_usart_peek>
}
   b535a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b535e:	bd08      	pop	{r3, pc}

000b5360 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5360:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5362:	7c00      	ldrb	r0, [r0, #16]
   b5364:	f7ff fbca 	bl	b4afc <hal_usart_read>
}
   b5368:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b536c:	bd08      	pop	{r3, pc}

000b536e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b536e:	7c00      	ldrb	r0, [r0, #16]
   b5370:	f7ff bbd4 	b.w	b4b1c <hal_usart_flush>

000b5374 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5374:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5376:	7c45      	ldrb	r5, [r0, #17]
{
   b5378:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b537a:	b12d      	cbz	r5, b5388 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b537c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b537e:	b003      	add	sp, #12
   b5380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5384:	f7ff bbaa 	b.w	b4adc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5388:	7c00      	ldrb	r0, [r0, #16]
   b538a:	9101      	str	r1, [sp, #4]
   b538c:	f7ff fbd6 	bl	b4b3c <hal_usart_available_data_for_write>
   b5390:	2800      	cmp	r0, #0
   b5392:	9901      	ldr	r1, [sp, #4]
   b5394:	dcf2      	bgt.n	b537c <_ZN11USARTSerial5writeEh+0x8>
}
   b5396:	4628      	mov	r0, r5
   b5398:	b003      	add	sp, #12
   b539a:	bd30      	pop	{r4, r5, pc}

000b539c <_ZN11USARTSerialD0Ev>:
   b539c:	b510      	push	{r4, lr}
   b539e:	2114      	movs	r1, #20
   b53a0:	4604      	mov	r4, r0
   b53a2:	f7fe fe78 	bl	b4096 <_ZdlPvj>
   b53a6:	4620      	mov	r0, r4
   b53a8:	bd10      	pop	{r4, pc}
	...

000b53ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b53ac:	b510      	push	{r4, lr}
   b53ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53b2:	4604      	mov	r4, r0
   b53b4:	4608      	mov	r0, r1
   b53b6:	4611      	mov	r1, r2
   b53b8:	2200      	movs	r2, #0
   b53ba:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53be:	4b04      	ldr	r3, [pc, #16]	; (b53d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b53c0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b53c2:	2301      	movs	r3, #1
  _serial = serial;
   b53c4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b53c6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b53c8:	f7ff fbc0 	bl	b4b4c <hal_usart_init_ex>
}
   b53cc:	4620      	mov	r0, r4
   b53ce:	bd10      	pop	{r4, pc}
   b53d0:	000b5b78 	.word	0x000b5b78

000b53d4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b53d4:	4770      	bx	lr

000b53d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b53d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53d8:	4606      	mov	r6, r0
   b53da:	4615      	mov	r5, r2
   b53dc:	460c      	mov	r4, r1
   b53de:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b53e0:	42bc      	cmp	r4, r7
   b53e2:	d006      	beq.n	b53f2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b53e4:	6833      	ldr	r3, [r6, #0]
   b53e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b53ea:	689b      	ldr	r3, [r3, #8]
   b53ec:	4630      	mov	r0, r6
   b53ee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b53f0:	e7f6      	b.n	b53e0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b53f2:	4628      	mov	r0, r5
   b53f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b53f6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b53f6:	7c00      	ldrb	r0, [r0, #16]
   b53f8:	2200      	movs	r2, #0
   b53fa:	f7ff bbc7 	b.w	b4b8c <hal_i2c_write>

000b53fe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b53fe:	7c00      	ldrb	r0, [r0, #16]
   b5400:	2100      	movs	r1, #0
   b5402:	f7ff bbcb 	b.w	b4b9c <hal_i2c_available>

000b5406 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5406:	7c00      	ldrb	r0, [r0, #16]
   b5408:	2100      	movs	r1, #0
   b540a:	f7ff bbcf 	b.w	b4bac <hal_i2c_read>

000b540e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b540e:	7c00      	ldrb	r0, [r0, #16]
   b5410:	2100      	movs	r1, #0
   b5412:	f7ff bbd3 	b.w	b4bbc <hal_i2c_peek>

000b5416 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5416:	7c00      	ldrb	r0, [r0, #16]
   b5418:	2100      	movs	r1, #0
   b541a:	f7ff bbd7 	b.w	b4bcc <hal_i2c_flush>

000b541e <_ZN7TwoWireD0Ev>:
   b541e:	b510      	push	{r4, lr}
   b5420:	2114      	movs	r1, #20
   b5422:	4604      	mov	r4, r0
   b5424:	f7fe fe37 	bl	b4096 <_ZdlPvj>
   b5428:	4620      	mov	r0, r4
   b542a:	bd10      	pop	{r4, pc}

000b542c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b542c:	b510      	push	{r4, lr}
   b542e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5432:	4604      	mov	r4, r0
   b5434:	4608      	mov	r0, r1
   b5436:	2100      	movs	r1, #0
   b5438:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b543c:	4b03      	ldr	r3, [pc, #12]	; (b544c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b543e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5440:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5442:	4611      	mov	r1, r2
   b5444:	f7ff fbd2 	bl	b4bec <hal_i2c_init>
}
   b5448:	4620      	mov	r0, r4
   b544a:	bd10      	pop	{r4, pc}
   b544c:	000b5ba8 	.word	0x000b5ba8

000b5450 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5450:	2300      	movs	r3, #0
   b5452:	7c00      	ldrb	r0, [r0, #16]
   b5454:	461a      	mov	r2, r3
   b5456:	4619      	mov	r1, r3
   b5458:	f7ff bb80 	b.w	b4b5c <hal_i2c_begin>

000b545c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b545c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b545e:	2200      	movs	r2, #0
   b5460:	2314      	movs	r3, #20
   b5462:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5466:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b546a:	780b      	ldrb	r3, [r1, #0]
   b546c:	f88d 3008 	strb.w	r3, [sp, #8]
   b5470:	684b      	ldr	r3, [r1, #4]
   b5472:	9303      	str	r3, [sp, #12]
   b5474:	68cb      	ldr	r3, [r1, #12]
   b5476:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5478:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b547a:	7a0b      	ldrb	r3, [r1, #8]
   b547c:	9305      	str	r3, [sp, #20]
   b547e:	a901      	add	r1, sp, #4
   b5480:	f7ff fbbc 	bl	b4bfc <hal_i2c_request_ex>
}
   b5484:	b007      	add	sp, #28
   b5486:	f85d fb04 	ldr.w	pc, [sp], #4

000b548a <_ZN7TwoWire11requestFromEhjh>:
{
   b548a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b548c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b548e:	f88d 1000 	strb.w	r1, [sp]
   b5492:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5496:	9103      	str	r1, [sp, #12]
   b5498:	bf18      	it	ne
   b549a:	2301      	movne	r3, #1
   b549c:	4669      	mov	r1, sp
    size_ = size;
   b549e:	9201      	str	r2, [sp, #4]
   b54a0:	f88d 3008 	strb.w	r3, [sp, #8]
   b54a4:	f7ff ffda 	bl	b545c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b54a8:	b005      	add	sp, #20
   b54aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b54ae <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b54ae:	7c00      	ldrb	r0, [r0, #16]
   b54b0:	2200      	movs	r2, #0
   b54b2:	f7ff bb5b 	b.w	b4b6c <hal_i2c_begin_transmission>

000b54b6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b54b6:	7c00      	ldrb	r0, [r0, #16]
   b54b8:	2200      	movs	r2, #0
   b54ba:	f7ff bb5f 	b.w	b4b7c <hal_i2c_end_transmission>

000b54be <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b54be:	7c00      	ldrb	r0, [r0, #16]
   b54c0:	2100      	movs	r1, #0
   b54c2:	f7ff bb8b 	b.w	b4bdc <hal_i2c_is_enabled>

000b54c6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b54c6:	2200      	movs	r2, #0
   b54c8:	6840      	ldr	r0, [r0, #4]
   b54ca:	4611      	mov	r1, r2
   b54cc:	f7ff bc1a 	b.w	b4d04 <network_ready>

000b54d0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b54d0:	2200      	movs	r2, #0
   b54d2:	6840      	ldr	r0, [r0, #4]
   b54d4:	4611      	mov	r1, r2
   b54d6:	f7ff bc35 	b.w	b4d44 <network_listening>

000b54da <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b54da:	2200      	movs	r2, #0
   b54dc:	6840      	ldr	r0, [r0, #4]
   b54de:	4611      	mov	r1, r2
   b54e0:	f7ff bc40 	b.w	b4d64 <network_get_listen_timeout>

000b54e4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b54e4:	6840      	ldr	r0, [r0, #4]
   b54e6:	2200      	movs	r2, #0
   b54e8:	f7ff bc34 	b.w	b4d54 <network_set_listen_timeout>

000b54ec <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b54ec:	6840      	ldr	r0, [r0, #4]
   b54ee:	2200      	movs	r2, #0
   b54f0:	f081 0101 	eor.w	r1, r1, #1
   b54f4:	f7ff bc1e 	b.w	b4d34 <network_listen>

000b54f8 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b54f8:	2300      	movs	r3, #0
   b54fa:	6840      	ldr	r0, [r0, #4]
   b54fc:	461a      	mov	r2, r3
   b54fe:	4619      	mov	r1, r3
   b5500:	f7ff bc10 	b.w	b4d24 <network_off>

000b5504 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5504:	2200      	movs	r2, #0
   b5506:	6840      	ldr	r0, [r0, #4]
   b5508:	4611      	mov	r1, r2
   b550a:	f7ff bbeb 	b.w	b4ce4 <network_connecting>

000b550e <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b550e:	6840      	ldr	r0, [r0, #4]
   b5510:	2200      	movs	r2, #0
   b5512:	2102      	movs	r1, #2
   b5514:	f7ff bbee 	b.w	b4cf4 <network_disconnect>

000b5518 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5518:	2300      	movs	r3, #0
   b551a:	6840      	ldr	r0, [r0, #4]
   b551c:	461a      	mov	r2, r3
   b551e:	f7ff bbd9 	b.w	b4cd4 <network_connect>
	...

000b5524 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5524:	4b02      	ldr	r3, [pc, #8]	; (b5530 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5526:	2204      	movs	r2, #4
   b5528:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b552a:	4a02      	ldr	r2, [pc, #8]	; (b5534 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b552c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b552e:	4770      	bx	lr
   b5530:	2003e704 	.word	0x2003e704
   b5534:	000b5bd0 	.word	0x000b5bd0

000b5538 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5538:	2300      	movs	r3, #0
   b553a:	6840      	ldr	r0, [r0, #4]
   b553c:	461a      	mov	r2, r3
   b553e:	f7ff bbc9 	b.w	b4cd4 <network_connect>

000b5542 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5542:	6840      	ldr	r0, [r0, #4]
   b5544:	2200      	movs	r2, #0
   b5546:	2102      	movs	r1, #2
   b5548:	f7ff bbd4 	b.w	b4cf4 <network_disconnect>

000b554c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b554c:	2200      	movs	r2, #0
   b554e:	6840      	ldr	r0, [r0, #4]
   b5550:	4611      	mov	r1, r2
   b5552:	f7ff bbc7 	b.w	b4ce4 <network_connecting>

000b5556 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5556:	2200      	movs	r2, #0
   b5558:	6840      	ldr	r0, [r0, #4]
   b555a:	4611      	mov	r1, r2
   b555c:	f7ff bbd2 	b.w	b4d04 <network_ready>

000b5560 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5560:	2300      	movs	r3, #0
   b5562:	6840      	ldr	r0, [r0, #4]
   b5564:	461a      	mov	r2, r3
   b5566:	4619      	mov	r1, r3
   b5568:	f7ff bbd4 	b.w	b4d14 <network_on>

000b556c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b556c:	2300      	movs	r3, #0
   b556e:	6840      	ldr	r0, [r0, #4]
   b5570:	461a      	mov	r2, r3
   b5572:	4619      	mov	r1, r3
   b5574:	f7ff bbd6 	b.w	b4d24 <network_off>

000b5578 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5578:	6840      	ldr	r0, [r0, #4]
   b557a:	2100      	movs	r1, #0
   b557c:	f7ff bbfa 	b.w	b4d74 <network_is_on>

000b5580 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5580:	6840      	ldr	r0, [r0, #4]
   b5582:	2100      	movs	r1, #0
   b5584:	f7ff bbfe 	b.w	b4d84 <network_is_off>

000b5588 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5588:	6840      	ldr	r0, [r0, #4]
   b558a:	2200      	movs	r2, #0
   b558c:	f081 0101 	eor.w	r1, r1, #1
   b5590:	f7ff bbd0 	b.w	b4d34 <network_listen>

000b5594 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5594:	6840      	ldr	r0, [r0, #4]
   b5596:	2200      	movs	r2, #0
   b5598:	f7ff bbdc 	b.w	b4d54 <network_set_listen_timeout>

000b559c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b559c:	2200      	movs	r2, #0
   b559e:	6840      	ldr	r0, [r0, #4]
   b55a0:	4611      	mov	r1, r2
   b55a2:	f7ff bbdf 	b.w	b4d64 <network_get_listen_timeout>

000b55a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b55a6:	2200      	movs	r2, #0
   b55a8:	6840      	ldr	r0, [r0, #4]
   b55aa:	4611      	mov	r1, r2
   b55ac:	f7ff bbca 	b.w	b4d44 <network_listening>

000b55b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b55b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b55b4:	b095      	sub	sp, #84	; 0x54
   b55b6:	4614      	mov	r4, r2
   b55b8:	460d      	mov	r5, r1
   b55ba:	4607      	mov	r7, r0
    IPAddress addr;
   b55bc:	f7ff fdfa 	bl	b51b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b55c0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b55c2:	221c      	movs	r2, #28
   b55c4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b55c6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b55c8:	f000 f98e 	bl	b58e8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b55cc:	2340      	movs	r3, #64	; 0x40
   b55ce:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b55d0:	4620      	mov	r0, r4
   b55d2:	466b      	mov	r3, sp
   b55d4:	aa0c      	add	r2, sp, #48	; 0x30
   b55d6:	2100      	movs	r1, #0
   b55d8:	f7ff fa18 	bl	b4a0c <netdb_getaddrinfo>
    if (!r) {
   b55dc:	4604      	mov	r4, r0
   b55de:	2800      	cmp	r0, #0
   b55e0:	d14b      	bne.n	b567a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b55e2:	4602      	mov	r2, r0
   b55e4:	2101      	movs	r1, #1
   b55e6:	6868      	ldr	r0, [r5, #4]
   b55e8:	f7ff fb8c 	bl	b4d04 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b55ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b55ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b55f0:	4622      	mov	r2, r4
   b55f2:	6868      	ldr	r0, [r5, #4]
   b55f4:	f7ff fb86 	bl	b4d04 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b55f8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b55fa:	4681      	mov	r9, r0
        bool ok = false;
   b55fc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b55fe:	2e00      	cmp	r6, #0
   b5600:	d03b      	beq.n	b567a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5602:	2900      	cmp	r1, #0
   b5604:	d139      	bne.n	b567a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5606:	6873      	ldr	r3, [r6, #4]
   b5608:	2b02      	cmp	r3, #2
   b560a:	d003      	beq.n	b5614 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b560c:	2b0a      	cmp	r3, #10
   b560e:	d011      	beq.n	b5634 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5610:	69f6      	ldr	r6, [r6, #28]
   b5612:	e7f4      	b.n	b55fe <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5614:	f1b8 0f00 	cmp.w	r8, #0
   b5618:	d0fa      	beq.n	b5610 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b561a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b561c:	a806      	add	r0, sp, #24
   b561e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5620:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5622:	f7ff fdf5 	bl	b5210 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5628:	1d3c      	adds	r4, r7, #4
   b562a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b562c:	682b      	ldr	r3, [r5, #0]
   b562e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5630:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5632:	e7ed      	b.n	b5610 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5634:	f1b9 0f00 	cmp.w	r9, #0
   b5638:	d0ea      	beq.n	b5610 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b563a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b563c:	2210      	movs	r2, #16
   b563e:	a801      	add	r0, sp, #4
   b5640:	f000 f952 	bl	b58e8 <memset>
                    a.v = 6;
   b5644:	2306      	movs	r3, #6
   b5646:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b564a:	ad01      	add	r5, sp, #4
   b564c:	f104 0308 	add.w	r3, r4, #8
   b5650:	3418      	adds	r4, #24
   b5652:	6818      	ldr	r0, [r3, #0]
   b5654:	6859      	ldr	r1, [r3, #4]
   b5656:	462a      	mov	r2, r5
   b5658:	c203      	stmia	r2!, {r0, r1}
   b565a:	3308      	adds	r3, #8
   b565c:	42a3      	cmp	r3, r4
   b565e:	4615      	mov	r5, r2
   b5660:	d1f7      	bne.n	b5652 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5662:	a901      	add	r1, sp, #4
   b5664:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5666:	ad07      	add	r5, sp, #28
   b5668:	f7ff fdb2 	bl	b51d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b566c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b566e:	1d3c      	adds	r4, r7, #4
   b5670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5672:	682b      	ldr	r3, [r5, #0]
   b5674:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5676:	4649      	mov	r1, r9
   b5678:	e7ca      	b.n	b5610 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b567a:	9800      	ldr	r0, [sp, #0]
   b567c:	f7ff f9be 	bl	b49fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5680:	4638      	mov	r0, r7
   b5682:	b015      	add	sp, #84	; 0x54
   b5684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5688 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5688:	4b02      	ldr	r3, [pc, #8]	; (b5694 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b568a:	4a03      	ldr	r2, [pc, #12]	; (b5698 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b568c:	601a      	str	r2, [r3, #0]
   b568e:	2200      	movs	r2, #0
   b5690:	605a      	str	r2, [r3, #4]

} // spark
   b5692:	4770      	bx	lr
   b5694:	2003e70c 	.word	0x2003e70c
   b5698:	000b5c0c 	.word	0x000b5c0c

000b569c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b569c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b569e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b56a0:	d902      	bls.n	b56a8 <pinAvailable+0xc>
    return false;
   b56a2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b56a4:	b002      	add	sp, #8
   b56a6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b56a8:	f1a0 030b 	sub.w	r3, r0, #11
   b56ac:	2b02      	cmp	r3, #2
   b56ae:	d81a      	bhi.n	b56e6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b56b0:	4c17      	ldr	r4, [pc, #92]	; (b5710 <pinAvailable+0x74>)
   b56b2:	7821      	ldrb	r1, [r4, #0]
   b56b4:	f3bf 8f5b 	dmb	ish
   b56b8:	f011 0101 	ands.w	r1, r1, #1
   b56bc:	d10b      	bne.n	b56d6 <pinAvailable+0x3a>
   b56be:	4620      	mov	r0, r4
   b56c0:	9101      	str	r1, [sp, #4]
   b56c2:	f7fe fcea 	bl	b409a <__cxa_guard_acquire>
   b56c6:	9901      	ldr	r1, [sp, #4]
   b56c8:	b128      	cbz	r0, b56d6 <pinAvailable+0x3a>
   b56ca:	4812      	ldr	r0, [pc, #72]	; (b5714 <pinAvailable+0x78>)
   b56cc:	f7ff fbd0 	bl	b4e70 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b56d0:	4620      	mov	r0, r4
   b56d2:	f7fe fce7 	bl	b40a4 <__cxa_guard_release>
   b56d6:	4b0f      	ldr	r3, [pc, #60]	; (b5714 <pinAvailable+0x78>)
   b56d8:	7818      	ldrb	r0, [r3, #0]
   b56da:	f7ff fa9f 	bl	b4c1c <hal_spi_is_enabled>
   b56de:	2800      	cmp	r0, #0
   b56e0:	d1df      	bne.n	b56a2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b56e2:	2001      	movs	r0, #1
   b56e4:	e7de      	b.n	b56a4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b56e6:	2801      	cmp	r0, #1
   b56e8:	d809      	bhi.n	b56fe <pinAvailable+0x62>
   b56ea:	f000 f8c3 	bl	b5874 <_Z19__fetch_global_Wirev>
   b56ee:	2100      	movs	r1, #0
   b56f0:	7c00      	ldrb	r0, [r0, #16]
   b56f2:	f7ff fa73 	bl	b4bdc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b56f6:	f080 0001 	eor.w	r0, r0, #1
   b56fa:	b2c0      	uxtb	r0, r0
   b56fc:	e7d2      	b.n	b56a4 <pinAvailable+0x8>
   b56fe:	3809      	subs	r0, #9
   b5700:	2801      	cmp	r0, #1
   b5702:	d8ee      	bhi.n	b56e2 <pinAvailable+0x46>
   b5704:	f000 f864 	bl	b57d0 <_Z22__fetch_global_Serial1v>
   b5708:	7c00      	ldrb	r0, [r0, #16]
   b570a:	f7ff fa0f 	bl	b4b2c <hal_usart_is_enabled>
   b570e:	e7f2      	b.n	b56f6 <pinAvailable+0x5a>
   b5710:	2003e714 	.word	0x2003e714
   b5714:	2003e718 	.word	0x2003e718

000b5718 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5718:	2823      	cmp	r0, #35	; 0x23
{
   b571a:	b538      	push	{r3, r4, r5, lr}
   b571c:	4604      	mov	r4, r0
   b571e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5720:	d80a      	bhi.n	b5738 <pinMode+0x20>
   b5722:	29ff      	cmp	r1, #255	; 0xff
   b5724:	d008      	beq.n	b5738 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5726:	f7ff ffb9 	bl	b569c <pinAvailable>
   b572a:	b128      	cbz	r0, b5738 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b572c:	4629      	mov	r1, r5
   b572e:	4620      	mov	r0, r4
}
   b5730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5734:	f7ff b97a 	b.w	b4a2c <HAL_Pin_Mode>
}
   b5738:	bd38      	pop	{r3, r4, r5, pc}

000b573a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b573a:	b538      	push	{r3, r4, r5, lr}
   b573c:	4604      	mov	r4, r0
   b573e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5740:	f7ff f97c 	bl	b4a3c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5744:	28ff      	cmp	r0, #255	; 0xff
   b5746:	d010      	beq.n	b576a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5748:	2806      	cmp	r0, #6
   b574a:	d804      	bhi.n	b5756 <digitalWrite+0x1c>
   b574c:	234d      	movs	r3, #77	; 0x4d
   b574e:	fa23 f000 	lsr.w	r0, r3, r0
   b5752:	07c3      	lsls	r3, r0, #31
   b5754:	d409      	bmi.n	b576a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5756:	4620      	mov	r0, r4
   b5758:	f7ff ffa0 	bl	b569c <pinAvailable>
   b575c:	b128      	cbz	r0, b576a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b575e:	4629      	mov	r1, r5
   b5760:	4620      	mov	r0, r4
}
   b5762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5766:	f7ff b971 	b.w	b4a4c <HAL_GPIO_Write>
}
   b576a:	bd38      	pop	{r3, r4, r5, pc}

000b576c <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b576c:	280d      	cmp	r0, #13
{
   b576e:	b510      	push	{r4, lr}
   b5770:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5772:	bf9c      	itt	ls
   b5774:	340e      	addls	r4, #14
   b5776:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b5778:	4620      	mov	r0, r4
   b577a:	f7ff ff8f 	bl	b569c <pinAvailable>
   b577e:	b150      	cbz	r0, b5796 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5780:	2103      	movs	r1, #3
   b5782:	4620      	mov	r0, r4
   b5784:	f7ff f94a 	bl	b4a1c <HAL_Validate_Pin_Function>
   b5788:	2803      	cmp	r0, #3
   b578a:	d104      	bne.n	b5796 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b578c:	4620      	mov	r0, r4
}
   b578e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5792:	f7ff b963 	b.w	b4a5c <hal_adc_read>
}
   b5796:	2000      	movs	r0, #0
   b5798:	bd10      	pop	{r4, pc}

000b579a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b579a:	4770      	bx	lr

000b579c <_Z20acquireSerial1Bufferv>:
{
   b579c:	b538      	push	{r3, r4, r5, lr}
   b579e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b57a0:	2514      	movs	r5, #20
   b57a2:	462a      	mov	r2, r5
   b57a4:	2100      	movs	r1, #0
   b57a6:	f000 f89f 	bl	b58e8 <memset>
   b57aa:	8025      	strh	r5, [r4, #0]
   b57ac:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57ae:	4907      	ldr	r1, [pc, #28]	; (b57cc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b57b0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57b2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b57b4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57b6:	f000 f881 	bl	b58bc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57ba:	4904      	ldr	r1, [pc, #16]	; (b57cc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b57bc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57be:	4628      	mov	r0, r5
   b57c0:	f000 f87c 	bl	b58bc <_ZnajRKSt9nothrow_t>
    };
   b57c4:	60e0      	str	r0, [r4, #12]
}
   b57c6:	4620      	mov	r0, r4
   b57c8:	bd38      	pop	{r3, r4, r5, pc}
   b57ca:	bf00      	nop
   b57cc:	000b5c40 	.word	0x000b5c40

000b57d0 <_Z22__fetch_global_Serial1v>:
{
   b57d0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b57d2:	4d0e      	ldr	r5, [pc, #56]	; (b580c <_Z22__fetch_global_Serial1v+0x3c>)
   b57d4:	7829      	ldrb	r1, [r5, #0]
   b57d6:	f3bf 8f5b 	dmb	ish
   b57da:	f011 0401 	ands.w	r4, r1, #1
{
   b57de:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b57e0:	d111      	bne.n	b5806 <_Z22__fetch_global_Serial1v+0x36>
   b57e2:	4628      	mov	r0, r5
   b57e4:	f7fe fc59 	bl	b409a <__cxa_guard_acquire>
   b57e8:	b168      	cbz	r0, b5806 <_Z22__fetch_global_Serial1v+0x36>
   b57ea:	a801      	add	r0, sp, #4
   b57ec:	f7ff ffd6 	bl	b579c <_Z20acquireSerial1Bufferv>
   b57f0:	aa01      	add	r2, sp, #4
   b57f2:	4621      	mov	r1, r4
   b57f4:	4806      	ldr	r0, [pc, #24]	; (b5810 <_Z22__fetch_global_Serial1v+0x40>)
   b57f6:	f7ff fdd9 	bl	b53ac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b57fa:	4628      	mov	r0, r5
   b57fc:	f7fe fc52 	bl	b40a4 <__cxa_guard_release>
   b5800:	4804      	ldr	r0, [pc, #16]	; (b5814 <_Z22__fetch_global_Serial1v+0x44>)
   b5802:	f000 f85d 	bl	b58c0 <atexit>
    return serial1;
}
   b5806:	4802      	ldr	r0, [pc, #8]	; (b5810 <_Z22__fetch_global_Serial1v+0x40>)
   b5808:	b007      	add	sp, #28
   b580a:	bd30      	pop	{r4, r5, pc}
   b580c:	2003e720 	.word	0x2003e720
   b5810:	2003e724 	.word	0x2003e724
   b5814:	000b579b 	.word	0x000b579b

000b5818 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b5818:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b581a:	4c08      	ldr	r4, [pc, #32]	; (b583c <_Z21__fetch_global_EEPROMv+0x24>)
   b581c:	7823      	ldrb	r3, [r4, #0]
   b581e:	f3bf 8f5b 	dmb	ish
   b5822:	07db      	lsls	r3, r3, #31
   b5824:	d408      	bmi.n	b5838 <_Z21__fetch_global_EEPROMv+0x20>
   b5826:	4620      	mov	r0, r4
   b5828:	f7fe fc37 	bl	b409a <__cxa_guard_acquire>
   b582c:	b120      	cbz	r0, b5838 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b582e:	f7ff f92d 	bl	b4a8c <HAL_EEPROM_Init>
   b5832:	4620      	mov	r0, r4
   b5834:	f7fe fc36 	bl	b40a4 <__cxa_guard_release>
	return eeprom;
}
   b5838:	4801      	ldr	r0, [pc, #4]	; (b5840 <_Z21__fetch_global_EEPROMv+0x28>)
   b583a:	bd10      	pop	{r4, pc}
   b583c:	2003e73c 	.word	0x2003e73c
   b5840:	2003e740 	.word	0x2003e740

000b5844 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5844:	4770      	bx	lr
	...

000b5848 <_Z17acquireWireBufferv>:
{
   b5848:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b584a:	2520      	movs	r5, #32
   b584c:	2314      	movs	r3, #20
{
   b584e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5850:	6003      	str	r3, [r0, #0]
   b5852:	6085      	str	r5, [r0, #8]
   b5854:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5856:	4906      	ldr	r1, [pc, #24]	; (b5870 <_Z17acquireWireBufferv+0x28>)
   b5858:	4628      	mov	r0, r5
   b585a:	f000 f82f 	bl	b58bc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b585e:	4904      	ldr	r1, [pc, #16]	; (b5870 <_Z17acquireWireBufferv+0x28>)
	};
   b5860:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5862:	4628      	mov	r0, r5
   b5864:	f000 f82a 	bl	b58bc <_ZnajRKSt9nothrow_t>
	};
   b5868:	60e0      	str	r0, [r4, #12]
}
   b586a:	4620      	mov	r0, r4
   b586c:	bd38      	pop	{r3, r4, r5, pc}
   b586e:	bf00      	nop
   b5870:	000b5c40 	.word	0x000b5c40

000b5874 <_Z19__fetch_global_Wirev>:
{
   b5874:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5876:	4d0e      	ldr	r5, [pc, #56]	; (b58b0 <_Z19__fetch_global_Wirev+0x3c>)
   b5878:	7829      	ldrb	r1, [r5, #0]
   b587a:	f3bf 8f5b 	dmb	ish
   b587e:	f011 0401 	ands.w	r4, r1, #1
{
   b5882:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5884:	d111      	bne.n	b58aa <_Z19__fetch_global_Wirev+0x36>
   b5886:	4628      	mov	r0, r5
   b5888:	f7fe fc07 	bl	b409a <__cxa_guard_acquire>
   b588c:	b168      	cbz	r0, b58aa <_Z19__fetch_global_Wirev+0x36>
   b588e:	a801      	add	r0, sp, #4
   b5890:	f7ff ffda 	bl	b5848 <_Z17acquireWireBufferv>
   b5894:	aa01      	add	r2, sp, #4
   b5896:	4621      	mov	r1, r4
   b5898:	4806      	ldr	r0, [pc, #24]	; (b58b4 <_Z19__fetch_global_Wirev+0x40>)
   b589a:	f7ff fdc7 	bl	b542c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b589e:	4628      	mov	r0, r5
   b58a0:	f7fe fc00 	bl	b40a4 <__cxa_guard_release>
   b58a4:	4804      	ldr	r0, [pc, #16]	; (b58b8 <_Z19__fetch_global_Wirev+0x44>)
   b58a6:	f000 f80b 	bl	b58c0 <atexit>
	return wire;
}
   b58aa:	4802      	ldr	r0, [pc, #8]	; (b58b4 <_Z19__fetch_global_Wirev+0x40>)
   b58ac:	b007      	add	sp, #28
   b58ae:	bd30      	pop	{r4, r5, pc}
   b58b0:	2003e744 	.word	0x2003e744
   b58b4:	2003e748 	.word	0x2003e748
   b58b8:	000b5845 	.word	0x000b5845

000b58bc <_ZnajRKSt9nothrow_t>:
   b58bc:	f7fe bbe9 	b.w	b4092 <_Znaj>

000b58c0 <atexit>:
   b58c0:	2300      	movs	r3, #0
   b58c2:	4601      	mov	r1, r0
   b58c4:	461a      	mov	r2, r3
   b58c6:	4618      	mov	r0, r3
   b58c8:	f000 b84c 	b.w	b5964 <__register_exitproc>

000b58cc <memcpy>:
   b58cc:	440a      	add	r2, r1
   b58ce:	4291      	cmp	r1, r2
   b58d0:	f100 33ff 	add.w	r3, r0, #4294967295
   b58d4:	d100      	bne.n	b58d8 <memcpy+0xc>
   b58d6:	4770      	bx	lr
   b58d8:	b510      	push	{r4, lr}
   b58da:	f811 4b01 	ldrb.w	r4, [r1], #1
   b58de:	f803 4f01 	strb.w	r4, [r3, #1]!
   b58e2:	4291      	cmp	r1, r2
   b58e4:	d1f9      	bne.n	b58da <memcpy+0xe>
   b58e6:	bd10      	pop	{r4, pc}

000b58e8 <memset>:
   b58e8:	4402      	add	r2, r0
   b58ea:	4603      	mov	r3, r0
   b58ec:	4293      	cmp	r3, r2
   b58ee:	d100      	bne.n	b58f2 <memset+0xa>
   b58f0:	4770      	bx	lr
   b58f2:	f803 1b01 	strb.w	r1, [r3], #1
   b58f6:	e7f9      	b.n	b58ec <memset+0x4>

000b58f8 <srand>:
   b58f8:	b538      	push	{r3, r4, r5, lr}
   b58fa:	4b10      	ldr	r3, [pc, #64]	; (b593c <srand+0x44>)
   b58fc:	681d      	ldr	r5, [r3, #0]
   b58fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5900:	4604      	mov	r4, r0
   b5902:	b9b3      	cbnz	r3, b5932 <srand+0x3a>
   b5904:	2018      	movs	r0, #24
   b5906:	f7ff fa4d 	bl	b4da4 <malloc>
   b590a:	4602      	mov	r2, r0
   b590c:	63a8      	str	r0, [r5, #56]	; 0x38
   b590e:	b920      	cbnz	r0, b591a <srand+0x22>
   b5910:	4b0b      	ldr	r3, [pc, #44]	; (b5940 <srand+0x48>)
   b5912:	480c      	ldr	r0, [pc, #48]	; (b5944 <srand+0x4c>)
   b5914:	2142      	movs	r1, #66	; 0x42
   b5916:	f7ff fa5d 	bl	b4dd4 <__assert_func>
   b591a:	490b      	ldr	r1, [pc, #44]	; (b5948 <srand+0x50>)
   b591c:	4b0b      	ldr	r3, [pc, #44]	; (b594c <srand+0x54>)
   b591e:	e9c0 1300 	strd	r1, r3, [r0]
   b5922:	4b0b      	ldr	r3, [pc, #44]	; (b5950 <srand+0x58>)
   b5924:	6083      	str	r3, [r0, #8]
   b5926:	230b      	movs	r3, #11
   b5928:	8183      	strh	r3, [r0, #12]
   b592a:	2100      	movs	r1, #0
   b592c:	2001      	movs	r0, #1
   b592e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5932:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5934:	2200      	movs	r2, #0
   b5936:	611c      	str	r4, [r3, #16]
   b5938:	615a      	str	r2, [r3, #20]
   b593a:	bd38      	pop	{r3, r4, r5, pc}
   b593c:	2003e5f4 	.word	0x2003e5f4
   b5940:	000b5c41 	.word	0x000b5c41
   b5944:	000b5c58 	.word	0x000b5c58
   b5948:	abcd330e 	.word	0xabcd330e
   b594c:	e66d1234 	.word	0xe66d1234
   b5950:	0005deec 	.word	0x0005deec

000b5954 <strlen>:
   b5954:	4603      	mov	r3, r0
   b5956:	f813 2b01 	ldrb.w	r2, [r3], #1
   b595a:	2a00      	cmp	r2, #0
   b595c:	d1fb      	bne.n	b5956 <strlen+0x2>
   b595e:	1a18      	subs	r0, r3, r0
   b5960:	3801      	subs	r0, #1
   b5962:	4770      	bx	lr

000b5964 <__register_exitproc>:
   b5964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5968:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5a24 <__register_exitproc+0xc0>
   b596c:	4606      	mov	r6, r0
   b596e:	f8d8 0000 	ldr.w	r0, [r8]
   b5972:	461f      	mov	r7, r3
   b5974:	460d      	mov	r5, r1
   b5976:	4691      	mov	r9, r2
   b5978:	f000 f856 	bl	b5a28 <__retarget_lock_acquire_recursive>
   b597c:	4b25      	ldr	r3, [pc, #148]	; (b5a14 <__register_exitproc+0xb0>)
   b597e:	681c      	ldr	r4, [r3, #0]
   b5980:	b934      	cbnz	r4, b5990 <__register_exitproc+0x2c>
   b5982:	4c25      	ldr	r4, [pc, #148]	; (b5a18 <__register_exitproc+0xb4>)
   b5984:	601c      	str	r4, [r3, #0]
   b5986:	4b25      	ldr	r3, [pc, #148]	; (b5a1c <__register_exitproc+0xb8>)
   b5988:	b113      	cbz	r3, b5990 <__register_exitproc+0x2c>
   b598a:	681b      	ldr	r3, [r3, #0]
   b598c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5990:	6863      	ldr	r3, [r4, #4]
   b5992:	2b1f      	cmp	r3, #31
   b5994:	dd07      	ble.n	b59a6 <__register_exitproc+0x42>
   b5996:	f8d8 0000 	ldr.w	r0, [r8]
   b599a:	f000 f847 	bl	b5a2c <__retarget_lock_release_recursive>
   b599e:	f04f 30ff 	mov.w	r0, #4294967295
   b59a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b59a6:	b34e      	cbz	r6, b59fc <__register_exitproc+0x98>
   b59a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b59ac:	b988      	cbnz	r0, b59d2 <__register_exitproc+0x6e>
   b59ae:	4b1c      	ldr	r3, [pc, #112]	; (b5a20 <__register_exitproc+0xbc>)
   b59b0:	b923      	cbnz	r3, b59bc <__register_exitproc+0x58>
   b59b2:	f8d8 0000 	ldr.w	r0, [r8]
   b59b6:	f000 f838 	bl	b5a2a <__retarget_lock_release>
   b59ba:	e7f0      	b.n	b599e <__register_exitproc+0x3a>
   b59bc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b59c0:	f7ff f9f0 	bl	b4da4 <malloc>
   b59c4:	2800      	cmp	r0, #0
   b59c6:	d0f4      	beq.n	b59b2 <__register_exitproc+0x4e>
   b59c8:	2300      	movs	r3, #0
   b59ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b59ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b59d2:	6863      	ldr	r3, [r4, #4]
   b59d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b59d8:	2201      	movs	r2, #1
   b59da:	409a      	lsls	r2, r3
   b59dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b59e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b59e4:	4313      	orrs	r3, r2
   b59e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b59ea:	2e02      	cmp	r6, #2
   b59ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b59f0:	bf02      	ittt	eq
   b59f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b59f6:	4313      	orreq	r3, r2
   b59f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b59fc:	6863      	ldr	r3, [r4, #4]
   b59fe:	f8d8 0000 	ldr.w	r0, [r8]
   b5a02:	1c5a      	adds	r2, r3, #1
   b5a04:	3302      	adds	r3, #2
   b5a06:	6062      	str	r2, [r4, #4]
   b5a08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5a0c:	f000 f80e 	bl	b5a2c <__retarget_lock_release_recursive>
   b5a10:	2000      	movs	r0, #0
   b5a12:	e7c6      	b.n	b59a2 <__register_exitproc+0x3e>
   b5a14:	2003e7e8 	.word	0x2003e7e8
   b5a18:	2003e75c 	.word	0x2003e75c
   b5a1c:	00000000 	.word	0x00000000
   b5a20:	000b4da5 	.word	0x000b4da5
   b5a24:	2003e658 	.word	0x2003e658

000b5a28 <__retarget_lock_acquire_recursive>:
   b5a28:	4770      	bx	lr

000b5a2a <__retarget_lock_release>:
   b5a2a:	4770      	bx	lr

000b5a2c <__retarget_lock_release_recursive>:
   b5a2c:	4770      	bx	lr

000b5a2e <link_code_end>:
	...

000b5a30 <dynalib_user>:
   b5a30:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5a40:	0000 0000 754d 746c 7069 656c 6578 2e72     ....Multiplexer.
   b5a50:	6573 2874 2029 203e 6176 756c 2065 756d     set() > value mu
   b5a60:	7473 6220 2065 6e69 7420 6568 7220 6e61     st be in the ran
   b5a70:	6567 6f20 2066 2e30 2e2e 3531 202c 6176     ge of 0...15, va
   b5a80:	756c 2065 203d 6425 000a 4957 4950 474e     lue = %d..WIPING
   b5a90:	000a 6957 6570 2064 6425 252f 0a64 4100     ..Wiped %d/%d..A
   b5aa0:	6464 6465 0020 6425 2000 6f74 6320 7275     dded .%d. to cur
   b5ab0:	6144 6174 000a 504d 3655 3530 2030 203e     Data..MPU6050 > 
   b5ac0:	6e45 6261 696c 676e 5720 7269 0a65 0000     Enabling Wire...

000b5ad0 <_ZTVN5spark13EthernetClassE>:
	...
   b5ad8:	4e53 000b 4e49 000b 4e3f 000b 4e35 000b     SN..IN..?N..5N..
   b5ae8:	4e29 000b 4e1d 000b 5579 000b 5581 000b     )N...N..yU...U..
   b5af8:	4e11 000b 4e09 000b 4dff 000b 4df5 000b     .N...N...M...M..
   b5b08:	55b1 000b 7061 0070 5925 252d 2d6d 6425     .U..app.%Y-%m-%d
   b5b18:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5b28:	6d69 0065                                   ime.

000b5b2c <_ZTV9IPAddress>:
	...
   b5b34:	5151 000b 5141 000b 5143 000b               QQ..AQ..CQ..

000b5b40 <_ZTV9USBSerial>:
	...
   b5b48:	5237 000b 529f 000b 5275 000b 4eb9 000b     7R...R..uR...N..
   b5b58:	5267 000b 5239 000b 5249 000b 5299 000b     gR..9R..IR...R..
   b5b68:	5259 000b 5231 000b                         YR..1R..

000b5b70 <_ZTV11USARTSerial>:
	...
   b5b78:	5331 000b 539d 000b 5375 000b 4eb9 000b     1S...S..uS...N..
   b5b88:	5345 000b 5361 000b 5353 000b 536f 000b     ES..aS..SS..oS..
   b5b98:	5333 000b 5337 000b                         3S..7S..

000b5ba0 <_ZTV7TwoWire>:
	...
   b5ba8:	53d5 000b 541f 000b 53f7 000b 53d7 000b     .S...T...S...S..
   b5bb8:	53ff 000b 5407 000b 540f 000b 5417 000b     .S...T...T...T..

000b5bc8 <_ZTVN5spark9WiFiClassE>:
	...
   b5bd0:	5519 000b 550f 000b 5505 000b 54c7 000b     .U...U...U...T..
   b5be0:	4fc5 000b 54f9 000b 5579 000b 5581 000b     .O...T..yU...U..
   b5bf0:	54ed 000b 54e5 000b 54db 000b 54d1 000b     .T...T...T...T..
   b5c00:	55b1 000b                                   .U..

000b5c04 <_ZTVN5spark12NetworkClassE>:
	...
   b5c0c:	5539 000b 5543 000b 554d 000b 5557 000b     9U..CU..MU..WU..
   b5c1c:	5561 000b 556d 000b 5579 000b 5581 000b     aU..mU..yU...U..
   b5c2c:	5589 000b 5595 000b 559d 000b 55a7 000b     .U...U...U...U..
   b5c3c:	55b1 000b                                   .U..

000b5c40 <_ZSt7nothrow>:
   b5c40:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5c50:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5c60:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5c70:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5c80:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5c90:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5ca0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5cb0:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5cc0:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5cd0:	646e 632e                                    nd.c.

000b5cd5 <link_const_variable_data_end>:
   b5cd5:	00          	.byte	0x00
	...

000b5cd8 <link_constructors_location>:
   b5cd8:	000b47a9 	.word	0x000b47a9
   b5cdc:	000b4e5d 	.word	0x000b4e5d
   b5ce0:	000b4e85 	.word	0x000b4e85
   b5ce4:	000b4ea9 	.word	0x000b4ea9
   b5ce8:	000b4fd1 	.word	0x000b4fd1
   b5cec:	000b4fe1 	.word	0x000b4fe1
   b5cf0:	000b4ffd 	.word	0x000b4ffd
   b5cf4:	000b5525 	.word	0x000b5525
   b5cf8:	000b5689 	.word	0x000b5689

000b5cfc <link_constructors_end>:
   b5cfc:	00000000 	.word	0x00000000
