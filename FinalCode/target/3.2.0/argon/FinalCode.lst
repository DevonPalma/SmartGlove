
c:/Users/deedp/Documents/IOT/SmartGlove/FinalCode/target/3.2.0/argon/FinalCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d14  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b5d30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e5f0  000b5d34  0001e5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000194  2003e65c  2003e65c  0002e65c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b5da0  000b5da0  00025da0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b5dc8  000b5dc8  00025dc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00108bd3  00000000  00000000  00025dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00011bbf  00000000  00000000  0012e99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000332b2  00000000  00000000  0014055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000027b8  00000000  00000000  00173810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009798  00000000  00000000  00175fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038797  00000000  00000000  0017f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00039e5d  00000000  00000000  001b7ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001285b0  00000000  00000000  001f1d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006ef4  00000000  00000000  0031a304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fc35 	bl	b589c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fc3d 	bl	b58b8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5f0 	.word	0x2003e5f0
   b4048:	000b5d34 	.word	0x000b5d34
   b404c:	2003e65c 	.word	0x2003e65c
   b4050:	2003e65c 	.word	0x2003e65c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f825 	bl	b50ac <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5d04 	.word	0x000b5d04
   b407c:	000b5d28 	.word	0x000b5d28

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba42 	b.w	b4508 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 faa7 	bl	b45d8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bfc5 	b.w	b501c <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 be73 	b.w	b4d7c <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 be79 	b.w	b4d8c <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5EERefaSEh.isra.0>:
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   b40aa:	6800      	ldr	r0, [r0, #0]
   b40ac:	f000 bcf2 	b.w	b4a94 <HAL_EEPROM_Write>

000b40b0 <_ZNK5EERefdeEv.isra.0>:
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b40b0:	f000 bce8 	b.w	b4a84 <HAL_EEPROM_Read>

000b40b4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b4:	b40e      	push	{r1, r2, r3}
   b40b6:	b503      	push	{r0, r1, lr}
   b40b8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ba:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40bc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40c0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40c2:	f000 ff3a 	bl	b4f3a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c6:	b002      	add	sp, #8
   b40c8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40cc:	b003      	add	sp, #12
   b40ce:	4770      	bx	lr

000b40d0 <_ZN11Multiplexer3setEh>:
    void disable() {
        digitalWrite(en, HIGH);
    }

    void set(byte index) {
        if (index < 0 || index > 15) {
   b40d0:	290f      	cmp	r1, #15
    void set(byte index) {
   b40d2:	b538      	push	{r3, r4, r5, lr}
   b40d4:	4605      	mov	r5, r0
   b40d6:	460c      	mov	r4, r1
        if (index < 0 || index > 15) {
   b40d8:	d906      	bls.n	b40e8 <_ZN11Multiplexer3setEh+0x18>
            Serial.printf("Multiplexer.set() > value must be in the range of 0...15, value = %d\n", index);
   b40da:	f001 f8eb 	bl	b52b4 <_Z16_fetch_usbserialv>
   b40de:	490d      	ldr	r1, [pc, #52]	; (b4114 <_ZN11Multiplexer3setEh+0x44>)
   b40e0:	4622      	mov	r2, r4
   b40e2:	f7ff ffe7 	bl	b40b4 <_ZN5Print6printfEPKcz>

        digitalWrite(s0, (index & 0x1) >> 0);
        digitalWrite(s1, (index & 0x2) >> 1);
        digitalWrite(s2, (index & 0x4) >> 2);
        digitalWrite(s3, (index & 0x8) >> 3);
    }
   b40e6:	bd38      	pop	{r3, r4, r5, pc}
        digitalWrite(s0, (index & 0x1) >> 0);
   b40e8:	7840      	ldrb	r0, [r0, #1]
   b40ea:	f001 0101 	and.w	r1, r1, #1
   b40ee:	f001 fb0c 	bl	b570a <digitalWrite>
        digitalWrite(s1, (index & 0x2) >> 1);
   b40f2:	78a8      	ldrb	r0, [r5, #2]
   b40f4:	f3c4 0140 	ubfx	r1, r4, #1, #1
   b40f8:	f001 fb07 	bl	b570a <digitalWrite>
        digitalWrite(s2, (index & 0x4) >> 2);
   b40fc:	78e8      	ldrb	r0, [r5, #3]
   b40fe:	f3c4 0180 	ubfx	r1, r4, #2, #1
   b4102:	f001 fb02 	bl	b570a <digitalWrite>
        digitalWrite(s3, (index & 0x8) >> 3);
   b4106:	7928      	ldrb	r0, [r5, #4]
   b4108:	08e1      	lsrs	r1, r4, #3
    }
   b410a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(s3, (index & 0x8) >> 3);
   b410e:	f001 bafc 	b.w	b570a <digitalWrite>
   b4112:	bf00      	nop
   b4114:	000b5a14 	.word	0x000b5a14

000b4118 <_ZN11Multiplexer4readEh>:

    int read(byte index) {
   b4118:	b538      	push	{r3, r4, r5, lr}
   b411a:	4604      	mov	r4, r0
        set(index);
   b411c:	f7ff ffd8 	bl	b40d0 <_ZN11Multiplexer3setEh>
        digitalWrite(en, LOW);
   b4120:	7820      	ldrb	r0, [r4, #0]
   b4122:	2100      	movs	r1, #0
   b4124:	f001 faf1 	bl	b570a <digitalWrite>
        return read();
    }

    int read() {
        enable();
        int val = analogRead(sig);
   b4128:	7960      	ldrb	r0, [r4, #5]
   b412a:	f001 fb07 	bl	b573c <analogRead>
        digitalWrite(en, HIGH);
   b412e:	2101      	movs	r1, #1
        int val = analogRead(sig);
   b4130:	4605      	mov	r5, r0
        digitalWrite(en, HIGH);
   b4132:	7820      	ldrb	r0, [r4, #0]
   b4134:	f001 fae9 	bl	b570a <digitalWrite>
    }
   b4138:	4628      	mov	r0, r5
   b413a:	bd38      	pop	{r3, r4, r5, pc}

000b413c <_ZN21MultiplexerCollectionC1EP11Multiplexer>:
    // This results in a simple range conversion of [VAL * (2^8/2^12)] or [VAL / 2^4] or [VAL/16]
    // Fingers range now between 0-255

    MultiplexerCollection() {}

    MultiplexerCollection(Multiplexer *mulp) {
   b413c:	b538      	push	{r3, r4, r5, lr}
   b413e:	460d      	mov	r5, r1
   b4140:	4604      	mov	r4, r0
        thumb = mulp->read(M_THUMB) / 16;
   b4142:	2109      	movs	r1, #9
   b4144:	4628      	mov	r0, r5
   b4146:	f7ff ffe7 	bl	b4118 <_ZN11Multiplexer4readEh>
   b414a:	2800      	cmp	r0, #0
   b414c:	bfb8      	it	lt
   b414e:	300f      	addlt	r0, #15
   b4150:	1100      	asrs	r0, r0, #4
   b4152:	7020      	strb	r0, [r4, #0]
        pointer_high = mulp->read(M_POINTER_HIGH) / 16;
   b4154:	2108      	movs	r1, #8
   b4156:	4628      	mov	r0, r5
   b4158:	f7ff ffde 	bl	b4118 <_ZN11Multiplexer4readEh>
   b415c:	2800      	cmp	r0, #0
   b415e:	bfb8      	it	lt
   b4160:	300f      	addlt	r0, #15
   b4162:	1100      	asrs	r0, r0, #4
   b4164:	7060      	strb	r0, [r4, #1]
        pointer_low = mulp->read(M_POINTER_LOW) / 16;
   b4166:	2107      	movs	r1, #7
   b4168:	4628      	mov	r0, r5
   b416a:	f7ff ffd5 	bl	b4118 <_ZN11Multiplexer4readEh>
   b416e:	2800      	cmp	r0, #0
   b4170:	bfb8      	it	lt
   b4172:	300f      	addlt	r0, #15
   b4174:	1100      	asrs	r0, r0, #4
   b4176:	70a0      	strb	r0, [r4, #2]
        middle_high = mulp->read(M_MIDDLE_HIGH) / 16;
   b4178:	210c      	movs	r1, #12
   b417a:	4628      	mov	r0, r5
   b417c:	f7ff ffcc 	bl	b4118 <_ZN11Multiplexer4readEh>
   b4180:	2800      	cmp	r0, #0
   b4182:	bfb8      	it	lt
   b4184:	300f      	addlt	r0, #15
   b4186:	1100      	asrs	r0, r0, #4
   b4188:	70e0      	strb	r0, [r4, #3]
        middle_low = mulp->read(M_MIDDLE_LOW) / 16;
   b418a:	210d      	movs	r1, #13
   b418c:	4628      	mov	r0, r5
   b418e:	f7ff ffc3 	bl	b4118 <_ZN11Multiplexer4readEh>
   b4192:	2800      	cmp	r0, #0
   b4194:	bfb8      	it	lt
   b4196:	300f      	addlt	r0, #15
   b4198:	1100      	asrs	r0, r0, #4
   b419a:	7120      	strb	r0, [r4, #4]
        ring_high = mulp->read(M_RING_HIGH) / 16;
   b419c:	210a      	movs	r1, #10
   b419e:	4628      	mov	r0, r5
   b41a0:	f7ff ffba 	bl	b4118 <_ZN11Multiplexer4readEh>
   b41a4:	2800      	cmp	r0, #0
   b41a6:	bfb8      	it	lt
   b41a8:	300f      	addlt	r0, #15
   b41aa:	1100      	asrs	r0, r0, #4
   b41ac:	7160      	strb	r0, [r4, #5]
        ring_low = mulp->read(M_RING_LOW) / 16;
   b41ae:	210b      	movs	r1, #11
   b41b0:	4628      	mov	r0, r5
   b41b2:	f7ff ffb1 	bl	b4118 <_ZN11Multiplexer4readEh>
   b41b6:	2800      	cmp	r0, #0
   b41b8:	bfb8      	it	lt
   b41ba:	300f      	addlt	r0, #15
   b41bc:	1100      	asrs	r0, r0, #4
   b41be:	71a0      	strb	r0, [r4, #6]
        pinky_high = mulp->read(M_PINKY_HIGH) / 16;
   b41c0:	210e      	movs	r1, #14
   b41c2:	4628      	mov	r0, r5
   b41c4:	f7ff ffa8 	bl	b4118 <_ZN11Multiplexer4readEh>
   b41c8:	2800      	cmp	r0, #0
   b41ca:	bfb8      	it	lt
   b41cc:	300f      	addlt	r0, #15
   b41ce:	1100      	asrs	r0, r0, #4
   b41d0:	71e0      	strb	r0, [r4, #7]
        pinky_low = mulp->read(M_PINKY_LOW) / 16;
   b41d2:	210f      	movs	r1, #15
   b41d4:	4628      	mov	r0, r5
   b41d6:	f7ff ff9f 	bl	b4118 <_ZN11Multiplexer4readEh>
   b41da:	2800      	cmp	r0, #0
   b41dc:	bfb8      	it	lt
   b41de:	300f      	addlt	r0, #15
   b41e0:	1100      	asrs	r0, r0, #4
   b41e2:	7220      	strb	r0, [r4, #8]
    }
   b41e4:	4620      	mov	r0, r4
   b41e6:	bd38      	pop	{r3, r4, r5, pc}

000b41e8 <_ZN21MultiplexerCollection12saveToEEPROMEi>:
        val += abs(pinky_high - mulpC->pinky_high);
        val += abs(pinky_low - mulpC->pinky_low);
        return val;
    }

    void saveToEEPROM(int index) {
   b41e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b41ea:	4605      	mov	r5, r0
        int startIndex = index * 9;
   b41ec:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
        EEPROM.write(startIndex + 0, thumb);
   b41f0:	f001 fafa 	bl	b57e8 <_Z21__fetch_global_EEPROMv>


    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b41f4:	7829      	ldrb	r1, [r5, #0]
        : index( index )                 {}
   b41f6:	9401      	str	r4, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b41f8:	a801      	add	r0, sp, #4
   b41fa:	f7ff ff56 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 1, pointer_high);
   b41fe:	f001 faf3 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b4202:	1c63      	adds	r3, r4, #1
   b4204:	7869      	ldrb	r1, [r5, #1]
        : index( index )                 {}
   b4206:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4208:	a801      	add	r0, sp, #4
   b420a:	f7ff ff4e 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 2, pointer_low);
   b420e:	f001 faeb 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b4212:	1ca3      	adds	r3, r4, #2
   b4214:	78a9      	ldrb	r1, [r5, #2]
        : index( index )                 {}
   b4216:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4218:	a801      	add	r0, sp, #4
   b421a:	f7ff ff46 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 3, middle_high);
   b421e:	f001 fae3 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b4222:	1ce3      	adds	r3, r4, #3
   b4224:	78e9      	ldrb	r1, [r5, #3]
        : index( index )                 {}
   b4226:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4228:	a801      	add	r0, sp, #4
   b422a:	f7ff ff3e 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 4, middle_low);
   b422e:	f001 fadb 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b4232:	1d23      	adds	r3, r4, #4
   b4234:	7929      	ldrb	r1, [r5, #4]
        : index( index )                 {}
   b4236:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4238:	a801      	add	r0, sp, #4
   b423a:	f7ff ff36 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 5, ring_high);
   b423e:	f001 fad3 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b4242:	1d63      	adds	r3, r4, #5
   b4244:	7969      	ldrb	r1, [r5, #5]
        : index( index )                 {}
   b4246:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4248:	a801      	add	r0, sp, #4
   b424a:	f7ff ff2e 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 6, ring_low);
   b424e:	f001 facb 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b4252:	1da3      	adds	r3, r4, #6
   b4254:	79a9      	ldrb	r1, [r5, #6]
        : index( index )                 {}
   b4256:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4258:	a801      	add	r0, sp, #4
   b425a:	f7ff ff26 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 7, pinky_high);
   b425e:	f001 fac3 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b4262:	1de3      	adds	r3, r4, #7
   b4264:	79e9      	ldrb	r1, [r5, #7]
        : index( index )                 {}
   b4266:	9301      	str	r3, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4268:	a801      	add	r0, sp, #4
   b426a:	f7ff ff1e 	bl	b40aa <_ZN5EERefaSEh.isra.0>
        EEPROM.write(startIndex + 8, pinky_low);
   b426e:	3408      	adds	r4, #8
   b4270:	f001 faba 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b4274:	7a29      	ldrb	r1, [r5, #8]
        : index( index )                 {}
   b4276:	9401      	str	r4, [sp, #4]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
   b4278:	a801      	add	r0, sp, #4
   b427a:	f7ff ff16 	bl	b40aa <_ZN5EERefaSEh.isra.0>
    }
   b427e:	b003      	add	sp, #12
   b4280:	bd30      	pop	{r4, r5, pc}

000b4282 <_ZN21MultiplexerCollection14loadFromEEPROMEi>:

    void loadFromEEPROM(int index) {
   b4282:	b538      	push	{r3, r4, r5, lr}
        int startIndex = index * 9;
   b4284:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
    void loadFromEEPROM(int index) {
   b4288:	4605      	mov	r5, r0
        thumb = EEPROM.read(startIndex + 0);
   b428a:	f001 faad 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
    operator uint8_t() const       { return **this; }
   b428e:	4620      	mov	r0, r4
   b4290:	f7ff ff0e 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b4294:	7028      	strb	r0, [r5, #0]
        pointer_high = EEPROM.read(startIndex + 1);
   b4296:	f001 faa7 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b429a:	1c60      	adds	r0, r4, #1
   b429c:	f7ff ff08 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42a0:	7068      	strb	r0, [r5, #1]
        pointer_low = EEPROM.read(startIndex + 2);
   b42a2:	f001 faa1 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b42a6:	1ca0      	adds	r0, r4, #2
   b42a8:	f7ff ff02 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42ac:	70a8      	strb	r0, [r5, #2]
        middle_high = EEPROM.read(startIndex + 3);
   b42ae:	f001 fa9b 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b42b2:	1ce0      	adds	r0, r4, #3
   b42b4:	f7ff fefc 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42b8:	70e8      	strb	r0, [r5, #3]
        middle_low = EEPROM.read(startIndex + 4);
   b42ba:	f001 fa95 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b42be:	1d20      	adds	r0, r4, #4
   b42c0:	f7ff fef6 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42c4:	7128      	strb	r0, [r5, #4]
        ring_high = EEPROM.read(startIndex + 5);
   b42c6:	f001 fa8f 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b42ca:	1d60      	adds	r0, r4, #5
   b42cc:	f7ff fef0 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42d0:	7168      	strb	r0, [r5, #5]
        ring_low = EEPROM.read(startIndex + 6);
   b42d2:	f001 fa89 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b42d6:	1da0      	adds	r0, r4, #6
   b42d8:	f7ff feea 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42dc:	71a8      	strb	r0, [r5, #6]
        pinky_high = EEPROM.read(startIndex + 7);
   b42de:	f001 fa83 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b42e2:	1de0      	adds	r0, r4, #7
   b42e4:	f7ff fee4 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42e8:	71e8      	strb	r0, [r5, #7]
        pinky_low = EEPROM.read(startIndex + 8);
   b42ea:	f001 fa7d 	bl	b57e8 <_Z21__fetch_global_EEPROMv>
   b42ee:	f104 0008 	add.w	r0, r4, #8
   b42f2:	f7ff fedd 	bl	b40b0 <_ZNK5EERefdeEv.isra.0>
   b42f6:	7228      	strb	r0, [r5, #8]
    }
   b42f8:	bd38      	pop	{r3, r4, r5, pc}

000b42fa <_Z11readCommandPhS_>:
    P_11101 = 0x1D,
    P_11110 = 0x1E,
    P_11111 = 0x1F,
};

void readCommand(byte *mainCmd, byte *data) {
   b42fa:	b538      	push	{r3, r4, r5, lr}
   b42fc:	460c      	mov	r4, r1
   b42fe:	4605      	mov	r5, r0
    if (Serial.available() > 0) {
   b4300:	f000 ffd8 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4304:	6803      	ldr	r3, [r0, #0]
   b4306:	691b      	ldr	r3, [r3, #16]
   b4308:	4798      	blx	r3
   b430a:	2800      	cmp	r0, #0
   b430c:	dd0a      	ble.n	b4324 <_Z11readCommandPhS_+0x2a>
        byte packet = Serial.read();
   b430e:	f000 ffd1 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4312:	6803      	ldr	r3, [r0, #0]
   b4314:	695b      	ldr	r3, [r3, #20]
   b4316:	4798      	blx	r3
        *mainCmd = (packet & 0xE0) >> 5;
   b4318:	f3c0 1342 	ubfx	r3, r0, #5, #3
        *data = (packet & 0x1F);
   b431c:	f000 001f 	and.w	r0, r0, #31
        *mainCmd = (packet & 0xE0) >> 5;
   b4320:	702b      	strb	r3, [r5, #0]
        *data = (packet & 0x1F);
   b4322:	7020      	strb	r0, [r4, #0]
    }
}
   b4324:	bd38      	pop	{r3, r4, r5, pc}

000b4326 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>:
                break;
            }
        }
    }

    int getBestCollection(MultiplexerCollection *comparedCol) {
   b4326:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        int bestVal = 256 * 9; // Impossible to get past this with the algorithm i use
   b432a:	f44f 6210 	mov.w	r2, #2304	; 0x900
   b432e:	6883      	ldr	r3, [r0, #8]
   b4330:	9201      	str	r2, [sp, #4]
        int bestColIndex = -1;

        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4332:	f04f 0a00 	mov.w	sl, #0
        int bestColIndex = -1;
   b4336:	f04f 30ff 	mov.w	r0, #4294967295
        return thumb != 0 &&
   b433a:	f893 9000 	ldrb.w	r9, [r3]
               pinky_high != 0 &&
   b433e:	f1b9 0f00 	cmp.w	r9, #0
   b4342:	d06b      	beq.n	b441c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               pointer_high != 0 &&
   b4344:	f893 8001 	ldrb.w	r8, [r3, #1]
        return thumb != 0 &&
   b4348:	f1b8 0f00 	cmp.w	r8, #0
   b434c:	d066      	beq.n	b441c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               pointer_low != 0 &&
   b434e:	f893 e002 	ldrb.w	lr, [r3, #2]
               pointer_high != 0 &&
   b4352:	f1be 0f00 	cmp.w	lr, #0
   b4356:	d061      	beq.n	b441c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               middle_high != 0 &&
   b4358:	f893 c003 	ldrb.w	ip, [r3, #3]
               pointer_low != 0 &&
   b435c:	f1bc 0f00 	cmp.w	ip, #0
   b4360:	d05c      	beq.n	b441c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               middle_low != 0 &&
   b4362:	791f      	ldrb	r7, [r3, #4]
               middle_high != 0 &&
   b4364:	2f00      	cmp	r7, #0
   b4366:	d059      	beq.n	b441c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               ring_high != 0 &&
   b4368:	795e      	ldrb	r6, [r3, #5]
               middle_low != 0 &&
   b436a:	2e00      	cmp	r6, #0
   b436c:	d056      	beq.n	b441c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               ring_low != 0 &&
   b436e:	799d      	ldrb	r5, [r3, #6]
               ring_high != 0 &&
   b4370:	2d00      	cmp	r5, #0
   b4372:	d053      	beq.n	b441c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               pinky_high != 0 &&
   b4374:	79dc      	ldrb	r4, [r3, #7]
               ring_low != 0 &&
   b4376:	2c00      	cmp	r4, #0
   b4378:	d050      	beq.n	b441c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
               pinky_low != 0;
   b437a:	7a1a      	ldrb	r2, [r3, #8]
               pinky_high != 0 &&
   b437c:	2a00      	cmp	r2, #0
   b437e:	d04d      	beq.n	b441c <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0xf6>
        val += abs(thumb - mulpC->thumb);
   b4380:	f891 b000 	ldrb.w	fp, [r1]
   b4384:	eba9 090b 	sub.w	r9, r9, fp
        val += abs(pointer_high - mulpC->pointer_high);
   b4388:	f891 b001 	ldrb.w	fp, [r1, #1]
        val += abs(thumb - mulpC->thumb);
   b438c:	f1b9 0f00 	cmp.w	r9, #0
        val += abs(pointer_high - mulpC->pointer_high);
   b4390:	eba8 080b 	sub.w	r8, r8, fp
        val += abs(thumb - mulpC->thumb);
   b4394:	bfb8      	it	lt
   b4396:	f1c9 0900 	rsblt	r9, r9, #0
        val += abs(pointer_high - mulpC->pointer_high);
   b439a:	f1b8 0f00 	cmp.w	r8, #0
   b439e:	bfb8      	it	lt
   b43a0:	f1c8 0800 	rsblt	r8, r8, #0
   b43a4:	44c1      	add	r9, r8
        val += abs(pointer_low - mulpC->pointer_low);
   b43a6:	f891 8002 	ldrb.w	r8, [r1, #2]
   b43aa:	ebae 0e08 	sub.w	lr, lr, r8
   b43ae:	f1be 0f00 	cmp.w	lr, #0
   b43b2:	bfb8      	it	lt
   b43b4:	f1ce 0e00 	rsblt	lr, lr, #0
   b43b8:	44ce      	add	lr, r9
        val += abs(middle_high - mulpC->middle_high);
   b43ba:	f891 9003 	ldrb.w	r9, [r1, #3]
   b43be:	ebac 0909 	sub.w	r9, ip, r9
        val += abs(middle_low - mulpC->middle_low);
   b43c2:	f891 c004 	ldrb.w	ip, [r1, #4]
   b43c6:	eba7 070c 	sub.w	r7, r7, ip
        val += abs(ring_high - mulpC->ring_high);
   b43ca:	f891 c005 	ldrb.w	ip, [r1, #5]
        val += abs(middle_high - mulpC->middle_high);
   b43ce:	f1b9 0f00 	cmp.w	r9, #0
        val += abs(ring_high - mulpC->ring_high);
   b43d2:	eba6 060c 	sub.w	r6, r6, ip
        val += abs(middle_high - mulpC->middle_high);
   b43d6:	bfb8      	it	lt
   b43d8:	f1c9 0900 	rsblt	r9, r9, #0
        val += abs(middle_low - mulpC->middle_low);
   b43dc:	2f00      	cmp	r7, #0
   b43de:	bfb8      	it	lt
   b43e0:	427f      	neglt	r7, r7
        val += abs(middle_high - mulpC->middle_high);
   b43e2:	44f1      	add	r9, lr
        val += abs(ring_high - mulpC->ring_high);
   b43e4:	2e00      	cmp	r6, #0
        val += abs(middle_low - mulpC->middle_low);
   b43e6:	444f      	add	r7, r9
        val += abs(ring_high - mulpC->ring_high);
   b43e8:	bfb8      	it	lt
   b43ea:	4276      	neglt	r6, r6
   b43ec:	443e      	add	r6, r7
        val += abs(ring_low - mulpC->ring_low);
   b43ee:	798f      	ldrb	r7, [r1, #6]
   b43f0:	1bed      	subs	r5, r5, r7
   b43f2:	2d00      	cmp	r5, #0
   b43f4:	bfb8      	it	lt
   b43f6:	426d      	neglt	r5, r5
   b43f8:	4435      	add	r5, r6
        val += abs(pinky_high - mulpC->pinky_high);
   b43fa:	79ce      	ldrb	r6, [r1, #7]
   b43fc:	1ba4      	subs	r4, r4, r6
   b43fe:	2c00      	cmp	r4, #0
   b4400:	bfb8      	it	lt
   b4402:	4264      	neglt	r4, r4
   b4404:	442c      	add	r4, r5
        val += abs(pinky_low - mulpC->pinky_low);
   b4406:	7a0d      	ldrb	r5, [r1, #8]
   b4408:	1b52      	subs	r2, r2, r5
   b440a:	2a00      	cmp	r2, #0
   b440c:	bfb8      	it	lt
   b440e:	4252      	neglt	r2, r2
   b4410:	4422      	add	r2, r4
            MultiplexerCollection *curSign = &allSigns[i];
            if (curSign->isSet()) {
                int curVal = curSign->compare(comparedCol);
                if (curVal < bestVal) {
   b4412:	9c01      	ldr	r4, [sp, #4]
   b4414:	42a2      	cmp	r2, r4
   b4416:	bfbc      	itt	lt
   b4418:	4650      	movlt	r0, sl
   b441a:	9201      	strlt	r2, [sp, #4]
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b441c:	f10a 0a01 	add.w	sl, sl, #1
   b4420:	f1ba 0f20 	cmp.w	sl, #32
   b4424:	f103 0309 	add.w	r3, r3, #9
   b4428:	d187      	bne.n	b433a <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x14>
                }
            }
        }

        return bestColIndex;
    }
   b442a:	b003      	add	sp, #12
   b442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4430 <_ZN17ProgramController13handleRequestEh>:
            allSigns[fingerPos].saveToEEPROM(fingerPos);
            Serial.printf("Programmed finger pos %x\n", fingerPos);
        }
    }

    void handleRequest(byte request) {
   b4430:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4432:	4605      	mov	r5, r0
   b4434:	b087      	sub	sp, #28
        Request req = (Request)request;

        switch (req) {
   b4436:	b119      	cbz	r1, b4440 <_ZN17ProgramController13handleRequestEh+0x10>
   b4438:	2901      	cmp	r1, #1
   b443a:	d011      	beq.n	b4460 <_ZN17ProgramController13handleRequestEh+0x30>
            Serial.printf("Wipe completed\n");
        } break;
        default:
            break;
        }
    }
   b443c:	b007      	add	sp, #28
   b443e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MultiplexerCollection mpc(&myMulp);
   b4440:	4601      	mov	r1, r0
   b4442:	a803      	add	r0, sp, #12
   b4444:	f7ff fe7a 	bl	b413c <_ZN21MultiplexerCollectionC1EP11Multiplexer>
        return getBestCollection(&mpc);
   b4448:	a903      	add	r1, sp, #12
   b444a:	4628      	mov	r0, r5
   b444c:	f7ff ff6b 	bl	b4326 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>
   b4450:	9001      	str	r0, [sp, #4]
            Serial.printf("Best collection is %d\n", bestCol);
   b4452:	f000 ff2f 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4456:	9a01      	ldr	r2, [sp, #4]
   b4458:	4920      	ldr	r1, [pc, #128]	; (b44dc <_ZN17ProgramController13handleRequestEh+0xac>)
   b445a:	f7ff fe2b 	bl	b40b4 <_ZN5Print6printfEPKcz>
        } break;
   b445e:	e7ed      	b.n	b443c <_ZN17ProgramController13handleRequestEh+0xc>
            Serial.printf("Beginning wipe\n");
   b4460:	f000 ff28 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4464:	491e      	ldr	r1, [pc, #120]	; (b44e0 <_ZN17ProgramController13handleRequestEh+0xb0>)
                Serial.printf("Wiped %d/%d\n", i + 1, HAND_POS_COUNT);
   b4466:	4f1f      	ldr	r7, [pc, #124]	; (b44e4 <_ZN17ProgramController13handleRequestEh+0xb4>)
            Serial.printf("Beginning wipe\n");
   b4468:	f7ff fe24 	bl	b40b4 <_ZN5Print6printfEPKcz>
            for (int i = 0; i < HAND_POS_COUNT; i++) {
   b446c:	2400      	movs	r4, #0
                Serial.printf("Wiped %d/%d\n", i + 1, HAND_POS_COUNT);
   b446e:	4626      	mov	r6, r4
   b4470:	3401      	adds	r4, #1
   b4472:	f000 ff1f 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4476:	2320      	movs	r3, #32
   b4478:	4622      	mov	r2, r4
   b447a:	4639      	mov	r1, r7
   b447c:	f7ff fe1a 	bl	b40b4 <_ZN5Print6printfEPKcz>
                allSigns[i].set(&empty);
   b4480:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   b4484:	68a9      	ldr	r1, [r5, #8]
        thumb = mulpC->thumb;
   b4486:	f89d 000c 	ldrb.w	r0, [sp, #12]
   b448a:	3a09      	subs	r2, #9
   b448c:	188b      	adds	r3, r1, r2
   b448e:	5488      	strb	r0, [r1, r2]
        pointer_high = mulpC->pointer_high;
   b4490:	f89d 100d 	ldrb.w	r1, [sp, #13]
   b4494:	7059      	strb	r1, [r3, #1]
        pointer_low = mulpC->pointer_low;
   b4496:	f89d 100e 	ldrb.w	r1, [sp, #14]
   b449a:	7099      	strb	r1, [r3, #2]
        middle_high = mulpC->middle_high;
   b449c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b44a0:	70d9      	strb	r1, [r3, #3]
        middle_low = mulpC->middle_low;
   b44a2:	f89d 1010 	ldrb.w	r1, [sp, #16]
   b44a6:	7119      	strb	r1, [r3, #4]
        ring_high = mulpC->ring_high;
   b44a8:	f89d 1011 	ldrb.w	r1, [sp, #17]
   b44ac:	7159      	strb	r1, [r3, #5]
        ring_low = mulpC->ring_low;
   b44ae:	f89d 1012 	ldrb.w	r1, [sp, #18]
   b44b2:	7199      	strb	r1, [r3, #6]
        pinky_high = mulpC->pinky_high;
   b44b4:	f89d 1013 	ldrb.w	r1, [sp, #19]
   b44b8:	71d9      	strb	r1, [r3, #7]
        pinky_low = mulpC->pinky_low;
   b44ba:	f89d 1014 	ldrb.w	r1, [sp, #20]
   b44be:	7219      	strb	r1, [r3, #8]
                allSigns[i].saveToEEPROM(i);
   b44c0:	68a8      	ldr	r0, [r5, #8]
   b44c2:	4631      	mov	r1, r6
   b44c4:	4410      	add	r0, r2
   b44c6:	f7ff fe8f 	bl	b41e8 <_ZN21MultiplexerCollection12saveToEEPROMEi>
            for (int i = 0; i < HAND_POS_COUNT; i++) {
   b44ca:	2c20      	cmp	r4, #32
   b44cc:	d1cf      	bne.n	b446e <_ZN17ProgramController13handleRequestEh+0x3e>
            Serial.printf("Wipe completed\n");
   b44ce:	f000 fef1 	bl	b52b4 <_Z16_fetch_usbserialv>
   b44d2:	4905      	ldr	r1, [pc, #20]	; (b44e8 <_ZN17ProgramController13handleRequestEh+0xb8>)
   b44d4:	f7ff fdee 	bl	b40b4 <_ZN5Print6printfEPKcz>
    }
   b44d8:	e7b0      	b.n	b443c <_ZN17ProgramController13handleRequestEh+0xc>
   b44da:	bf00      	nop
   b44dc:	000b5a5a 	.word	0x000b5a5a
   b44e0:	000b5a71 	.word	0x000b5a71
   b44e4:	000b5a81 	.word	0x000b5a81
   b44e8:	000b5a8e 	.word	0x000b5a8e

000b44ec <_ZN13SequenceSaver4pushE14FingerPosition>:

    ~SequenceSaver() {
        delete[] poses;
    }

    void push(FingerPosition pos) {
   b44ec:	b510      	push	{r4, lr}
        for (int i = length - 1; i > 0; i--) {
   b44ee:	6843      	ldr	r3, [r0, #4]
            poses[i] = poses[i - 1];
   b44f0:	6802      	ldr	r2, [r0, #0]
        for (int i = length - 1; i > 0; i--) {
   b44f2:	3b01      	subs	r3, #1
   b44f4:	2b00      	cmp	r3, #0
   b44f6:	dd04      	ble.n	b4502 <_ZN13SequenceSaver4pushE14FingerPosition+0x16>
            poses[i] = poses[i - 1];
   b44f8:	18d4      	adds	r4, r2, r3
   b44fa:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   b44fe:	54d4      	strb	r4, [r2, r3]
        for (int i = length - 1; i > 0; i--) {
   b4500:	e7f6      	b.n	b44f0 <_ZN13SequenceSaver4pushE14FingerPosition+0x4>
        }
        poses[0] = pos;
   b4502:	7011      	strb	r1, [r2, #0]
    }
   b4504:	bd10      	pop	{r4, pc}
	...

000b4508 <setup>:
MPU6050 myMPU;

SequenceSaver comparer(3);
SequenceSaver curData(3);

void setup() {
   b4508:	b538      	push	{r3, r4, r5, lr}
        pinMode(en, OUTPUT);
   b450a:	4c1f      	ldr	r4, [pc, #124]	; (b4588 <setup+0x80>)
   b450c:	2101      	movs	r1, #1
   b450e:	7820      	ldrb	r0, [r4, #0]
   b4510:	f001 f8ea 	bl	b56e8 <pinMode>
        pinMode(s0, OUTPUT);
   b4514:	7860      	ldrb	r0, [r4, #1]
   b4516:	2101      	movs	r1, #1
   b4518:	f001 f8e6 	bl	b56e8 <pinMode>
        pinMode(s1, OUTPUT);
   b451c:	78a0      	ldrb	r0, [r4, #2]
   b451e:	2101      	movs	r1, #1
   b4520:	f001 f8e2 	bl	b56e8 <pinMode>
        pinMode(s2, OUTPUT);
   b4524:	78e0      	ldrb	r0, [r4, #3]
   b4526:	2101      	movs	r1, #1
   b4528:	f001 f8de 	bl	b56e8 <pinMode>
        pinMode(s3, OUTPUT);
   b452c:	7920      	ldrb	r0, [r4, #4]
   b452e:	2101      	movs	r1, #1
   b4530:	f001 f8da 	bl	b56e8 <pinMode>
        pinMode(sig, INPUT);
   b4534:	7960      	ldrb	r0, [r4, #5]
   b4536:	2100      	movs	r1, #0
   b4538:	f001 f8d6 	bl	b56e8 <pinMode>
        set(index);
   b453c:	79a1      	ldrb	r1, [r4, #6]
   b453e:	4620      	mov	r0, r4
   b4540:	f7ff fdc6 	bl	b40d0 <_ZN11Multiplexer3setEh>
        digitalWrite(en, HIGH);
   b4544:	7820      	ldrb	r0, [r4, #0]
   b4546:	2101      	movs	r1, #1
   b4548:	f001 f8df 	bl	b570a <digitalWrite>
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b454c:	2500      	movs	r5, #0
            allSigns[i].loadFromEEPROM(i);
   b454e:	68a0      	ldr	r0, [r4, #8]
   b4550:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   b4554:	4629      	mov	r1, r5
   b4556:	4418      	add	r0, r3
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4558:	3501      	adds	r5, #1
            allSigns[i].loadFromEEPROM(i);
   b455a:	f7ff fe92 	bl	b4282 <_ZN21MultiplexerCollection14loadFromEEPROMEi>
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b455e:	2d20      	cmp	r5, #32
   b4560:	d1f5      	bne.n	b454e <setup+0x46>
        isProgrammerEnabled = true;
   b4562:	2301      	movs	r3, #1
    programmer.begin();
    programmer.enableProgrammer(); // Enables programming the controller via byte commands if needed
    myMPU.begin();
   b4564:	4809      	ldr	r0, [pc, #36]	; (b458c <setup+0x84>)
   b4566:	7323      	strb	r3, [r4, #12]
   b4568:	f000 f9ca 	bl	b4900 <_ZN7MPU60505beginEv>
    comparer.push(P_10011);
   b456c:	4808      	ldr	r0, [pc, #32]	; (b4590 <setup+0x88>)
   b456e:	2113      	movs	r1, #19
   b4570:	f7ff ffbc 	bl	b44ec <_ZN13SequenceSaver4pushE14FingerPosition>
    comparer.push(P_00010);
   b4574:	4806      	ldr	r0, [pc, #24]	; (b4590 <setup+0x88>)
   b4576:	2102      	movs	r1, #2
   b4578:	f7ff ffb8 	bl	b44ec <_ZN13SequenceSaver4pushE14FingerPosition>
    comparer.push(P_00110);
   b457c:	4804      	ldr	r0, [pc, #16]	; (b4590 <setup+0x88>)
   b457e:	2106      	movs	r1, #6
   b4580:	f7ff ffb4 	bl	b44ec <_ZN13SequenceSaver4pushE14FingerPosition>
}
   b4584:	bd38      	pop	{r3, r4, r5, pc}
   b4586:	bf00      	nop
   b4588:	2003e6a0 	.word	0x2003e6a0
   b458c:	2003e68c 	.word	0x2003e68c
   b4590:	2003e67c 	.word	0x2003e67c

000b4594 <_Z9timer10MSv>:
            lastChangeTime = curTime;
        }
    }
}

bool timer10MS() {
   b4594:	b538      	push	{r3, r4, r5, lr}
    static int lastTime = millis();
   b4596:	4d0e      	ldr	r5, [pc, #56]	; (b45d0 <_Z9timer10MSv+0x3c>)
   b4598:	4c0e      	ldr	r4, [pc, #56]	; (b45d4 <_Z9timer10MSv+0x40>)
   b459a:	782b      	ldrb	r3, [r5, #0]
   b459c:	f3bf 8f5b 	dmb	ish
   b45a0:	f013 0f01 	tst.w	r3, #1
   b45a4:	d109      	bne.n	b45ba <_Z9timer10MSv+0x26>
   b45a6:	4628      	mov	r0, r5
   b45a8:	f7ff fd77 	bl	b409a <__cxa_guard_acquire>
   b45ac:	b128      	cbz	r0, b45ba <_Z9timer10MSv+0x26>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b45ae:	f000 fa59 	bl	b4a64 <HAL_Timer_Get_Milli_Seconds>
   b45b2:	6020      	str	r0, [r4, #0]
   b45b4:	4628      	mov	r0, r5
   b45b6:	f7ff fd75 	bl	b40a4 <__cxa_guard_release>
   b45ba:	f000 fa53 	bl	b4a64 <HAL_Timer_Get_Milli_Seconds>
    int curTime = millis();

    if (curTime - lastTime > 10) {
   b45be:	6823      	ldr	r3, [r4, #0]
   b45c0:	1ac3      	subs	r3, r0, r3
   b45c2:	2b0a      	cmp	r3, #10
        lastTime = curTime;
   b45c4:	bfca      	itet	gt
   b45c6:	6020      	strgt	r0, [r4, #0]
        return true;
    }
    return false;
   b45c8:	2000      	movle	r0, #0
        return true;
   b45ca:	2001      	movgt	r0, #1
   b45cc:	bd38      	pop	{r3, r4, r5, pc}
   b45ce:	bf00      	nop
   b45d0:	2003e66c 	.word	0x2003e66c
   b45d4:	2003e678 	.word	0x2003e678

000b45d8 <loop>:
void loop() {
   b45d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (isProgrammerEnabled && Serial.available() > 0) {
   b45dc:	4c61      	ldr	r4, [pc, #388]	; (b4764 <loop+0x18c>)
   b45de:	7b23      	ldrb	r3, [r4, #12]
   b45e0:	b085      	sub	sp, #20
   b45e2:	2b00      	cmp	r3, #0
   b45e4:	d04a      	beq.n	b467c <loop+0xa4>
   b45e6:	f000 fe65 	bl	b52b4 <_Z16_fetch_usbserialv>
   b45ea:	6803      	ldr	r3, [r0, #0]
   b45ec:	691b      	ldr	r3, [r3, #16]
   b45ee:	4798      	blx	r3
   b45f0:	2800      	cmp	r0, #0
   b45f2:	dd43      	ble.n	b467c <loop+0xa4>
            readCommand(&cmd, &data);
   b45f4:	f10d 0103 	add.w	r1, sp, #3
   b45f8:	f10d 0002 	add.w	r0, sp, #2
   b45fc:	f7ff fe7d 	bl	b42fa <_Z11readCommandPhS_>
            switch (cmd) {
   b4600:	f89d 3002 	ldrb.w	r3, [sp, #2]
   b4604:	b143      	cbz	r3, b4618 <loop+0x40>
   b4606:	2b01      	cmp	r3, #1
   b4608:	f000 80a6 	beq.w	b4758 <loop+0x180>
                Serial.printf("Unknown command\n");
   b460c:	f000 fe52 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4610:	4955      	ldr	r1, [pc, #340]	; (b4768 <loop+0x190>)
   b4612:	f7ff fd4f 	bl	b40b4 <_ZN5Print6printfEPKcz>
    }
   b4616:	e031      	b.n	b467c <loop+0xa4>
                programFingerPosition(data);
   b4618:	f89d 5003 	ldrb.w	r5, [sp, #3]
        if (fingerPos < HAND_POS_COUNT) {
   b461c:	2d1f      	cmp	r5, #31
   b461e:	d82d      	bhi.n	b467c <loop+0xa4>
            MultiplexerCollection mpc(&myMulp);
   b4620:	4621      	mov	r1, r4
   b4622:	a801      	add	r0, sp, #4
   b4624:	f7ff fd8a 	bl	b413c <_ZN21MultiplexerCollectionC1EP11Multiplexer>
            allSigns[fingerPos].set(&mpc);
   b4628:	68a1      	ldr	r1, [r4, #8]
        thumb = mulpC->thumb;
   b462a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b462e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   b4632:	188b      	adds	r3, r1, r2
   b4634:	5488      	strb	r0, [r1, r2]
        pointer_high = mulpC->pointer_high;
   b4636:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b463a:	7059      	strb	r1, [r3, #1]
        pointer_low = mulpC->pointer_low;
   b463c:	f89d 1006 	ldrb.w	r1, [sp, #6]
   b4640:	7099      	strb	r1, [r3, #2]
        middle_high = mulpC->middle_high;
   b4642:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4646:	70d9      	strb	r1, [r3, #3]
        middle_low = mulpC->middle_low;
   b4648:	f89d 1008 	ldrb.w	r1, [sp, #8]
   b464c:	7119      	strb	r1, [r3, #4]
        ring_high = mulpC->ring_high;
   b464e:	f89d 1009 	ldrb.w	r1, [sp, #9]
   b4652:	7159      	strb	r1, [r3, #5]
        ring_low = mulpC->ring_low;
   b4654:	f89d 100a 	ldrb.w	r1, [sp, #10]
   b4658:	7199      	strb	r1, [r3, #6]
        pinky_high = mulpC->pinky_high;
   b465a:	f89d 100b 	ldrb.w	r1, [sp, #11]
   b465e:	71d9      	strb	r1, [r3, #7]
        pinky_low = mulpC->pinky_low;
   b4660:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b4664:	7219      	strb	r1, [r3, #8]
            allSigns[fingerPos].saveToEEPROM(fingerPos);
   b4666:	68a0      	ldr	r0, [r4, #8]
   b4668:	4629      	mov	r1, r5
   b466a:	4410      	add	r0, r2
   b466c:	f7ff fdbc 	bl	b41e8 <_ZN21MultiplexerCollection12saveToEEPROMEi>
            Serial.printf("Programmed finger pos %x\n", fingerPos);
   b4670:	f000 fe20 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4674:	493d      	ldr	r1, [pc, #244]	; (b476c <loop+0x194>)
   b4676:	462a      	mov	r2, r5
   b4678:	f7ff fd1c 	bl	b40b4 <_ZN5Print6printfEPKcz>
    if (timer10MS()) {
   b467c:	f7ff ff8a 	bl	b4594 <_Z9timer10MSv>
   b4680:	2800      	cmp	r0, #0
   b4682:	d066      	beq.n	b4752 <loop+0x17a>
        static int lastChangeTime = millis();
   b4684:	4c3a      	ldr	r4, [pc, #232]	; (b4770 <loop+0x198>)
   b4686:	7823      	ldrb	r3, [r4, #0]
   b4688:	f3bf 8f5b 	dmb	ish
   b468c:	07db      	lsls	r3, r3, #31
   b468e:	d40a      	bmi.n	b46a6 <loop+0xce>
   b4690:	4620      	mov	r0, r4
   b4692:	f7ff fd02 	bl	b409a <__cxa_guard_acquire>
   b4696:	b130      	cbz	r0, b46a6 <loop+0xce>
   b4698:	f000 f9e4 	bl	b4a64 <HAL_Timer_Get_Milli_Seconds>
   b469c:	4b35      	ldr	r3, [pc, #212]	; (b4774 <loop+0x19c>)
   b469e:	6018      	str	r0, [r3, #0]
   b46a0:	4620      	mov	r0, r4
   b46a2:	f7ff fcff 	bl	b40a4 <__cxa_guard_release>
        MultiplexerCollection mpc(&myMulp);
   b46a6:	492f      	ldr	r1, [pc, #188]	; (b4764 <loop+0x18c>)
        if (lastPos != curPos) {
   b46a8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; b4788 <loop+0x1b0>
   b46ac:	a801      	add	r0, sp, #4
   b46ae:	f7ff fd45 	bl	b413c <_ZN21MultiplexerCollectionC1EP11Multiplexer>
        return getBestCollection(&mpc);
   b46b2:	a901      	add	r1, sp, #4
   b46b4:	482b      	ldr	r0, [pc, #172]	; (b4764 <loop+0x18c>)
   b46b6:	f7ff fe36 	bl	b4326 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>
        FingerPosition curPos = (FingerPosition)programmer.getBestCollection();
   b46ba:	b2c4      	uxtb	r4, r0
   b46bc:	4606      	mov	r6, r0
   b46be:	f000 f9d1 	bl	b4a64 <HAL_Timer_Get_Milli_Seconds>
        if (lastPos != curPos) {
   b46c2:	f898 3000 	ldrb.w	r3, [r8]
   b46c6:	42a3      	cmp	r3, r4
   b46c8:	4605      	mov	r5, r0
   b46ca:	d042      	beq.n	b4752 <loop+0x17a>
            if (curTime - lastChangeTime > 600 && lastAdded != curPos) {
   b46cc:	4f29      	ldr	r7, [pc, #164]	; (b4774 <loop+0x19c>)
   b46ce:	683b      	ldr	r3, [r7, #0]
   b46d0:	1ac3      	subs	r3, r0, r3
   b46d2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b46d6:	dd39      	ble.n	b474c <loop+0x174>
   b46d8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; b478c <loop+0x1b4>
   b46dc:	f899 3000 	ldrb.w	r3, [r9]
   b46e0:	42a3      	cmp	r3, r4
   b46e2:	d033      	beq.n	b474c <loop+0x174>
                curData.push(curPos);
   b46e4:	4621      	mov	r1, r4
   b46e6:	4824      	ldr	r0, [pc, #144]	; (b4778 <loop+0x1a0>)
   b46e8:	f7ff ff00 	bl	b44ec <_ZN13SequenceSaver4pushE14FingerPosition>
                lastAdded = curPos;
   b46ec:	f889 4000 	strb.w	r4, [r9]
                Serial.printf("Added ");
   b46f0:	f000 fde0 	bl	b52b4 <_Z16_fetch_usbserialv>
   b46f4:	4921      	ldr	r1, [pc, #132]	; (b477c <loop+0x1a4>)
   b46f6:	f7ff fcdd 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x10) >> 4);
   b46fa:	f000 fddb 	bl	b52b4 <_Z16_fetch_usbserialv>
   b46fe:	4920      	ldr	r1, [pc, #128]	; (b4780 <loop+0x1a8>)
   b4700:	f3c4 1200 	ubfx	r2, r4, #4, #1
   b4704:	f7ff fcd6 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x08) >> 3);
   b4708:	f000 fdd4 	bl	b52b4 <_Z16_fetch_usbserialv>
   b470c:	491c      	ldr	r1, [pc, #112]	; (b4780 <loop+0x1a8>)
   b470e:	f3c4 02c0 	ubfx	r2, r4, #3, #1
   b4712:	f7ff fccf 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x04) >> 2);
   b4716:	f000 fdcd 	bl	b52b4 <_Z16_fetch_usbserialv>
   b471a:	4919      	ldr	r1, [pc, #100]	; (b4780 <loop+0x1a8>)
   b471c:	f3c4 0280 	ubfx	r2, r4, #2, #1
   b4720:	f7ff fcc8 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x02) >> 1);
   b4724:	f000 fdc6 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4728:	4915      	ldr	r1, [pc, #84]	; (b4780 <loop+0x1a8>)
   b472a:	f3c4 0240 	ubfx	r2, r4, #1, #1
   b472e:	f7ff fcc1 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf("%d", (curPos & 0x01));
   b4732:	f000 fdbf 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4736:	4912      	ldr	r1, [pc, #72]	; (b4780 <loop+0x1a8>)
   b4738:	f006 0201 	and.w	r2, r6, #1
   b473c:	f7ff fcba 	bl	b40b4 <_ZN5Print6printfEPKcz>
                Serial.printf(" to curData\n", curPos);
   b4740:	f000 fdb8 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4744:	490f      	ldr	r1, [pc, #60]	; (b4784 <loop+0x1ac>)
   b4746:	4622      	mov	r2, r4
   b4748:	f7ff fcb4 	bl	b40b4 <_ZN5Print6printfEPKcz>
            lastPos = curPos;
   b474c:	f888 4000 	strb.w	r4, [r8]
            lastChangeTime = curTime;
   b4750:	603d      	str	r5, [r7, #0]
}
   b4752:	b005      	add	sp, #20
   b4754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                handleRequest(data);
   b4758:	f89d 1003 	ldrb.w	r1, [sp, #3]
   b475c:	4620      	mov	r0, r4
   b475e:	f7ff fe67 	bl	b4430 <_ZN17ProgramController13handleRequestEh>
                break;
   b4762:	e78b      	b.n	b467c <loop+0xa4>
   b4764:	2003e6a0 	.word	0x2003e6a0
   b4768:	000b5ab8 	.word	0x000b5ab8
   b476c:	000b5a9e 	.word	0x000b5a9e
   b4770:	2003e668 	.word	0x2003e668
   b4774:	2003e670 	.word	0x2003e670
   b4778:	2003e684 	.word	0x2003e684
   b477c:	000b5ac9 	.word	0x000b5ac9
   b4780:	000b5ad0 	.word	0x000b5ad0
   b4784:	000b5ad3 	.word	0x000b5ad3
   b4788:	2003e674 	.word	0x2003e674
   b478c:	2003e675 	.word	0x2003e675

000b4790 <_GLOBAL__sub_I_SystemMode>:
   b4790:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4792:	4b13      	ldr	r3, [pc, #76]	; (b47e0 <_GLOBAL__sub_I_SystemMode+0x50>)
    SleepResult() {}
   b4794:	4a13      	ldr	r2, [pc, #76]	; (b47e4 <_GLOBAL__sub_I_SystemMode+0x54>)
   b4796:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4798:	2500      	movs	r5, #0
   b479a:	e9c3 5500 	strd	r5, r5, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b479e:	2002      	movs	r0, #2
   b47a0:	f000 fa68 	bl	b4c74 <set_system_mode>
    ProgramController(int P_MULP_ENABLE, int P_MULP_S0, int P_MULP_S1, int P_MULP_S2, int P_MULP_S3, int P_MULP_SIGNAL) : myMulp(P_MULP_ENABLE, P_MULP_S0, P_MULP_S1, P_MULP_S2, P_MULP_S3, P_MULP_SIGNAL) {
   b47a4:	4c10      	ldr	r4, [pc, #64]	; (b47e8 <_GLOBAL__sub_I_SystemMode+0x58>)
   b47a6:	4a11      	ldr	r2, [pc, #68]	; (b47ec <_GLOBAL__sub_I_SystemMode+0x5c>)
   b47a8:	7325      	strb	r5, [r4, #12]
   b47aa:	f241 3305 	movw	r3, #4869	; 0x1305
   b47ae:	e9c4 2300 	strd	r2, r3, [r4]
        allSigns = new MultiplexerCollection[HAND_POS_COUNT];
   b47b2:	f44f 7090 	mov.w	r0, #288	; 0x120
   b47b6:	f7ff fc6c 	bl	b4092 <_Znaj>
        this->length = length;
   b47ba:	4d0d      	ldr	r5, [pc, #52]	; (b47f0 <_GLOBAL__sub_I_SystemMode+0x60>)
   b47bc:	60a0      	str	r0, [r4, #8]

    void loadPowerManagement1Config();
    void savePowerManagement1Config();

public:
    MPU6050() : MPU6050(MPU6050_ADDRESS_GROUND) {}
   b47be:	2168      	movs	r1, #104	; 0x68
   b47c0:	2403      	movs	r4, #3
   b47c2:	480c      	ldr	r0, [pc, #48]	; (b47f4 <_GLOBAL__sub_I_SystemMode+0x64>)
   b47c4:	f000 f899 	bl	b48fa <_ZN7MPU6050C1Eh>
   b47c8:	606c      	str	r4, [r5, #4]
        poses = new FingerPosition[length];
   b47ca:	4620      	mov	r0, r4
   b47cc:	f7ff fc61 	bl	b4092 <_Znaj>
   b47d0:	6028      	str	r0, [r5, #0]
        this->length = length;
   b47d2:	4d09      	ldr	r5, [pc, #36]	; (b47f8 <_GLOBAL__sub_I_SystemMode+0x68>)
        poses = new FingerPosition[length];
   b47d4:	4620      	mov	r0, r4
        this->length = length;
   b47d6:	606c      	str	r4, [r5, #4]
        poses = new FingerPosition[length];
   b47d8:	f7ff fc5b 	bl	b4092 <_Znaj>
   b47dc:	6028      	str	r0, [r5, #0]
   b47de:	bd38      	pop	{r3, r4, r5, pc}
   b47e0:	2003e65c 	.word	0x2003e65c
   b47e4:	ffff0000 	.word	0xffff0000
   b47e8:	2003e6a0 	.word	0x2003e6a0
   b47ec:	04030206 	.word	0x04030206
   b47f0:	2003e67c 	.word	0x2003e67c
   b47f4:	2003e68c 	.word	0x2003e68c
   b47f8:	2003e684 	.word	0x2003e684

000b47fc <_ZN7MPU605019loadGyroscopeConfigEv>:
    loadAccelerometerConfig();
    loadPowerManagement1Config();
    loadInterruptEnableConfig();
}

void MPU6050::loadGyroscopeConfig() {
   b47fc:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, GYRO_CONFIG);
   b47fe:	221b      	movs	r2, #27
void MPU6050::loadGyroscopeConfig() {
   b4800:	4604      	mov	r4, r0
    WireReader reader(_address, GYRO_CONFIG);
   b4802:	7801      	ldrb	r1, [r0, #0]
   b4804:	2301      	movs	r3, #1
   b4806:	a801      	add	r0, sp, #4
   b4808:	f000 f8c4 	bl	b4994 <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b480c:	a801      	add	r0, sp, #4
   b480e:	f000 f8e0 	bl	b49d2 <_ZN10WireReader4readEv>

    XG_ST = (cfg & 0b10000000) >> 7;
   b4812:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   b4816:	70a3      	strb	r3, [r4, #2]
    YG_ST = (cfg & 0b01000000) >> 6;
   b4818:	f3c0 1380 	ubfx	r3, r0, #6, #1
   b481c:	70e3      	strb	r3, [r4, #3]
    ZG_ST = (cfg & 0b00100000) >> 5;
   b481e:	f3c0 1340 	ubfx	r3, r0, #5, #1
   b4822:	7123      	strb	r3, [r4, #4]
    FS_SEL = (cfg & 0b00011000) >> 3;
   b4824:	f3c0 03c1 	ubfx	r3, r0, #3, #2
   b4828:	7163      	strb	r3, [r4, #5]
    WireReader reader(_address, GYRO_CONFIG);
   b482a:	a801      	add	r0, sp, #4
   b482c:	f000 f89e 	bl	b496c <_ZN10WireReaderD1Ev>
}
   b4830:	b002      	add	sp, #8
   b4832:	bd10      	pop	{r4, pc}

000b4834 <_ZN7MPU605023loadAccelerometerConfigEv>:
               (FS_SEL << 3);
    WireWriter writer(_address, GYRO_CONFIG);
    writer.write(cfg);
}

void MPU6050::loadAccelerometerConfig() {
   b4834:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, ACCEL_CONFIG);
   b4836:	221c      	movs	r2, #28
void MPU6050::loadAccelerometerConfig() {
   b4838:	4604      	mov	r4, r0
    WireReader reader(_address, ACCEL_CONFIG);
   b483a:	7801      	ldrb	r1, [r0, #0]
   b483c:	2301      	movs	r3, #1
   b483e:	a801      	add	r0, sp, #4
   b4840:	f000 f8a8 	bl	b4994 <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b4844:	a801      	add	r0, sp, #4
   b4846:	f000 f8c4 	bl	b49d2 <_ZN10WireReader4readEv>

    XA_ST = (cfg & 0b10000000) >> 7;
   b484a:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   b484e:	71a3      	strb	r3, [r4, #6]
    YA_ST = (cfg & 0b01000000) >> 6;
   b4850:	f3c0 1380 	ubfx	r3, r0, #6, #1
   b4854:	71e3      	strb	r3, [r4, #7]
    ZA_ST = (cfg & 0b00100000) >> 5;
   b4856:	f3c0 1340 	ubfx	r3, r0, #5, #1
   b485a:	7223      	strb	r3, [r4, #8]
    AFS_SEL = (cfg & 0b00011000) >> 3;
   b485c:	f3c0 03c1 	ubfx	r3, r0, #3, #2
   b4860:	7263      	strb	r3, [r4, #9]
    WireReader reader(_address, ACCEL_CONFIG);
   b4862:	a801      	add	r0, sp, #4
   b4864:	f000 f882 	bl	b496c <_ZN10WireReaderD1Ev>
}
   b4868:	b002      	add	sp, #8
   b486a:	bd10      	pop	{r4, pc}

000b486c <_ZN7MPU605025loadInterruptEnableConfigEv>:
               (AFS_SEL << 3);
    WireWriter writer(_address, ACCEL_CONFIG);
    writer.write(cfg);
}

void MPU6050::loadInterruptEnableConfig() {
   b486c:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, INT_ENABLE);
   b486e:	2238      	movs	r2, #56	; 0x38
   b4870:	7801      	ldrb	r1, [r0, #0]
void MPU6050::loadInterruptEnableConfig() {
   b4872:	4604      	mov	r4, r0
    WireReader reader(_address, INT_ENABLE);
   b4874:	2301      	movs	r3, #1
   b4876:	a801      	add	r0, sp, #4
   b4878:	f000 f88c 	bl	b4994 <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b487c:	a801      	add	r0, sp, #4
   b487e:	f000 f8a8 	bl	b49d2 <_ZN10WireReader4readEv>
    FIFO_OFLOW_EN = (cfg & 0b00010000) >> 4;
   b4882:	f3c0 1300 	ubfx	r3, r0, #4, #1
   b4886:	72a3      	strb	r3, [r4, #10]
    I2C_MST_INT_EN = (cfg & 0b00001000) >> 3;
   b4888:	f3c0 03c0 	ubfx	r3, r0, #3, #1
   b488c:	72e3      	strb	r3, [r4, #11]
    DATA_RDY_EN = (cfg & 0b00000001);
   b488e:	f000 0301 	and.w	r3, r0, #1
   b4892:	7323      	strb	r3, [r4, #12]
    WireReader reader(_address, INT_ENABLE);
   b4894:	a801      	add	r0, sp, #4
   b4896:	f000 f869 	bl	b496c <_ZN10WireReaderD1Ev>
}
   b489a:	b002      	add	sp, #8
   b489c:	bd10      	pop	{r4, pc}

000b489e <_ZN7MPU605026loadPowerManagement1ConfigEv>:
               (DATA_RDY_EN);
    WireWriter writer(_address, INT_ENABLE);
    writer.write(cfg);
}

void MPU6050::loadPowerManagement1Config() {
   b489e:	b513      	push	{r0, r1, r4, lr}
    WireReader reader(_address, PWR_MGMT_1);
   b48a0:	226b      	movs	r2, #107	; 0x6b
void MPU6050::loadPowerManagement1Config() {
   b48a2:	4604      	mov	r4, r0
    WireReader reader(_address, PWR_MGMT_1);
   b48a4:	7801      	ldrb	r1, [r0, #0]
   b48a6:	2301      	movs	r3, #1
   b48a8:	a801      	add	r0, sp, #4
   b48aa:	f000 f873 	bl	b4994 <_ZN10WireReaderC1Ehhh>
    byte cfg = reader.read();
   b48ae:	a801      	add	r0, sp, #4
   b48b0:	f000 f88f 	bl	b49d2 <_ZN10WireReader4readEv>

    DEVICE_RESET = (cfg & 0b10000000) >> 7;
   b48b4:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   b48b8:	7363      	strb	r3, [r4, #13]
    SLEEP = (cfg & 0b01000000) >> 6;
   b48ba:	f3c0 1380 	ubfx	r3, r0, #6, #1
   b48be:	73a3      	strb	r3, [r4, #14]
    CYCLE = (cfg & 0b00100000) >> 5;
   b48c0:	f3c0 1340 	ubfx	r3, r0, #5, #1
   b48c4:	73e3      	strb	r3, [r4, #15]
    TEMP_DIS = (cfg & 0b00001000) >> 3;
   b48c6:	f3c0 03c0 	ubfx	r3, r0, #3, #1
   b48ca:	7423      	strb	r3, [r4, #16]
    CLKSEL = (cfg & 0b00000111);
   b48cc:	f000 0307 	and.w	r3, r0, #7
   b48d0:	7463      	strb	r3, [r4, #17]
    WireReader reader(_address, PWR_MGMT_1);
   b48d2:	a801      	add	r0, sp, #4
   b48d4:	f000 f84a 	bl	b496c <_ZN10WireReaderD1Ev>
}
   b48d8:	b002      	add	sp, #8
   b48da:	bd10      	pop	{r4, pc}

000b48dc <_ZN7MPU605013loadAllConfigEv>:
void MPU6050::loadAllConfig() {
   b48dc:	b510      	push	{r4, lr}
   b48de:	4604      	mov	r4, r0
    loadGyroscopeConfig();
   b48e0:	f7ff ff8c 	bl	b47fc <_ZN7MPU605019loadGyroscopeConfigEv>
    loadAccelerometerConfig();
   b48e4:	4620      	mov	r0, r4
   b48e6:	f7ff ffa5 	bl	b4834 <_ZN7MPU605023loadAccelerometerConfigEv>
    loadPowerManagement1Config();
   b48ea:	4620      	mov	r0, r4
   b48ec:	f7ff ffd7 	bl	b489e <_ZN7MPU605026loadPowerManagement1ConfigEv>
    loadInterruptEnableConfig();
   b48f0:	4620      	mov	r0, r4
}
   b48f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    loadInterruptEnableConfig();
   b48f6:	f7ff bfb9 	b.w	b486c <_ZN7MPU605025loadInterruptEnableConfigEv>

000b48fa <_ZN7MPU6050C1Eh>:
}

// Public Functions

MPU6050::MPU6050(byte address) {
    _address = address;
   b48fa:	7001      	strb	r1, [r0, #0]
}
   b48fc:	4770      	bx	lr
	...

000b4900 <_ZN7MPU60505beginEv>:

void MPU6050::begin() {
   b4900:	b513      	push	{r0, r1, r4, lr}
   b4902:	4604      	mov	r4, r0
    if (!Wire.isEnabled()) {
   b4904:	f000 ff9e 	bl	b5844 <_Z19__fetch_global_Wirev>
   b4908:	f000 fdc1 	bl	b548e <_ZN7TwoWire9isEnabledEv>
   b490c:	b940      	cbnz	r0, b4920 <_ZN7MPU60505beginEv+0x20>
        Serial.printf("MPU6050 > Enabling Wire\n");
   b490e:	f000 fcd1 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4912:	490c      	ldr	r1, [pc, #48]	; (b4944 <_ZN7MPU60505beginEv+0x44>)
   b4914:	f7ff fbce 	bl	b40b4 <_ZN5Print6printfEPKcz>
        Wire.begin();
   b4918:	f000 ff94 	bl	b5844 <_Z19__fetch_global_Wirev>
   b491c:	f000 fd80 	bl	b5420 <_ZN7TwoWire5beginEv>
    }

    loadAllConfig();
   b4920:	4620      	mov	r0, r4
   b4922:	f7ff ffdb 	bl	b48dc <_ZN7MPU605013loadAllConfigEv>

    {
        WireWriter writer(_address, PWR_MGMT_1);
   b4926:	226b      	movs	r2, #107	; 0x6b
   b4928:	7821      	ldrb	r1, [r4, #0]
   b492a:	a801      	add	r0, sp, #4
   b492c:	f000 f80c 	bl	b4948 <_ZN10WireWriterC1Ehh>
        writer.write(0x00);
   b4930:	2100      	movs	r1, #0
   b4932:	a801      	add	r0, sp, #4
   b4934:	f000 f823 	bl	b497e <_ZN10WireWriter5writeEh>
        WireWriter writer(_address, PWR_MGMT_1);
   b4938:	a801      	add	r0, sp, #4
   b493a:	f000 f817 	bl	b496c <_ZN10WireReaderD1Ev>
    }
}
   b493e:	b002      	add	sp, #8
   b4940:	bd10      	pop	{r4, pc}
   b4942:	bf00      	nop
   b4944:	000b5ae0 	.word	0x000b5ae0

000b4948 <_ZN10WireWriterC1Ehh>:
#include "I2CHelper.h"

// ------------- Wire Writer --------------

WireWriter::WireWriter(byte address, byte reg) {
   b4948:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b494a:	4615      	mov	r5, r2
   b494c:	4604      	mov	r4, r0
   b494e:	9101      	str	r1, [sp, #4]
    Wire.beginTransmission(address);
   b4950:	f000 ff78 	bl	b5844 <_Z19__fetch_global_Wirev>
   b4954:	9901      	ldr	r1, [sp, #4]
   b4956:	f000 fd92 	bl	b547e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(reg);
   b495a:	f000 ff73 	bl	b5844 <_Z19__fetch_global_Wirev>
   b495e:	6803      	ldr	r3, [r0, #0]
   b4960:	4629      	mov	r1, r5
   b4962:	689b      	ldr	r3, [r3, #8]
   b4964:	4798      	blx	r3
}
   b4966:	4620      	mov	r0, r4
   b4968:	b003      	add	sp, #12
   b496a:	bd30      	pop	{r4, r5, pc}

000b496c <_ZN10WireReaderD1Ev>:

WireWriter::~WireWriter() {
   b496c:	b510      	push	{r4, lr}
   b496e:	4604      	mov	r4, r0
    Wire.endTransmission(true);
   b4970:	f000 ff68 	bl	b5844 <_Z19__fetch_global_Wirev>
   b4974:	2101      	movs	r1, #1
   b4976:	f000 fd86 	bl	b5486 <_ZN7TwoWire15endTransmissionEh>
}
   b497a:	4620      	mov	r0, r4
   b497c:	bd10      	pop	{r4, pc}

000b497e <_ZN10WireWriter5writeEh>:

void WireWriter::write(byte data) {
   b497e:	b507      	push	{r0, r1, r2, lr}
   b4980:	9101      	str	r1, [sp, #4]
    Wire.write(data);
   b4982:	f000 ff5f 	bl	b5844 <_Z19__fetch_global_Wirev>
   b4986:	6803      	ldr	r3, [r0, #0]
   b4988:	9901      	ldr	r1, [sp, #4]
   b498a:	689b      	ldr	r3, [r3, #8]
}
   b498c:	b003      	add	sp, #12
   b498e:	f85d eb04 	ldr.w	lr, [sp], #4
    Wire.write(data);
   b4992:	4718      	bx	r3

000b4994 <_ZN10WireReaderC1Ehhh>:

// ------------- Wire Reader --------------

WireReader::WireReader(byte address, byte reg, byte count) {
   b4994:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4996:	460c      	mov	r4, r1
   b4998:	4616      	mov	r6, r2
   b499a:	9301      	str	r3, [sp, #4]
   b499c:	4605      	mov	r5, r0
    Wire.beginTransmission(address);
   b499e:	f000 ff51 	bl	b5844 <_Z19__fetch_global_Wirev>
   b49a2:	4621      	mov	r1, r4
   b49a4:	f000 fd6b 	bl	b547e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(reg);
   b49a8:	f000 ff4c 	bl	b5844 <_Z19__fetch_global_Wirev>
   b49ac:	6803      	ldr	r3, [r0, #0]
   b49ae:	4631      	mov	r1, r6
   b49b0:	689b      	ldr	r3, [r3, #8]
   b49b2:	4798      	blx	r3
    Wire.endTransmission(false);
   b49b4:	f000 ff46 	bl	b5844 <_Z19__fetch_global_Wirev>
   b49b8:	2100      	movs	r1, #0
   b49ba:	f000 fd64 	bl	b5486 <_ZN7TwoWire15endTransmissionEh>
    Wire.requestFrom(address, count, false);
   b49be:	f000 ff41 	bl	b5844 <_Z19__fetch_global_Wirev>
   b49c2:	9a01      	ldr	r2, [sp, #4]
   b49c4:	2300      	movs	r3, #0
   b49c6:	4621      	mov	r1, r4
   b49c8:	f000 fd47 	bl	b545a <_ZN7TwoWire11requestFromEhjh>
}
   b49cc:	4628      	mov	r0, r5
   b49ce:	b002      	add	sp, #8
   b49d0:	bd70      	pop	{r4, r5, r6, pc}

000b49d2 <_ZN10WireReader4readEv>:

WireReader::~WireReader() {
    Wire.endTransmission(true);
}

byte WireReader::read() {
   b49d2:	b508      	push	{r3, lr}
    return (byte)Wire.read();
   b49d4:	f000 ff36 	bl	b5844 <_Z19__fetch_global_Wirev>
   b49d8:	6803      	ldr	r3, [r0, #0]
   b49da:	695b      	ldr	r3, [r3, #20]
   b49dc:	4798      	blx	r3
}
   b49de:	b2c0      	uxtb	r0, r0
   b49e0:	bd08      	pop	{r3, pc}
	...

000b49e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <netdb_freeaddrinfo+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	689b      	ldr	r3, [r3, #8]
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	00030268 	.word	0x00030268

000b49f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <netdb_getaddrinfo+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	68db      	ldr	r3, [r3, #12]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030268 	.word	0x00030268

000b4a04 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <HAL_Validate_Pin_Function+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	685b      	ldr	r3, [r3, #4]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	0003022c 	.word	0x0003022c

000b4a14 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <HAL_Pin_Mode+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	689b      	ldr	r3, [r3, #8]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	0003022c 	.word	0x0003022c

000b4a24 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <HAL_Get_Pin_Mode+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	68db      	ldr	r3, [r3, #12]
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	0003022c 	.word	0x0003022c

000b4a34 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <HAL_GPIO_Write+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	691b      	ldr	r3, [r3, #16]
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	0003022c 	.word	0x0003022c

000b4a44 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <hal_adc_read+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	0003022c 	.word	0x0003022c

000b4a54 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <HAL_RNG_GetRandomNumber+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	685b      	ldr	r3, [r3, #4]
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	00030218 	.word	0x00030218

000b4a64 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	695b      	ldr	r3, [r3, #20]
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	00030218 	.word	0x00030218

000b4a74 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <HAL_EEPROM_Init+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	00030218 	.word	0x00030218

000b4a84 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <HAL_EEPROM_Read+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	00030218 	.word	0x00030218

000b4a94 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <HAL_EEPROM_Write+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	00030218 	.word	0x00030218

000b4aa4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <os_mutex_recursive_create+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	00030248 	.word	0x00030248

000b4ab4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	4b02      	ldr	r3, [pc, #8]	; (b4ac0 <inet_inet_ntop+0xc>)
   b4ab8:	681b      	ldr	r3, [r3, #0]
   b4aba:	695b      	ldr	r3, [r3, #20]
   b4abc:	9301      	str	r3, [sp, #4]
   b4abe:	bd08      	pop	{r3, pc}
   b4ac0:	00030264 	.word	0x00030264

000b4ac4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4ac4:	b508      	push	{r3, lr}
   b4ac6:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <hal_usart_write+0xc>)
   b4ac8:	681b      	ldr	r3, [r3, #0]
   b4aca:	68db      	ldr	r3, [r3, #12]
   b4acc:	9301      	str	r3, [sp, #4]
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	0003023c 	.word	0x0003023c

000b4ad4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4ad4:	b508      	push	{r3, lr}
   b4ad6:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <hal_usart_available+0xc>)
   b4ad8:	681b      	ldr	r3, [r3, #0]
   b4ada:	691b      	ldr	r3, [r3, #16]
   b4adc:	9301      	str	r3, [sp, #4]
   b4ade:	bd08      	pop	{r3, pc}
   b4ae0:	0003023c 	.word	0x0003023c

000b4ae4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <hal_usart_read+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	695b      	ldr	r3, [r3, #20]
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	0003023c 	.word	0x0003023c

000b4af4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4af4:	b508      	push	{r3, lr}
   b4af6:	4b02      	ldr	r3, [pc, #8]	; (b4b00 <hal_usart_peek+0xc>)
   b4af8:	681b      	ldr	r3, [r3, #0]
   b4afa:	699b      	ldr	r3, [r3, #24]
   b4afc:	9301      	str	r3, [sp, #4]
   b4afe:	bd08      	pop	{r3, pc}
   b4b00:	0003023c 	.word	0x0003023c

000b4b04 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <hal_usart_flush+0xc>)
   b4b08:	681b      	ldr	r3, [r3, #0]
   b4b0a:	69db      	ldr	r3, [r3, #28]
   b4b0c:	9301      	str	r3, [sp, #4]
   b4b0e:	bd08      	pop	{r3, pc}
   b4b10:	0003023c 	.word	0x0003023c

000b4b14 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b02      	ldr	r3, [pc, #8]	; (b4b20 <hal_usart_is_enabled+0xc>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	6a1b      	ldr	r3, [r3, #32]
   b4b1c:	9301      	str	r3, [sp, #4]
   b4b1e:	bd08      	pop	{r3, pc}
   b4b20:	0003023c 	.word	0x0003023c

000b4b24 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4b24:	b508      	push	{r3, lr}
   b4b26:	4b02      	ldr	r3, [pc, #8]	; (b4b30 <hal_usart_available_data_for_write+0xc>)
   b4b28:	681b      	ldr	r3, [r3, #0]
   b4b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b2c:	9301      	str	r3, [sp, #4]
   b4b2e:	bd08      	pop	{r3, pc}
   b4b30:	0003023c 	.word	0x0003023c

000b4b34 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4b34:	b508      	push	{r3, lr}
   b4b36:	4b02      	ldr	r3, [pc, #8]	; (b4b40 <hal_usart_init_ex+0xc>)
   b4b38:	681b      	ldr	r3, [r3, #0]
   b4b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b3c:	9301      	str	r3, [sp, #4]
   b4b3e:	bd08      	pop	{r3, pc}
   b4b40:	0003023c 	.word	0x0003023c

000b4b44 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4b44:	b508      	push	{r3, lr}
   b4b46:	4b02      	ldr	r3, [pc, #8]	; (b4b50 <hal_i2c_begin+0xc>)
   b4b48:	681b      	ldr	r3, [r3, #0]
   b4b4a:	68db      	ldr	r3, [r3, #12]
   b4b4c:	9301      	str	r3, [sp, #4]
   b4b4e:	bd08      	pop	{r3, pc}
   b4b50:	00030228 	.word	0x00030228

000b4b54 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4b02      	ldr	r3, [pc, #8]	; (b4b60 <hal_i2c_begin_transmission+0xc>)
   b4b58:	681b      	ldr	r3, [r3, #0]
   b4b5a:	699b      	ldr	r3, [r3, #24]
   b4b5c:	9301      	str	r3, [sp, #4]
   b4b5e:	bd08      	pop	{r3, pc}
   b4b60:	00030228 	.word	0x00030228

000b4b64 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4b64:	b508      	push	{r3, lr}
   b4b66:	4b02      	ldr	r3, [pc, #8]	; (b4b70 <hal_i2c_end_transmission+0xc>)
   b4b68:	681b      	ldr	r3, [r3, #0]
   b4b6a:	69db      	ldr	r3, [r3, #28]
   b4b6c:	9301      	str	r3, [sp, #4]
   b4b6e:	bd08      	pop	{r3, pc}
   b4b70:	00030228 	.word	0x00030228

000b4b74 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4b74:	b508      	push	{r3, lr}
   b4b76:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <hal_i2c_write+0xc>)
   b4b78:	681b      	ldr	r3, [r3, #0]
   b4b7a:	6a1b      	ldr	r3, [r3, #32]
   b4b7c:	9301      	str	r3, [sp, #4]
   b4b7e:	bd08      	pop	{r3, pc}
   b4b80:	00030228 	.word	0x00030228

000b4b84 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <hal_i2c_available+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	00030228 	.word	0x00030228

000b4b94 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <hal_i2c_read+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	00030228 	.word	0x00030228

000b4ba4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <hal_i2c_peek+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	00030228 	.word	0x00030228

000b4bb4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b02      	ldr	r3, [pc, #8]	; (b4bc0 <hal_i2c_flush+0xc>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bbc:	9301      	str	r3, [sp, #4]
   b4bbe:	bd08      	pop	{r3, pc}
   b4bc0:	00030228 	.word	0x00030228

000b4bc4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4bc4:	b508      	push	{r3, lr}
   b4bc6:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <hal_i2c_is_enabled+0xc>)
   b4bc8:	681b      	ldr	r3, [r3, #0]
   b4bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4bcc:	9301      	str	r3, [sp, #4]
   b4bce:	bd08      	pop	{r3, pc}
   b4bd0:	00030228 	.word	0x00030228

000b4bd4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4bd4:	b508      	push	{r3, lr}
   b4bd6:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <hal_i2c_init+0xc>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
   b4bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bdc:	9301      	str	r3, [sp, #4]
   b4bde:	bd08      	pop	{r3, pc}
   b4be0:	00030228 	.word	0x00030228

000b4be4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4be4:	b508      	push	{r3, lr}
   b4be6:	4b02      	ldr	r3, [pc, #8]	; (b4bf0 <hal_i2c_request_ex+0xc>)
   b4be8:	681b      	ldr	r3, [r3, #0]
   b4bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4bec:	9301      	str	r3, [sp, #4]
   b4bee:	bd08      	pop	{r3, pc}
   b4bf0:	00030228 	.word	0x00030228

000b4bf4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4bf4:	b508      	push	{r3, lr}
   b4bf6:	4b02      	ldr	r3, [pc, #8]	; (b4c00 <hal_spi_init+0xc>)
   b4bf8:	681b      	ldr	r3, [r3, #0]
   b4bfa:	69db      	ldr	r3, [r3, #28]
   b4bfc:	9301      	str	r3, [sp, #4]
   b4bfe:	bd08      	pop	{r3, pc}
   b4c00:	00030230 	.word	0x00030230

000b4c04 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <hal_spi_is_enabled+0xc>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	6a1b      	ldr	r3, [r3, #32]
   b4c0c:	9301      	str	r3, [sp, #4]
   b4c0e:	bd08      	pop	{r3, pc}
   b4c10:	00030230 	.word	0x00030230

000b4c14 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4c14:	b508      	push	{r3, lr}
   b4c16:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <HAL_USB_USART_Init+0xc>)
   b4c18:	681b      	ldr	r3, [r3, #0]
   b4c1a:	681b      	ldr	r3, [r3, #0]
   b4c1c:	9301      	str	r3, [sp, #4]
   b4c1e:	bd08      	pop	{r3, pc}
   b4c20:	0003024c 	.word	0x0003024c

000b4c24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b02      	ldr	r3, [pc, #8]	; (b4c30 <HAL_USB_USART_Available_Data+0xc>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	691b      	ldr	r3, [r3, #16]
   b4c2c:	9301      	str	r3, [sp, #4]
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	0003024c 	.word	0x0003024c

000b4c34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4c34:	b508      	push	{r3, lr}
   b4c36:	4b02      	ldr	r3, [pc, #8]	; (b4c40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	695b      	ldr	r3, [r3, #20]
   b4c3c:	9301      	str	r3, [sp, #4]
   b4c3e:	bd08      	pop	{r3, pc}
   b4c40:	0003024c 	.word	0x0003024c

000b4c44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c44:	b508      	push	{r3, lr}
   b4c46:	4b02      	ldr	r3, [pc, #8]	; (b4c50 <HAL_USB_USART_Receive_Data+0xc>)
   b4c48:	681b      	ldr	r3, [r3, #0]
   b4c4a:	699b      	ldr	r3, [r3, #24]
   b4c4c:	9301      	str	r3, [sp, #4]
   b4c4e:	bd08      	pop	{r3, pc}
   b4c50:	0003024c 	.word	0x0003024c

000b4c54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c54:	b508      	push	{r3, lr}
   b4c56:	4b02      	ldr	r3, [pc, #8]	; (b4c60 <HAL_USB_USART_Send_Data+0xc>)
   b4c58:	681b      	ldr	r3, [r3, #0]
   b4c5a:	69db      	ldr	r3, [r3, #28]
   b4c5c:	9301      	str	r3, [sp, #4]
   b4c5e:	bd08      	pop	{r3, pc}
   b4c60:	0003024c 	.word	0x0003024c

000b4c64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4c64:	b508      	push	{r3, lr}
   b4c66:	4b02      	ldr	r3, [pc, #8]	; (b4c70 <HAL_USB_USART_Flush_Data+0xc>)
   b4c68:	681b      	ldr	r3, [r3, #0]
   b4c6a:	6a1b      	ldr	r3, [r3, #32]
   b4c6c:	9301      	str	r3, [sp, #4]
   b4c6e:	bd08      	pop	{r3, pc}
   b4c70:	0003024c 	.word	0x0003024c

000b4c74 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4c74:	b508      	push	{r3, lr}
   b4c76:	4b02      	ldr	r3, [pc, #8]	; (b4c80 <set_system_mode+0xc>)
   b4c78:	681b      	ldr	r3, [r3, #0]
   b4c7a:	685b      	ldr	r3, [r3, #4]
   b4c7c:	9301      	str	r3, [sp, #4]
   b4c7e:	bd08      	pop	{r3, pc}
   b4c80:	00030220 	.word	0x00030220

000b4c84 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c84:	b508      	push	{r3, lr}
   b4c86:	4b03      	ldr	r3, [pc, #12]	; (b4c94 <system_ctrl_set_app_request_handler+0x10>)
   b4c88:	681b      	ldr	r3, [r3, #0]
   b4c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c8e:	9301      	str	r3, [sp, #4]
   b4c90:	bd08      	pop	{r3, pc}
   b4c92:	0000      	.short	0x0000
   b4c94:	00030220 	.word	0x00030220

000b4c98 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b03      	ldr	r3, [pc, #12]	; (b4ca8 <system_ctrl_set_result+0x10>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4ca2:	9301      	str	r3, [sp, #4]
   b4ca4:	bd08      	pop	{r3, pc}
   b4ca6:	0000      	.short	0x0000
   b4ca8:	00030220 	.word	0x00030220

000b4cac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <network_connect+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	685b      	ldr	r3, [r3, #4]
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030240 	.word	0x00030240

000b4cbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <network_connecting+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	689b      	ldr	r3, [r3, #8]
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	00030240 	.word	0x00030240

000b4ccc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <network_disconnect+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	68db      	ldr	r3, [r3, #12]
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	00030240 	.word	0x00030240

000b4cdc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <network_ready+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	691b      	ldr	r3, [r3, #16]
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	00030240 	.word	0x00030240

000b4cec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <network_on+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	695b      	ldr	r3, [r3, #20]
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030240 	.word	0x00030240

000b4cfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <network_off+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	699b      	ldr	r3, [r3, #24]
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	00030240 	.word	0x00030240

000b4d0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <network_listen+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	69db      	ldr	r3, [r3, #28]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	00030240 	.word	0x00030240

000b4d1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <network_listening+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	6a1b      	ldr	r3, [r3, #32]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	00030240 	.word	0x00030240

000b4d2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <network_set_listen_timeout+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	00030240 	.word	0x00030240

000b4d3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <network_get_listen_timeout+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	00030240 	.word	0x00030240

000b4d4c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <network_is_on+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	00030240 	.word	0x00030240

000b4d5c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <network_is_off+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	00030240 	.word	0x00030240

000b4d6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	00030244 	.word	0x00030244

000b4d7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <malloc+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	681b      	ldr	r3, [r3, #0]
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	0003021c 	.word	0x0003021c

000b4d8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <free+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	685b      	ldr	r3, [r3, #4]
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	0003021c 	.word	0x0003021c

000b4d9c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <vsnprintf+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	0003021c 	.word	0x0003021c

000b4dac <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <__assert_func+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	0003021c 	.word	0x0003021c

000b4dbc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <newlib_impure_ptr_callback+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	0003021c 	.word	0x0003021c

000b4dcc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4dcc:	2200      	movs	r2, #0
   b4dce:	6840      	ldr	r0, [r0, #4]
   b4dd0:	4611      	mov	r1, r2
   b4dd2:	f7ff bfa3 	b.w	b4d1c <network_listening>

000b4dd6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4dd6:	2200      	movs	r2, #0
   b4dd8:	6840      	ldr	r0, [r0, #4]
   b4dda:	4611      	mov	r1, r2
   b4ddc:	f7ff bfae 	b.w	b4d3c <network_get_listen_timeout>

000b4de0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4de0:	6840      	ldr	r0, [r0, #4]
   b4de2:	2200      	movs	r2, #0
   b4de4:	f7ff bfa2 	b.w	b4d2c <network_set_listen_timeout>

000b4de8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4de8:	6840      	ldr	r0, [r0, #4]
   b4dea:	2200      	movs	r2, #0
   b4dec:	f081 0101 	eor.w	r1, r1, #1
   b4df0:	f7ff bf8c 	b.w	b4d0c <network_listen>

000b4df4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4df4:	2300      	movs	r3, #0
   b4df6:	6840      	ldr	r0, [r0, #4]
   b4df8:	461a      	mov	r2, r3
   b4dfa:	4619      	mov	r1, r3
   b4dfc:	f7ff bf7e 	b.w	b4cfc <network_off>

000b4e00 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e00:	2300      	movs	r3, #0
   b4e02:	6840      	ldr	r0, [r0, #4]
   b4e04:	461a      	mov	r2, r3
   b4e06:	4619      	mov	r1, r3
   b4e08:	f7ff bf70 	b.w	b4cec <network_on>

000b4e0c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e0c:	2200      	movs	r2, #0
   b4e0e:	6840      	ldr	r0, [r0, #4]
   b4e10:	4611      	mov	r1, r2
   b4e12:	f7ff bf63 	b.w	b4cdc <network_ready>

000b4e16 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e16:	2200      	movs	r2, #0
   b4e18:	6840      	ldr	r0, [r0, #4]
   b4e1a:	4611      	mov	r1, r2
   b4e1c:	f7ff bf4e 	b.w	b4cbc <network_connecting>

000b4e20 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e20:	6840      	ldr	r0, [r0, #4]
   b4e22:	2200      	movs	r2, #0
   b4e24:	2102      	movs	r1, #2
   b4e26:	f7ff bf51 	b.w	b4ccc <network_disconnect>

000b4e2a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e2a:	2300      	movs	r3, #0
   b4e2c:	6840      	ldr	r0, [r0, #4]
   b4e2e:	461a      	mov	r2, r3
   b4e30:	f7ff bf3c 	b.w	b4cac <network_connect>

000b4e34 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e34:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e36:	2203      	movs	r2, #3
   b4e38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e3a:	4a02      	ldr	r2, [pc, #8]	; (b4e44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e3c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e3e:	4770      	bx	lr
   b4e40:	2003e6b0 	.word	0x2003e6b0
   b4e44:	000b5b04 	.word	0x000b5b04

000b4e48 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4e48:	b510      	push	{r4, lr}
   b4e4a:	4604      	mov	r4, r0
   b4e4c:	4608      	mov	r0, r1
{
    _spi = spi;
   b4e4e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4e50:	f7ff fed0 	bl	b4bf4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4e54:	2300      	movs	r3, #0
   b4e56:	6063      	str	r3, [r4, #4]
}
   b4e58:	4620      	mov	r0, r4
   b4e5a:	bd10      	pop	{r4, pc}

000b4e5c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e5c:	4b05      	ldr	r3, [pc, #20]	; (b4e74 <_GLOBAL__sub_I_System+0x18>)
   b4e5e:	2202      	movs	r2, #2
   b4e60:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e62:	4b05      	ldr	r3, [pc, #20]	; (b4e78 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e64:	4a05      	ldr	r2, [pc, #20]	; (b4e7c <_GLOBAL__sub_I_System+0x20>)
   b4e66:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e68:	2000      	movs	r0, #0
   b4e6a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e6e:	f7ff bf01 	b.w	b4c74 <set_system_mode>
   b4e72:	bf00      	nop
   b4e74:	2003e6c4 	.word	0x2003e6c4
   b4e78:	2003e6b8 	.word	0x2003e6b8
   b4e7c:	ffff0000 	.word	0xffff0000

000b4e80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4e80:	4802      	ldr	r0, [pc, #8]	; (b4e8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4e82:	2300      	movs	r3, #0
   b4e84:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4e86:	f7ff be0d 	b.w	b4aa4 <os_mutex_recursive_create>
   b4e8a:	bf00      	nop
   b4e8c:	2003e6c8 	.word	0x2003e6c8

000b4e90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e92:	4606      	mov	r6, r0
   b4e94:	460d      	mov	r5, r1
  size_t n = 0;
   b4e96:	188f      	adds	r7, r1, r2
   b4e98:	2400      	movs	r4, #0
  while (size--) {
   b4e9a:	42bd      	cmp	r5, r7
   b4e9c:	d00c      	beq.n	b4eb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4e9e:	6833      	ldr	r3, [r6, #0]
   b4ea0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4ea4:	689b      	ldr	r3, [r3, #8]
   b4ea6:	4630      	mov	r0, r6
   b4ea8:	4798      	blx	r3
     if (chunk>=0)
   b4eaa:	1e03      	subs	r3, r0, #0
   b4eac:	db01      	blt.n	b4eb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4eae:	441c      	add	r4, r3
  while (size--) {
   b4eb0:	e7f3      	b.n	b4e9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4eb2:	2c00      	cmp	r4, #0
   b4eb4:	bf08      	it	eq
   b4eb6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4eb8:	4620      	mov	r0, r4
   b4eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ebc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4ebc:	b513      	push	{r0, r1, r4, lr}
   b4ebe:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4ec0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4ec2:	b159      	cbz	r1, b4edc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4ec4:	9101      	str	r1, [sp, #4]
   b4ec6:	f000 fd2d 	bl	b5924 <strlen>
   b4eca:	6823      	ldr	r3, [r4, #0]
   b4ecc:	9901      	ldr	r1, [sp, #4]
   b4ece:	68db      	ldr	r3, [r3, #12]
   b4ed0:	4602      	mov	r2, r0
   b4ed2:	4620      	mov	r0, r4
    }
   b4ed4:	b002      	add	sp, #8
   b4ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4eda:	4718      	bx	r3
    }
   b4edc:	b002      	add	sp, #8
   b4ede:	bd10      	pop	{r4, pc}

000b4ee0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4ee0:	6803      	ldr	r3, [r0, #0]
   b4ee2:	689b      	ldr	r3, [r3, #8]
   b4ee4:	4718      	bx	r3

000b4ee6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4ee6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4ee8:	210d      	movs	r1, #13
{
   b4eea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4eec:	f7ff fff8 	bl	b4ee0 <_ZN5Print5printEc>
  n += print('\n');
   b4ef0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4ef2:	4604      	mov	r4, r0
  n += print('\n');
   b4ef4:	4628      	mov	r0, r5
   b4ef6:	f7ff fff3 	bl	b4ee0 <_ZN5Print5printEc>
  return n;
}
   b4efa:	4420      	add	r0, r4
   b4efc:	bd38      	pop	{r3, r4, r5, pc}

000b4efe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4efe:	b530      	push	{r4, r5, lr}
   b4f00:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4f02:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4f04:	2a01      	cmp	r2, #1
  *str = '\0';
   b4f06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4f0a:	bf98      	it	ls
   b4f0c:	220a      	movls	r2, #10
   b4f0e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4f10:	460d      	mov	r5, r1
   b4f12:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4f16:	fb01 5312 	mls	r3, r1, r2, r5
   b4f1a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f1e:	2b09      	cmp	r3, #9
   b4f20:	bf94      	ite	ls
   b4f22:	3330      	addls	r3, #48	; 0x30
   b4f24:	3337      	addhi	r3, #55	; 0x37
   b4f26:	b2db      	uxtb	r3, r3
  } while(n);
   b4f28:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f2a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4f2e:	d9ef      	bls.n	b4f10 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4f30:	4621      	mov	r1, r4
   b4f32:	f7ff ffc3 	bl	b4ebc <_ZN5Print5writeEPKc>
}
   b4f36:	b00b      	add	sp, #44	; 0x2c
   b4f38:	bd30      	pop	{r4, r5, pc}

000b4f3a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f3e:	b086      	sub	sp, #24
   b4f40:	af00      	add	r7, sp, #0
   b4f42:	4605      	mov	r5, r0
   b4f44:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4f46:	1d38      	adds	r0, r7, #4
   b4f48:	2114      	movs	r1, #20
{
   b4f4a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4f4c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4f4e:	f7ff ff25 	bl	b4d9c <vsnprintf>

    if (n<bufsize)
   b4f52:	2813      	cmp	r0, #19
   b4f54:	d80e      	bhi.n	b4f74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4f56:	1d39      	adds	r1, r7, #4
   b4f58:	4628      	mov	r0, r5
   b4f5a:	f7ff ffaf 	bl	b4ebc <_ZN5Print5writeEPKc>
   b4f5e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4f60:	b11e      	cbz	r6, b4f6a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4f62:	4628      	mov	r0, r5
   b4f64:	f7ff ffbf 	bl	b4ee6 <_ZN5Print7printlnEv>
   b4f68:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4f6a:	4620      	mov	r0, r4
   b4f6c:	3718      	adds	r7, #24
   b4f6e:	46bd      	mov	sp, r7
   b4f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4f74:	f100 0308 	add.w	r3, r0, #8
   b4f78:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4f7c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4f7e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4f82:	4622      	mov	r2, r4
   b4f84:	1c41      	adds	r1, r0, #1
   b4f86:	683b      	ldr	r3, [r7, #0]
   b4f88:	4668      	mov	r0, sp
   b4f8a:	f7ff ff07 	bl	b4d9c <vsnprintf>
  return write(str);
   b4f8e:	4669      	mov	r1, sp
   b4f90:	4628      	mov	r0, r5
   b4f92:	f7ff ff93 	bl	b4ebc <_ZN5Print5writeEPKc>
   b4f96:	4604      	mov	r4, r0
   b4f98:	46c5      	mov	sp, r8
   b4f9a:	e7e1      	b.n	b4f60 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4f9c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4f9c:	2300      	movs	r3, #0
   b4f9e:	6840      	ldr	r0, [r0, #4]
   b4fa0:	461a      	mov	r2, r3
   b4fa2:	4619      	mov	r1, r3
   b4fa4:	f7ff bea2 	b.w	b4cec <network_on>

000b4fa8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4fa8:	4b01      	ldr	r3, [pc, #4]	; (b4fb0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4faa:	4a02      	ldr	r2, [pc, #8]	; (b4fb4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4fac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4fae:	4770      	bx	lr
   b4fb0:	2003e6cc 	.word	0x2003e6cc
   b4fb4:	000b5b38 	.word	0x000b5b38

000b4fb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4fb8:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4fba:	681a      	ldr	r2, [r3, #0]
   b4fbc:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4fbe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4fc0:	4770      	bx	lr
   b4fc2:	bf00      	nop
   b4fc4:	2003e5f0 	.word	0x2003e5f0
   b4fc8:	2003e6d0 	.word	0x2003e6d0

000b4fcc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4fcc:	4b01      	ldr	r3, [pc, #4]	; (b4fd4 <_GLOBAL__sub_I_RGB+0x8>)
   b4fce:	2200      	movs	r2, #0
   b4fd0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4fd2:	4770      	bx	lr
   b4fd4:	2003e6d4 	.word	0x2003e6d4

000b4fd8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4fd8:	4b01      	ldr	r3, [pc, #4]	; (b4fe0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4fda:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4fdc:	4770      	bx	lr
   b4fde:	bf00      	nop
   b4fe0:	2003e5f4 	.word	0x2003e5f4

000b4fe4 <serialEventRun>:
{
   b4fe4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4fe6:	4b0b      	ldr	r3, [pc, #44]	; (b5014 <serialEventRun+0x30>)
   b4fe8:	b143      	cbz	r3, b4ffc <serialEventRun+0x18>
   b4fea:	f000 f963 	bl	b52b4 <_Z16_fetch_usbserialv>
   b4fee:	6803      	ldr	r3, [r0, #0]
   b4ff0:	691b      	ldr	r3, [r3, #16]
   b4ff2:	4798      	blx	r3
   b4ff4:	2800      	cmp	r0, #0
   b4ff6:	dd01      	ble.n	b4ffc <serialEventRun+0x18>
        serialEvent();
   b4ff8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4ffc:	4b06      	ldr	r3, [pc, #24]	; (b5018 <serialEventRun+0x34>)
   b4ffe:	b143      	cbz	r3, b5012 <serialEventRun+0x2e>
   b5000:	f000 fbce 	bl	b57a0 <_Z22__fetch_global_Serial1v>
   b5004:	6803      	ldr	r3, [r0, #0]
   b5006:	691b      	ldr	r3, [r3, #16]
   b5008:	4798      	blx	r3
   b500a:	2800      	cmp	r0, #0
   b500c:	dd01      	ble.n	b5012 <serialEventRun+0x2e>
        serialEvent1();
   b500e:	f3af 8000 	nop.w
}
   b5012:	bd08      	pop	{r3, pc}
	...

000b501c <_post_loop>:
{
   b501c:	b508      	push	{r3, lr}
	serialEventRun();
   b501e:	f7ff ffe1 	bl	b4fe4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5022:	f7ff fd1f 	bl	b4a64 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5026:	4b01      	ldr	r3, [pc, #4]	; (b502c <_post_loop+0x10>)
   b5028:	6018      	str	r0, [r3, #0]
}
   b502a:	bd08      	pop	{r3, pc}
   b502c:	2003e738 	.word	0x2003e738

000b5030 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5030:	4805      	ldr	r0, [pc, #20]	; (b5048 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5032:	4a06      	ldr	r2, [pc, #24]	; (b504c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5034:	4906      	ldr	r1, [pc, #24]	; (b5050 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5036:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5038:	1a12      	subs	r2, r2, r0
   b503a:	f000 fc2f 	bl	b589c <memcpy>
    __backup_sram_signature = signature;
   b503e:	4b05      	ldr	r3, [pc, #20]	; (b5054 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5040:	4a05      	ldr	r2, [pc, #20]	; (b5058 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5042:	601a      	str	r2, [r3, #0]
}
   b5044:	bd08      	pop	{r3, pc}
   b5046:	bf00      	nop
   b5048:	2003f400 	.word	0x2003f400
   b504c:	2003f404 	.word	0x2003f404
   b5050:	000b5d30 	.word	0x000b5d30
   b5054:	2003f400 	.word	0x2003f400
   b5058:	9a271c1e 	.word	0x9a271c1e

000b505c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b505c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b505e:	2300      	movs	r3, #0
   b5060:	9300      	str	r3, [sp, #0]
   b5062:	461a      	mov	r2, r3
   b5064:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5068:	f7ff fe16 	bl	b4c98 <system_ctrl_set_result>
}
   b506c:	b003      	add	sp, #12
   b506e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5074 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5074:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5076:	8843      	ldrh	r3, [r0, #2]
   b5078:	2b0a      	cmp	r3, #10
   b507a:	d008      	beq.n	b508e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b507c:	2b50      	cmp	r3, #80	; 0x50
   b507e:	d10b      	bne.n	b5098 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5080:	4b09      	ldr	r3, [pc, #36]	; (b50a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5082:	681b      	ldr	r3, [r3, #0]
   b5084:	b14b      	cbz	r3, b509a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5086:	b003      	add	sp, #12
   b5088:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b508c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b508e:	f7ff ffe5 	bl	b505c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5092:	b003      	add	sp, #12
   b5094:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5098:	2300      	movs	r3, #0
   b509a:	9300      	str	r3, [sp, #0]
   b509c:	461a      	mov	r2, r3
   b509e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b50a2:	f7ff fdf9 	bl	b4c98 <system_ctrl_set_result>
}
   b50a6:	e7f4      	b.n	b5092 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b50a8:	2003e6e8 	.word	0x2003e6e8

000b50ac <module_user_init_hook>:
{
   b50ac:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b50ae:	4812      	ldr	r0, [pc, #72]	; (b50f8 <module_user_init_hook+0x4c>)
   b50b0:	2100      	movs	r1, #0
   b50b2:	f7ff fe83 	bl	b4dbc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b50b6:	4b11      	ldr	r3, [pc, #68]	; (b50fc <module_user_init_hook+0x50>)
   b50b8:	681a      	ldr	r2, [r3, #0]
   b50ba:	4b11      	ldr	r3, [pc, #68]	; (b5100 <module_user_init_hook+0x54>)
   b50bc:	429a      	cmp	r2, r3
   b50be:	4b11      	ldr	r3, [pc, #68]	; (b5104 <module_user_init_hook+0x58>)
   b50c0:	bf0c      	ite	eq
   b50c2:	2201      	moveq	r2, #1
   b50c4:	2200      	movne	r2, #0
   b50c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b50c8:	d001      	beq.n	b50ce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b50ca:	f7ff ffb1 	bl	b5030 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b50ce:	f7ff fcc1 	bl	b4a54 <HAL_RNG_GetRandomNumber>
   b50d2:	4604      	mov	r4, r0
    srand(seed);
   b50d4:	f000 fbf8 	bl	b58c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b50d8:	4b0b      	ldr	r3, [pc, #44]	; (b5108 <module_user_init_hook+0x5c>)
   b50da:	b113      	cbz	r3, b50e2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b50dc:	4620      	mov	r0, r4
   b50de:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b50e2:	2100      	movs	r1, #0
   b50e4:	4808      	ldr	r0, [pc, #32]	; (b5108 <module_user_init_hook+0x5c>)
   b50e6:	f7ff fe41 	bl	b4d6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b50ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b50ee:	4807      	ldr	r0, [pc, #28]	; (b510c <module_user_init_hook+0x60>)
   b50f0:	2100      	movs	r1, #0
   b50f2:	f7ff bdc7 	b.w	b4c84 <system_ctrl_set_app_request_handler>
   b50f6:	bf00      	nop
   b50f8:	000b4fd9 	.word	0x000b4fd9
   b50fc:	2003f400 	.word	0x2003f400
   b5100:	9a271c1e 	.word	0x9a271c1e
   b5104:	2003e6e4 	.word	0x2003e6e4
   b5108:	00000000 	.word	0x00000000
   b510c:	000b5075 	.word	0x000b5075

000b5110 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5110:	4770      	bx	lr

000b5112 <_ZN9IPAddressD0Ev>:
   b5112:	b510      	push	{r4, lr}
   b5114:	2118      	movs	r1, #24
   b5116:	4604      	mov	r4, r0
   b5118:	f7fe ffbd 	bl	b4096 <_ZdlPvj>
   b511c:	4620      	mov	r0, r4
   b511e:	bd10      	pop	{r4, pc}

000b5120 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5120:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5122:	7d03      	ldrb	r3, [r0, #20]
   b5124:	2b06      	cmp	r3, #6
{
   b5126:	b08d      	sub	sp, #52	; 0x34
   b5128:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b512a:	f100 0704 	add.w	r7, r0, #4
   b512e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5132:	d012      	beq.n	b515a <_ZNK9IPAddress7printToER5Print+0x3a>
   b5134:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5138:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b513c:	220a      	movs	r2, #10
   b513e:	4630      	mov	r0, r6
   b5140:	f7ff fedd 	bl	b4efe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5144:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5146:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5148:	d019      	beq.n	b517e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b514a:	2c00      	cmp	r4, #0
   b514c:	d0f4      	beq.n	b5138 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b514e:	212e      	movs	r1, #46	; 0x2e
   b5150:	4630      	mov	r0, r6
   b5152:	f7ff fec5 	bl	b4ee0 <_ZN5Print5printEc>
   b5156:	4404      	add	r4, r0
   b5158:	e7ee      	b.n	b5138 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b515a:	232f      	movs	r3, #47	; 0x2f
   b515c:	466a      	mov	r2, sp
   b515e:	4639      	mov	r1, r7
   b5160:	200a      	movs	r0, #10
		buf[0] = 0;
   b5162:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5166:	f7ff fca5 	bl	b4ab4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b516a:	4668      	mov	r0, sp
   b516c:	f000 fbda 	bl	b5924 <strlen>
   b5170:	6833      	ldr	r3, [r6, #0]
   b5172:	4602      	mov	r2, r0
   b5174:	68db      	ldr	r3, [r3, #12]
   b5176:	4669      	mov	r1, sp
   b5178:	4630      	mov	r0, r6
   b517a:	4798      	blx	r3
   b517c:	4604      	mov	r4, r0
    }
    return n;
}
   b517e:	4620      	mov	r0, r4
   b5180:	b00d      	add	sp, #52	; 0x34
   b5182:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5184 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5184:	b510      	push	{r4, lr}
   b5186:	4b05      	ldr	r3, [pc, #20]	; (b519c <_ZN9IPAddressC1Ev+0x18>)
   b5188:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b518a:	2211      	movs	r2, #17
   b518c:	f840 3b04 	str.w	r3, [r0], #4
   b5190:	2100      	movs	r1, #0
   b5192:	f000 fb91 	bl	b58b8 <memset>
}
   b5196:	4620      	mov	r0, r4
   b5198:	bd10      	pop	{r4, pc}
   b519a:	bf00      	nop
   b519c:	000b5b60 	.word	0x000b5b60

000b51a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b51a0:	4603      	mov	r3, r0
   b51a2:	4a07      	ldr	r2, [pc, #28]	; (b51c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b51a4:	b510      	push	{r4, lr}
   b51a6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b51aa:	f101 0210 	add.w	r2, r1, #16
   b51ae:	f851 4b04 	ldr.w	r4, [r1], #4
   b51b2:	f843 4b04 	str.w	r4, [r3], #4
   b51b6:	4291      	cmp	r1, r2
   b51b8:	d1f9      	bne.n	b51ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b51ba:	780a      	ldrb	r2, [r1, #0]
   b51bc:	701a      	strb	r2, [r3, #0]
}
   b51be:	bd10      	pop	{r4, pc}
   b51c0:	000b5b60 	.word	0x000b5b60

000b51c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b51c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b51c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b51ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b51ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b51d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b51d6:	2304      	movs	r3, #4
   b51d8:	6041      	str	r1, [r0, #4]
   b51da:	7503      	strb	r3, [r0, #20]
}
   b51dc:	bd10      	pop	{r4, pc}
	...

000b51e0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b51e0:	b507      	push	{r0, r1, r2, lr}
   b51e2:	4b06      	ldr	r3, [pc, #24]	; (b51fc <_ZN9IPAddressC1EPKh+0x1c>)
   b51e4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b51e6:	78cb      	ldrb	r3, [r1, #3]
   b51e8:	9300      	str	r3, [sp, #0]
   b51ea:	788b      	ldrb	r3, [r1, #2]
   b51ec:	784a      	ldrb	r2, [r1, #1]
   b51ee:	7809      	ldrb	r1, [r1, #0]
   b51f0:	f7ff ffe8 	bl	b51c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b51f4:	b003      	add	sp, #12
   b51f6:	f85d fb04 	ldr.w	pc, [sp], #4
   b51fa:	bf00      	nop
   b51fc:	000b5b60 	.word	0x000b5b60

000b5200 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5200:	7441      	strb	r1, [r0, #17]
}
   b5202:	4770      	bx	lr

000b5204 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5204:	4770      	bx	lr

000b5206 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5206:	4770      	bx	lr

000b5208 <_ZN9USBSerial4readEv>:
{
   b5208:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b520a:	2100      	movs	r1, #0
   b520c:	7c00      	ldrb	r0, [r0, #16]
   b520e:	f7ff fd19 	bl	b4c44 <HAL_USB_USART_Receive_Data>
}
   b5212:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5216:	bd08      	pop	{r3, pc}

000b5218 <_ZN9USBSerial4peekEv>:
{
   b5218:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b521a:	2101      	movs	r1, #1
   b521c:	7c00      	ldrb	r0, [r0, #16]
   b521e:	f7ff fd11 	bl	b4c44 <HAL_USB_USART_Receive_Data>
}
   b5222:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5226:	bd08      	pop	{r3, pc}

000b5228 <_ZN9USBSerial17availableForWriteEv>:
{
   b5228:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b522a:	7c00      	ldrb	r0, [r0, #16]
   b522c:	f7ff fd02 	bl	b4c34 <HAL_USB_USART_Available_Data_For_Write>
}
   b5230:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5234:	bd08      	pop	{r3, pc}

000b5236 <_ZN9USBSerial9availableEv>:
{
   b5236:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5238:	7c00      	ldrb	r0, [r0, #16]
   b523a:	f7ff fcf3 	bl	b4c24 <HAL_USB_USART_Available_Data>
}
   b523e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5242:	bd08      	pop	{r3, pc}

000b5244 <_ZN9USBSerial5writeEh>:
{
   b5244:	b513      	push	{r0, r1, r4, lr}
   b5246:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5248:	7c00      	ldrb	r0, [r0, #16]
{
   b524a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b524c:	f7ff fcf2 	bl	b4c34 <HAL_USB_USART_Available_Data_For_Write>
   b5250:	2800      	cmp	r0, #0
   b5252:	9901      	ldr	r1, [sp, #4]
   b5254:	dc01      	bgt.n	b525a <_ZN9USBSerial5writeEh+0x16>
   b5256:	7c60      	ldrb	r0, [r4, #17]
   b5258:	b120      	cbz	r0, b5264 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b525a:	7c20      	ldrb	r0, [r4, #16]
   b525c:	f7ff fcfa 	bl	b4c54 <HAL_USB_USART_Send_Data>
   b5260:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5264:	b002      	add	sp, #8
   b5266:	bd10      	pop	{r4, pc}

000b5268 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5268:	7c00      	ldrb	r0, [r0, #16]
   b526a:	f7ff bcfb 	b.w	b4c64 <HAL_USB_USART_Flush_Data>

000b526e <_ZN9USBSerialD0Ev>:
   b526e:	b510      	push	{r4, lr}
   b5270:	2114      	movs	r1, #20
   b5272:	4604      	mov	r4, r0
   b5274:	f7fe ff0f 	bl	b4096 <_ZdlPvj>
   b5278:	4620      	mov	r0, r4
   b527a:	bd10      	pop	{r4, pc}

000b527c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b527c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b527e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5282:	4604      	mov	r4, r0
   b5284:	4608      	mov	r0, r1
   b5286:	2100      	movs	r1, #0
   b5288:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b528c:	4b04      	ldr	r3, [pc, #16]	; (b52a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b528e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5290:	2301      	movs	r3, #1
  _serial = serial;
   b5292:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5294:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5296:	4611      	mov	r1, r2
   b5298:	f7ff fcbc 	bl	b4c14 <HAL_USB_USART_Init>
}
   b529c:	4620      	mov	r0, r4
   b529e:	bd10      	pop	{r4, pc}
   b52a0:	000b5b74 	.word	0x000b5b74

000b52a4 <_Z19acquireSerialBufferv>:
{
   b52a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b52a6:	2214      	movs	r2, #20
{
   b52a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b52aa:	2100      	movs	r1, #0
   b52ac:	f000 fb04 	bl	b58b8 <memset>
}
   b52b0:	4620      	mov	r0, r4
   b52b2:	bd10      	pop	{r4, pc}

000b52b4 <_Z16_fetch_usbserialv>:
{
   b52b4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52b6:	4c0f      	ldr	r4, [pc, #60]	; (b52f4 <_Z16_fetch_usbserialv+0x40>)
{
   b52b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b52ba:	a803      	add	r0, sp, #12
   b52bc:	f7ff fff2 	bl	b52a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52c0:	7821      	ldrb	r1, [r4, #0]
   b52c2:	f3bf 8f5b 	dmb	ish
   b52c6:	f011 0101 	ands.w	r1, r1, #1
   b52ca:	d10f      	bne.n	b52ec <_Z16_fetch_usbserialv+0x38>
   b52cc:	4620      	mov	r0, r4
   b52ce:	9101      	str	r1, [sp, #4]
   b52d0:	f7fe fee3 	bl	b409a <__cxa_guard_acquire>
   b52d4:	9901      	ldr	r1, [sp, #4]
   b52d6:	b148      	cbz	r0, b52ec <_Z16_fetch_usbserialv+0x38>
   b52d8:	aa03      	add	r2, sp, #12
   b52da:	4807      	ldr	r0, [pc, #28]	; (b52f8 <_Z16_fetch_usbserialv+0x44>)
   b52dc:	f7ff ffce 	bl	b527c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b52e0:	4620      	mov	r0, r4
   b52e2:	f7fe fedf 	bl	b40a4 <__cxa_guard_release>
   b52e6:	4805      	ldr	r0, [pc, #20]	; (b52fc <_Z16_fetch_usbserialv+0x48>)
   b52e8:	f000 fad2 	bl	b5890 <atexit>
	return _usbserial;
}
   b52ec:	4802      	ldr	r0, [pc, #8]	; (b52f8 <_Z16_fetch_usbserialv+0x44>)
   b52ee:	b008      	add	sp, #32
   b52f0:	bd10      	pop	{r4, pc}
   b52f2:	bf00      	nop
   b52f4:	2003e6ec 	.word	0x2003e6ec
   b52f8:	2003e6f0 	.word	0x2003e6f0
   b52fc:	000b5205 	.word	0x000b5205

000b5300 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5300:	4770      	bx	lr

000b5302 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5302:	7441      	strb	r1, [r0, #17]
}
   b5304:	4770      	bx	lr

000b5306 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5306:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5308:	7c00      	ldrb	r0, [r0, #16]
   b530a:	f7ff fc0b 	bl	b4b24 <hal_usart_available_data_for_write>
}
   b530e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5312:	bd08      	pop	{r3, pc}

000b5314 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5314:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5316:	7c00      	ldrb	r0, [r0, #16]
   b5318:	f7ff fbdc 	bl	b4ad4 <hal_usart_available>
}
   b531c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5320:	bd08      	pop	{r3, pc}

000b5322 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5322:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5324:	7c00      	ldrb	r0, [r0, #16]
   b5326:	f7ff fbe5 	bl	b4af4 <hal_usart_peek>
}
   b532a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b532e:	bd08      	pop	{r3, pc}

000b5330 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5330:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5332:	7c00      	ldrb	r0, [r0, #16]
   b5334:	f7ff fbd6 	bl	b4ae4 <hal_usart_read>
}
   b5338:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b533c:	bd08      	pop	{r3, pc}

000b533e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b533e:	7c00      	ldrb	r0, [r0, #16]
   b5340:	f7ff bbe0 	b.w	b4b04 <hal_usart_flush>

000b5344 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5344:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5346:	7c45      	ldrb	r5, [r0, #17]
{
   b5348:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b534a:	b12d      	cbz	r5, b5358 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b534c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b534e:	b003      	add	sp, #12
   b5350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5354:	f7ff bbb6 	b.w	b4ac4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5358:	7c00      	ldrb	r0, [r0, #16]
   b535a:	9101      	str	r1, [sp, #4]
   b535c:	f7ff fbe2 	bl	b4b24 <hal_usart_available_data_for_write>
   b5360:	2800      	cmp	r0, #0
   b5362:	9901      	ldr	r1, [sp, #4]
   b5364:	dcf2      	bgt.n	b534c <_ZN11USARTSerial5writeEh+0x8>
}
   b5366:	4628      	mov	r0, r5
   b5368:	b003      	add	sp, #12
   b536a:	bd30      	pop	{r4, r5, pc}

000b536c <_ZN11USARTSerialD0Ev>:
   b536c:	b510      	push	{r4, lr}
   b536e:	2114      	movs	r1, #20
   b5370:	4604      	mov	r4, r0
   b5372:	f7fe fe90 	bl	b4096 <_ZdlPvj>
   b5376:	4620      	mov	r0, r4
   b5378:	bd10      	pop	{r4, pc}
	...

000b537c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b537c:	b510      	push	{r4, lr}
   b537e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5382:	4604      	mov	r4, r0
   b5384:	4608      	mov	r0, r1
   b5386:	4611      	mov	r1, r2
   b5388:	2200      	movs	r2, #0
   b538a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b538e:	4b04      	ldr	r3, [pc, #16]	; (b53a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5390:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5392:	2301      	movs	r3, #1
  _serial = serial;
   b5394:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5396:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5398:	f7ff fbcc 	bl	b4b34 <hal_usart_init_ex>
}
   b539c:	4620      	mov	r0, r4
   b539e:	bd10      	pop	{r4, pc}
   b53a0:	000b5ba4 	.word	0x000b5ba4

000b53a4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b53a4:	4770      	bx	lr

000b53a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b53a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53a8:	4606      	mov	r6, r0
   b53aa:	4615      	mov	r5, r2
   b53ac:	460c      	mov	r4, r1
   b53ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b53b0:	42bc      	cmp	r4, r7
   b53b2:	d006      	beq.n	b53c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b53b4:	6833      	ldr	r3, [r6, #0]
   b53b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b53ba:	689b      	ldr	r3, [r3, #8]
   b53bc:	4630      	mov	r0, r6
   b53be:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b53c0:	e7f6      	b.n	b53b0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b53c2:	4628      	mov	r0, r5
   b53c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b53c6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b53c6:	7c00      	ldrb	r0, [r0, #16]
   b53c8:	2200      	movs	r2, #0
   b53ca:	f7ff bbd3 	b.w	b4b74 <hal_i2c_write>

000b53ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b53ce:	7c00      	ldrb	r0, [r0, #16]
   b53d0:	2100      	movs	r1, #0
   b53d2:	f7ff bbd7 	b.w	b4b84 <hal_i2c_available>

000b53d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b53d6:	7c00      	ldrb	r0, [r0, #16]
   b53d8:	2100      	movs	r1, #0
   b53da:	f7ff bbdb 	b.w	b4b94 <hal_i2c_read>

000b53de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b53de:	7c00      	ldrb	r0, [r0, #16]
   b53e0:	2100      	movs	r1, #0
   b53e2:	f7ff bbdf 	b.w	b4ba4 <hal_i2c_peek>

000b53e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b53e6:	7c00      	ldrb	r0, [r0, #16]
   b53e8:	2100      	movs	r1, #0
   b53ea:	f7ff bbe3 	b.w	b4bb4 <hal_i2c_flush>

000b53ee <_ZN7TwoWireD0Ev>:
   b53ee:	b510      	push	{r4, lr}
   b53f0:	2114      	movs	r1, #20
   b53f2:	4604      	mov	r4, r0
   b53f4:	f7fe fe4f 	bl	b4096 <_ZdlPvj>
   b53f8:	4620      	mov	r0, r4
   b53fa:	bd10      	pop	{r4, pc}

000b53fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b53fc:	b510      	push	{r4, lr}
   b53fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5402:	4604      	mov	r4, r0
   b5404:	4608      	mov	r0, r1
   b5406:	2100      	movs	r1, #0
   b5408:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b540c:	4b03      	ldr	r3, [pc, #12]	; (b541c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b540e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5410:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5412:	4611      	mov	r1, r2
   b5414:	f7ff fbde 	bl	b4bd4 <hal_i2c_init>
}
   b5418:	4620      	mov	r0, r4
   b541a:	bd10      	pop	{r4, pc}
   b541c:	000b5bd4 	.word	0x000b5bd4

000b5420 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5420:	2300      	movs	r3, #0
   b5422:	7c00      	ldrb	r0, [r0, #16]
   b5424:	461a      	mov	r2, r3
   b5426:	4619      	mov	r1, r3
   b5428:	f7ff bb8c 	b.w	b4b44 <hal_i2c_begin>

000b542c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b542c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b542e:	2200      	movs	r2, #0
   b5430:	2314      	movs	r3, #20
   b5432:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5436:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b543a:	780b      	ldrb	r3, [r1, #0]
   b543c:	f88d 3008 	strb.w	r3, [sp, #8]
   b5440:	684b      	ldr	r3, [r1, #4]
   b5442:	9303      	str	r3, [sp, #12]
   b5444:	68cb      	ldr	r3, [r1, #12]
   b5446:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5448:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b544a:	7a0b      	ldrb	r3, [r1, #8]
   b544c:	9305      	str	r3, [sp, #20]
   b544e:	a901      	add	r1, sp, #4
   b5450:	f7ff fbc8 	bl	b4be4 <hal_i2c_request_ex>
}
   b5454:	b007      	add	sp, #28
   b5456:	f85d fb04 	ldr.w	pc, [sp], #4

000b545a <_ZN7TwoWire11requestFromEhjh>:
{
   b545a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b545c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b545e:	f88d 1000 	strb.w	r1, [sp]
   b5462:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5466:	9103      	str	r1, [sp, #12]
   b5468:	bf18      	it	ne
   b546a:	2301      	movne	r3, #1
   b546c:	4669      	mov	r1, sp
    size_ = size;
   b546e:	9201      	str	r2, [sp, #4]
   b5470:	f88d 3008 	strb.w	r3, [sp, #8]
   b5474:	f7ff ffda 	bl	b542c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5478:	b005      	add	sp, #20
   b547a:	f85d fb04 	ldr.w	pc, [sp], #4

000b547e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b547e:	7c00      	ldrb	r0, [r0, #16]
   b5480:	2200      	movs	r2, #0
   b5482:	f7ff bb67 	b.w	b4b54 <hal_i2c_begin_transmission>

000b5486 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5486:	7c00      	ldrb	r0, [r0, #16]
   b5488:	2200      	movs	r2, #0
   b548a:	f7ff bb6b 	b.w	b4b64 <hal_i2c_end_transmission>

000b548e <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   b548e:	7c00      	ldrb	r0, [r0, #16]
   b5490:	2100      	movs	r1, #0
   b5492:	f7ff bb97 	b.w	b4bc4 <hal_i2c_is_enabled>

000b5496 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5496:	2200      	movs	r2, #0
   b5498:	6840      	ldr	r0, [r0, #4]
   b549a:	4611      	mov	r1, r2
   b549c:	f7ff bc1e 	b.w	b4cdc <network_ready>

000b54a0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b54a0:	2200      	movs	r2, #0
   b54a2:	6840      	ldr	r0, [r0, #4]
   b54a4:	4611      	mov	r1, r2
   b54a6:	f7ff bc39 	b.w	b4d1c <network_listening>

000b54aa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b54aa:	2200      	movs	r2, #0
   b54ac:	6840      	ldr	r0, [r0, #4]
   b54ae:	4611      	mov	r1, r2
   b54b0:	f7ff bc44 	b.w	b4d3c <network_get_listen_timeout>

000b54b4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b54b4:	6840      	ldr	r0, [r0, #4]
   b54b6:	2200      	movs	r2, #0
   b54b8:	f7ff bc38 	b.w	b4d2c <network_set_listen_timeout>

000b54bc <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b54bc:	6840      	ldr	r0, [r0, #4]
   b54be:	2200      	movs	r2, #0
   b54c0:	f081 0101 	eor.w	r1, r1, #1
   b54c4:	f7ff bc22 	b.w	b4d0c <network_listen>

000b54c8 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b54c8:	2300      	movs	r3, #0
   b54ca:	6840      	ldr	r0, [r0, #4]
   b54cc:	461a      	mov	r2, r3
   b54ce:	4619      	mov	r1, r3
   b54d0:	f7ff bc14 	b.w	b4cfc <network_off>

000b54d4 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b54d4:	2200      	movs	r2, #0
   b54d6:	6840      	ldr	r0, [r0, #4]
   b54d8:	4611      	mov	r1, r2
   b54da:	f7ff bbef 	b.w	b4cbc <network_connecting>

000b54de <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b54de:	6840      	ldr	r0, [r0, #4]
   b54e0:	2200      	movs	r2, #0
   b54e2:	2102      	movs	r1, #2
   b54e4:	f7ff bbf2 	b.w	b4ccc <network_disconnect>

000b54e8 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b54e8:	2300      	movs	r3, #0
   b54ea:	6840      	ldr	r0, [r0, #4]
   b54ec:	461a      	mov	r2, r3
   b54ee:	f7ff bbdd 	b.w	b4cac <network_connect>
	...

000b54f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b54f4:	4b02      	ldr	r3, [pc, #8]	; (b5500 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b54f6:	2204      	movs	r2, #4
   b54f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b54fa:	4a02      	ldr	r2, [pc, #8]	; (b5504 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b54fc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b54fe:	4770      	bx	lr
   b5500:	2003e704 	.word	0x2003e704
   b5504:	000b5bfc 	.word	0x000b5bfc

000b5508 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5508:	2300      	movs	r3, #0
   b550a:	6840      	ldr	r0, [r0, #4]
   b550c:	461a      	mov	r2, r3
   b550e:	f7ff bbcd 	b.w	b4cac <network_connect>

000b5512 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5512:	6840      	ldr	r0, [r0, #4]
   b5514:	2200      	movs	r2, #0
   b5516:	2102      	movs	r1, #2
   b5518:	f7ff bbd8 	b.w	b4ccc <network_disconnect>

000b551c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b551c:	2200      	movs	r2, #0
   b551e:	6840      	ldr	r0, [r0, #4]
   b5520:	4611      	mov	r1, r2
   b5522:	f7ff bbcb 	b.w	b4cbc <network_connecting>

000b5526 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5526:	2200      	movs	r2, #0
   b5528:	6840      	ldr	r0, [r0, #4]
   b552a:	4611      	mov	r1, r2
   b552c:	f7ff bbd6 	b.w	b4cdc <network_ready>

000b5530 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5530:	2300      	movs	r3, #0
   b5532:	6840      	ldr	r0, [r0, #4]
   b5534:	461a      	mov	r2, r3
   b5536:	4619      	mov	r1, r3
   b5538:	f7ff bbd8 	b.w	b4cec <network_on>

000b553c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b553c:	2300      	movs	r3, #0
   b553e:	6840      	ldr	r0, [r0, #4]
   b5540:	461a      	mov	r2, r3
   b5542:	4619      	mov	r1, r3
   b5544:	f7ff bbda 	b.w	b4cfc <network_off>

000b5548 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5548:	6840      	ldr	r0, [r0, #4]
   b554a:	2100      	movs	r1, #0
   b554c:	f7ff bbfe 	b.w	b4d4c <network_is_on>

000b5550 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5550:	6840      	ldr	r0, [r0, #4]
   b5552:	2100      	movs	r1, #0
   b5554:	f7ff bc02 	b.w	b4d5c <network_is_off>

000b5558 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5558:	6840      	ldr	r0, [r0, #4]
   b555a:	2200      	movs	r2, #0
   b555c:	f081 0101 	eor.w	r1, r1, #1
   b5560:	f7ff bbd4 	b.w	b4d0c <network_listen>

000b5564 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5564:	6840      	ldr	r0, [r0, #4]
   b5566:	2200      	movs	r2, #0
   b5568:	f7ff bbe0 	b.w	b4d2c <network_set_listen_timeout>

000b556c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b556c:	2200      	movs	r2, #0
   b556e:	6840      	ldr	r0, [r0, #4]
   b5570:	4611      	mov	r1, r2
   b5572:	f7ff bbe3 	b.w	b4d3c <network_get_listen_timeout>

000b5576 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5576:	2200      	movs	r2, #0
   b5578:	6840      	ldr	r0, [r0, #4]
   b557a:	4611      	mov	r1, r2
   b557c:	f7ff bbce 	b.w	b4d1c <network_listening>

000b5580 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5584:	b095      	sub	sp, #84	; 0x54
   b5586:	4614      	mov	r4, r2
   b5588:	460d      	mov	r5, r1
   b558a:	4607      	mov	r7, r0
    IPAddress addr;
   b558c:	f7ff fdfa 	bl	b5184 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5590:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5592:	221c      	movs	r2, #28
   b5594:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5596:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5598:	f000 f98e 	bl	b58b8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b559c:	2340      	movs	r3, #64	; 0x40
   b559e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b55a0:	4620      	mov	r0, r4
   b55a2:	466b      	mov	r3, sp
   b55a4:	aa0c      	add	r2, sp, #48	; 0x30
   b55a6:	2100      	movs	r1, #0
   b55a8:	f7ff fa24 	bl	b49f4 <netdb_getaddrinfo>
    if (!r) {
   b55ac:	4604      	mov	r4, r0
   b55ae:	2800      	cmp	r0, #0
   b55b0:	d14b      	bne.n	b564a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b55b2:	4602      	mov	r2, r0
   b55b4:	2101      	movs	r1, #1
   b55b6:	6868      	ldr	r0, [r5, #4]
   b55b8:	f7ff fb90 	bl	b4cdc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b55bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b55be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b55c0:	4622      	mov	r2, r4
   b55c2:	6868      	ldr	r0, [r5, #4]
   b55c4:	f7ff fb8a 	bl	b4cdc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b55c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b55ca:	4681      	mov	r9, r0
        bool ok = false;
   b55cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b55ce:	2e00      	cmp	r6, #0
   b55d0:	d03b      	beq.n	b564a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b55d2:	2900      	cmp	r1, #0
   b55d4:	d139      	bne.n	b564a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b55d6:	6873      	ldr	r3, [r6, #4]
   b55d8:	2b02      	cmp	r3, #2
   b55da:	d003      	beq.n	b55e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b55dc:	2b0a      	cmp	r3, #10
   b55de:	d011      	beq.n	b5604 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b55e0:	69f6      	ldr	r6, [r6, #28]
   b55e2:	e7f4      	b.n	b55ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b55e4:	f1b8 0f00 	cmp.w	r8, #0
   b55e8:	d0fa      	beq.n	b55e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b55ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b55ec:	a806      	add	r0, sp, #24
   b55ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b55f0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b55f2:	f7ff fdf5 	bl	b51e0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b55f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55f8:	1d3c      	adds	r4, r7, #4
   b55fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55fc:	682b      	ldr	r3, [r5, #0]
   b55fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5600:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5602:	e7ed      	b.n	b55e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5604:	f1b9 0f00 	cmp.w	r9, #0
   b5608:	d0ea      	beq.n	b55e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b560a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b560c:	2210      	movs	r2, #16
   b560e:	a801      	add	r0, sp, #4
   b5610:	f000 f952 	bl	b58b8 <memset>
                    a.v = 6;
   b5614:	2306      	movs	r3, #6
   b5616:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b561a:	ad01      	add	r5, sp, #4
   b561c:	f104 0308 	add.w	r3, r4, #8
   b5620:	3418      	adds	r4, #24
   b5622:	6818      	ldr	r0, [r3, #0]
   b5624:	6859      	ldr	r1, [r3, #4]
   b5626:	462a      	mov	r2, r5
   b5628:	c203      	stmia	r2!, {r0, r1}
   b562a:	3308      	adds	r3, #8
   b562c:	42a3      	cmp	r3, r4
   b562e:	4615      	mov	r5, r2
   b5630:	d1f7      	bne.n	b5622 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5632:	a901      	add	r1, sp, #4
   b5634:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5636:	ad07      	add	r5, sp, #28
   b5638:	f7ff fdb2 	bl	b51a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b563c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b563e:	1d3c      	adds	r4, r7, #4
   b5640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5642:	682b      	ldr	r3, [r5, #0]
   b5644:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5646:	4649      	mov	r1, r9
   b5648:	e7ca      	b.n	b55e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b564a:	9800      	ldr	r0, [sp, #0]
   b564c:	f7ff f9ca 	bl	b49e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5650:	4638      	mov	r0, r7
   b5652:	b015      	add	sp, #84	; 0x54
   b5654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5658 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5658:	4b02      	ldr	r3, [pc, #8]	; (b5664 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b565a:	4a03      	ldr	r2, [pc, #12]	; (b5668 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b565c:	601a      	str	r2, [r3, #0]
   b565e:	2200      	movs	r2, #0
   b5660:	605a      	str	r2, [r3, #4]

} // spark
   b5662:	4770      	bx	lr
   b5664:	2003e70c 	.word	0x2003e70c
   b5668:	000b5c38 	.word	0x000b5c38

000b566c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b566c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b566e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5670:	d902      	bls.n	b5678 <pinAvailable+0xc>
    return false;
   b5672:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5674:	b002      	add	sp, #8
   b5676:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5678:	f1a0 030b 	sub.w	r3, r0, #11
   b567c:	2b02      	cmp	r3, #2
   b567e:	d81a      	bhi.n	b56b6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5680:	4c17      	ldr	r4, [pc, #92]	; (b56e0 <pinAvailable+0x74>)
   b5682:	7821      	ldrb	r1, [r4, #0]
   b5684:	f3bf 8f5b 	dmb	ish
   b5688:	f011 0101 	ands.w	r1, r1, #1
   b568c:	d10b      	bne.n	b56a6 <pinAvailable+0x3a>
   b568e:	4620      	mov	r0, r4
   b5690:	9101      	str	r1, [sp, #4]
   b5692:	f7fe fd02 	bl	b409a <__cxa_guard_acquire>
   b5696:	9901      	ldr	r1, [sp, #4]
   b5698:	b128      	cbz	r0, b56a6 <pinAvailable+0x3a>
   b569a:	4812      	ldr	r0, [pc, #72]	; (b56e4 <pinAvailable+0x78>)
   b569c:	f7ff fbd4 	bl	b4e48 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b56a0:	4620      	mov	r0, r4
   b56a2:	f7fe fcff 	bl	b40a4 <__cxa_guard_release>
   b56a6:	4b0f      	ldr	r3, [pc, #60]	; (b56e4 <pinAvailable+0x78>)
   b56a8:	7818      	ldrb	r0, [r3, #0]
   b56aa:	f7ff faab 	bl	b4c04 <hal_spi_is_enabled>
   b56ae:	2800      	cmp	r0, #0
   b56b0:	d1df      	bne.n	b5672 <pinAvailable+0x6>
  return true; // 'pin' is available
   b56b2:	2001      	movs	r0, #1
   b56b4:	e7de      	b.n	b5674 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b56b6:	2801      	cmp	r0, #1
   b56b8:	d809      	bhi.n	b56ce <pinAvailable+0x62>
   b56ba:	f000 f8c3 	bl	b5844 <_Z19__fetch_global_Wirev>
   b56be:	2100      	movs	r1, #0
   b56c0:	7c00      	ldrb	r0, [r0, #16]
   b56c2:	f7ff fa7f 	bl	b4bc4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b56c6:	f080 0001 	eor.w	r0, r0, #1
   b56ca:	b2c0      	uxtb	r0, r0
   b56cc:	e7d2      	b.n	b5674 <pinAvailable+0x8>
   b56ce:	3809      	subs	r0, #9
   b56d0:	2801      	cmp	r0, #1
   b56d2:	d8ee      	bhi.n	b56b2 <pinAvailable+0x46>
   b56d4:	f000 f864 	bl	b57a0 <_Z22__fetch_global_Serial1v>
   b56d8:	7c00      	ldrb	r0, [r0, #16]
   b56da:	f7ff fa1b 	bl	b4b14 <hal_usart_is_enabled>
   b56de:	e7f2      	b.n	b56c6 <pinAvailable+0x5a>
   b56e0:	2003e714 	.word	0x2003e714
   b56e4:	2003e718 	.word	0x2003e718

000b56e8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b56e8:	2823      	cmp	r0, #35	; 0x23
{
   b56ea:	b538      	push	{r3, r4, r5, lr}
   b56ec:	4604      	mov	r4, r0
   b56ee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b56f0:	d80a      	bhi.n	b5708 <pinMode+0x20>
   b56f2:	29ff      	cmp	r1, #255	; 0xff
   b56f4:	d008      	beq.n	b5708 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b56f6:	f7ff ffb9 	bl	b566c <pinAvailable>
   b56fa:	b128      	cbz	r0, b5708 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b56fc:	4629      	mov	r1, r5
   b56fe:	4620      	mov	r0, r4
}
   b5700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5704:	f7ff b986 	b.w	b4a14 <HAL_Pin_Mode>
}
   b5708:	bd38      	pop	{r3, r4, r5, pc}

000b570a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b570a:	b538      	push	{r3, r4, r5, lr}
   b570c:	4604      	mov	r4, r0
   b570e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5710:	f7ff f988 	bl	b4a24 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5714:	28ff      	cmp	r0, #255	; 0xff
   b5716:	d010      	beq.n	b573a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5718:	2806      	cmp	r0, #6
   b571a:	d804      	bhi.n	b5726 <digitalWrite+0x1c>
   b571c:	234d      	movs	r3, #77	; 0x4d
   b571e:	fa23 f000 	lsr.w	r0, r3, r0
   b5722:	07c3      	lsls	r3, r0, #31
   b5724:	d409      	bmi.n	b573a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5726:	4620      	mov	r0, r4
   b5728:	f7ff ffa0 	bl	b566c <pinAvailable>
   b572c:	b128      	cbz	r0, b573a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b572e:	4629      	mov	r1, r5
   b5730:	4620      	mov	r0, r4
}
   b5732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5736:	f7ff b97d 	b.w	b4a34 <HAL_GPIO_Write>
}
   b573a:	bd38      	pop	{r3, r4, r5, pc}

000b573c <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b573c:	280d      	cmp	r0, #13
{
   b573e:	b510      	push	{r4, lr}
   b5740:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5742:	bf9c      	itt	ls
   b5744:	340e      	addls	r4, #14
   b5746:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b5748:	4620      	mov	r0, r4
   b574a:	f7ff ff8f 	bl	b566c <pinAvailable>
   b574e:	b150      	cbz	r0, b5766 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5750:	2103      	movs	r1, #3
   b5752:	4620      	mov	r0, r4
   b5754:	f7ff f956 	bl	b4a04 <HAL_Validate_Pin_Function>
   b5758:	2803      	cmp	r0, #3
   b575a:	d104      	bne.n	b5766 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b575c:	4620      	mov	r0, r4
}
   b575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5762:	f7ff b96f 	b.w	b4a44 <hal_adc_read>
}
   b5766:	2000      	movs	r0, #0
   b5768:	bd10      	pop	{r4, pc}

000b576a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b576a:	4770      	bx	lr

000b576c <_Z20acquireSerial1Bufferv>:
{
   b576c:	b538      	push	{r3, r4, r5, lr}
   b576e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5770:	2514      	movs	r5, #20
   b5772:	462a      	mov	r2, r5
   b5774:	2100      	movs	r1, #0
   b5776:	f000 f89f 	bl	b58b8 <memset>
   b577a:	8025      	strh	r5, [r4, #0]
   b577c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b577e:	4907      	ldr	r1, [pc, #28]	; (b579c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5780:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5782:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5784:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5786:	f000 f881 	bl	b588c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b578a:	4904      	ldr	r1, [pc, #16]	; (b579c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b578c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b578e:	4628      	mov	r0, r5
   b5790:	f000 f87c 	bl	b588c <_ZnajRKSt9nothrow_t>
    };
   b5794:	60e0      	str	r0, [r4, #12]
}
   b5796:	4620      	mov	r0, r4
   b5798:	bd38      	pop	{r3, r4, r5, pc}
   b579a:	bf00      	nop
   b579c:	000b5c6c 	.word	0x000b5c6c

000b57a0 <_Z22__fetch_global_Serial1v>:
{
   b57a0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b57a2:	4d0e      	ldr	r5, [pc, #56]	; (b57dc <_Z22__fetch_global_Serial1v+0x3c>)
   b57a4:	7829      	ldrb	r1, [r5, #0]
   b57a6:	f3bf 8f5b 	dmb	ish
   b57aa:	f011 0401 	ands.w	r4, r1, #1
{
   b57ae:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b57b0:	d111      	bne.n	b57d6 <_Z22__fetch_global_Serial1v+0x36>
   b57b2:	4628      	mov	r0, r5
   b57b4:	f7fe fc71 	bl	b409a <__cxa_guard_acquire>
   b57b8:	b168      	cbz	r0, b57d6 <_Z22__fetch_global_Serial1v+0x36>
   b57ba:	a801      	add	r0, sp, #4
   b57bc:	f7ff ffd6 	bl	b576c <_Z20acquireSerial1Bufferv>
   b57c0:	aa01      	add	r2, sp, #4
   b57c2:	4621      	mov	r1, r4
   b57c4:	4806      	ldr	r0, [pc, #24]	; (b57e0 <_Z22__fetch_global_Serial1v+0x40>)
   b57c6:	f7ff fdd9 	bl	b537c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b57ca:	4628      	mov	r0, r5
   b57cc:	f7fe fc6a 	bl	b40a4 <__cxa_guard_release>
   b57d0:	4804      	ldr	r0, [pc, #16]	; (b57e4 <_Z22__fetch_global_Serial1v+0x44>)
   b57d2:	f000 f85d 	bl	b5890 <atexit>
    return serial1;
}
   b57d6:	4802      	ldr	r0, [pc, #8]	; (b57e0 <_Z22__fetch_global_Serial1v+0x40>)
   b57d8:	b007      	add	sp, #28
   b57da:	bd30      	pop	{r4, r5, pc}
   b57dc:	2003e720 	.word	0x2003e720
   b57e0:	2003e724 	.word	0x2003e724
   b57e4:	000b576b 	.word	0x000b576b

000b57e8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b57e8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b57ea:	4c08      	ldr	r4, [pc, #32]	; (b580c <_Z21__fetch_global_EEPROMv+0x24>)
   b57ec:	7823      	ldrb	r3, [r4, #0]
   b57ee:	f3bf 8f5b 	dmb	ish
   b57f2:	07db      	lsls	r3, r3, #31
   b57f4:	d408      	bmi.n	b5808 <_Z21__fetch_global_EEPROMv+0x20>
   b57f6:	4620      	mov	r0, r4
   b57f8:	f7fe fc4f 	bl	b409a <__cxa_guard_acquire>
   b57fc:	b120      	cbz	r0, b5808 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b57fe:	f7ff f939 	bl	b4a74 <HAL_EEPROM_Init>
   b5802:	4620      	mov	r0, r4
   b5804:	f7fe fc4e 	bl	b40a4 <__cxa_guard_release>
	return eeprom;
}
   b5808:	4801      	ldr	r0, [pc, #4]	; (b5810 <_Z21__fetch_global_EEPROMv+0x28>)
   b580a:	bd10      	pop	{r4, pc}
   b580c:	2003e73c 	.word	0x2003e73c
   b5810:	2003e740 	.word	0x2003e740

000b5814 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5814:	4770      	bx	lr
	...

000b5818 <_Z17acquireWireBufferv>:
{
   b5818:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b581a:	2520      	movs	r5, #32
   b581c:	2314      	movs	r3, #20
{
   b581e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5820:	6003      	str	r3, [r0, #0]
   b5822:	6085      	str	r5, [r0, #8]
   b5824:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5826:	4906      	ldr	r1, [pc, #24]	; (b5840 <_Z17acquireWireBufferv+0x28>)
   b5828:	4628      	mov	r0, r5
   b582a:	f000 f82f 	bl	b588c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b582e:	4904      	ldr	r1, [pc, #16]	; (b5840 <_Z17acquireWireBufferv+0x28>)
	};
   b5830:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5832:	4628      	mov	r0, r5
   b5834:	f000 f82a 	bl	b588c <_ZnajRKSt9nothrow_t>
	};
   b5838:	60e0      	str	r0, [r4, #12]
}
   b583a:	4620      	mov	r0, r4
   b583c:	bd38      	pop	{r3, r4, r5, pc}
   b583e:	bf00      	nop
   b5840:	000b5c6c 	.word	0x000b5c6c

000b5844 <_Z19__fetch_global_Wirev>:
{
   b5844:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5846:	4d0e      	ldr	r5, [pc, #56]	; (b5880 <_Z19__fetch_global_Wirev+0x3c>)
   b5848:	7829      	ldrb	r1, [r5, #0]
   b584a:	f3bf 8f5b 	dmb	ish
   b584e:	f011 0401 	ands.w	r4, r1, #1
{
   b5852:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5854:	d111      	bne.n	b587a <_Z19__fetch_global_Wirev+0x36>
   b5856:	4628      	mov	r0, r5
   b5858:	f7fe fc1f 	bl	b409a <__cxa_guard_acquire>
   b585c:	b168      	cbz	r0, b587a <_Z19__fetch_global_Wirev+0x36>
   b585e:	a801      	add	r0, sp, #4
   b5860:	f7ff ffda 	bl	b5818 <_Z17acquireWireBufferv>
   b5864:	aa01      	add	r2, sp, #4
   b5866:	4621      	mov	r1, r4
   b5868:	4806      	ldr	r0, [pc, #24]	; (b5884 <_Z19__fetch_global_Wirev+0x40>)
   b586a:	f7ff fdc7 	bl	b53fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b586e:	4628      	mov	r0, r5
   b5870:	f7fe fc18 	bl	b40a4 <__cxa_guard_release>
   b5874:	4804      	ldr	r0, [pc, #16]	; (b5888 <_Z19__fetch_global_Wirev+0x44>)
   b5876:	f000 f80b 	bl	b5890 <atexit>
	return wire;
}
   b587a:	4802      	ldr	r0, [pc, #8]	; (b5884 <_Z19__fetch_global_Wirev+0x40>)
   b587c:	b007      	add	sp, #28
   b587e:	bd30      	pop	{r4, r5, pc}
   b5880:	2003e744 	.word	0x2003e744
   b5884:	2003e748 	.word	0x2003e748
   b5888:	000b5815 	.word	0x000b5815

000b588c <_ZnajRKSt9nothrow_t>:
   b588c:	f7fe bc01 	b.w	b4092 <_Znaj>

000b5890 <atexit>:
   b5890:	2300      	movs	r3, #0
   b5892:	4601      	mov	r1, r0
   b5894:	461a      	mov	r2, r3
   b5896:	4618      	mov	r0, r3
   b5898:	f000 b84c 	b.w	b5934 <__register_exitproc>

000b589c <memcpy>:
   b589c:	440a      	add	r2, r1
   b589e:	4291      	cmp	r1, r2
   b58a0:	f100 33ff 	add.w	r3, r0, #4294967295
   b58a4:	d100      	bne.n	b58a8 <memcpy+0xc>
   b58a6:	4770      	bx	lr
   b58a8:	b510      	push	{r4, lr}
   b58aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   b58ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   b58b2:	4291      	cmp	r1, r2
   b58b4:	d1f9      	bne.n	b58aa <memcpy+0xe>
   b58b6:	bd10      	pop	{r4, pc}

000b58b8 <memset>:
   b58b8:	4402      	add	r2, r0
   b58ba:	4603      	mov	r3, r0
   b58bc:	4293      	cmp	r3, r2
   b58be:	d100      	bne.n	b58c2 <memset+0xa>
   b58c0:	4770      	bx	lr
   b58c2:	f803 1b01 	strb.w	r1, [r3], #1
   b58c6:	e7f9      	b.n	b58bc <memset+0x4>

000b58c8 <srand>:
   b58c8:	b538      	push	{r3, r4, r5, lr}
   b58ca:	4b10      	ldr	r3, [pc, #64]	; (b590c <srand+0x44>)
   b58cc:	681d      	ldr	r5, [r3, #0]
   b58ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b58d0:	4604      	mov	r4, r0
   b58d2:	b9b3      	cbnz	r3, b5902 <srand+0x3a>
   b58d4:	2018      	movs	r0, #24
   b58d6:	f7ff fa51 	bl	b4d7c <malloc>
   b58da:	4602      	mov	r2, r0
   b58dc:	63a8      	str	r0, [r5, #56]	; 0x38
   b58de:	b920      	cbnz	r0, b58ea <srand+0x22>
   b58e0:	4b0b      	ldr	r3, [pc, #44]	; (b5910 <srand+0x48>)
   b58e2:	480c      	ldr	r0, [pc, #48]	; (b5914 <srand+0x4c>)
   b58e4:	2142      	movs	r1, #66	; 0x42
   b58e6:	f7ff fa61 	bl	b4dac <__assert_func>
   b58ea:	490b      	ldr	r1, [pc, #44]	; (b5918 <srand+0x50>)
   b58ec:	4b0b      	ldr	r3, [pc, #44]	; (b591c <srand+0x54>)
   b58ee:	e9c0 1300 	strd	r1, r3, [r0]
   b58f2:	4b0b      	ldr	r3, [pc, #44]	; (b5920 <srand+0x58>)
   b58f4:	6083      	str	r3, [r0, #8]
   b58f6:	230b      	movs	r3, #11
   b58f8:	8183      	strh	r3, [r0, #12]
   b58fa:	2100      	movs	r1, #0
   b58fc:	2001      	movs	r0, #1
   b58fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5902:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5904:	2200      	movs	r2, #0
   b5906:	611c      	str	r4, [r3, #16]
   b5908:	615a      	str	r2, [r3, #20]
   b590a:	bd38      	pop	{r3, r4, r5, pc}
   b590c:	2003e5f4 	.word	0x2003e5f4
   b5910:	000b5c6d 	.word	0x000b5c6d
   b5914:	000b5c84 	.word	0x000b5c84
   b5918:	abcd330e 	.word	0xabcd330e
   b591c:	e66d1234 	.word	0xe66d1234
   b5920:	0005deec 	.word	0x0005deec

000b5924 <strlen>:
   b5924:	4603      	mov	r3, r0
   b5926:	f813 2b01 	ldrb.w	r2, [r3], #1
   b592a:	2a00      	cmp	r2, #0
   b592c:	d1fb      	bne.n	b5926 <strlen+0x2>
   b592e:	1a18      	subs	r0, r3, r0
   b5930:	3801      	subs	r0, #1
   b5932:	4770      	bx	lr

000b5934 <__register_exitproc>:
   b5934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5938:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b59f4 <__register_exitproc+0xc0>
   b593c:	4606      	mov	r6, r0
   b593e:	f8d8 0000 	ldr.w	r0, [r8]
   b5942:	461f      	mov	r7, r3
   b5944:	460d      	mov	r5, r1
   b5946:	4691      	mov	r9, r2
   b5948:	f000 f856 	bl	b59f8 <__retarget_lock_acquire_recursive>
   b594c:	4b25      	ldr	r3, [pc, #148]	; (b59e4 <__register_exitproc+0xb0>)
   b594e:	681c      	ldr	r4, [r3, #0]
   b5950:	b934      	cbnz	r4, b5960 <__register_exitproc+0x2c>
   b5952:	4c25      	ldr	r4, [pc, #148]	; (b59e8 <__register_exitproc+0xb4>)
   b5954:	601c      	str	r4, [r3, #0]
   b5956:	4b25      	ldr	r3, [pc, #148]	; (b59ec <__register_exitproc+0xb8>)
   b5958:	b113      	cbz	r3, b5960 <__register_exitproc+0x2c>
   b595a:	681b      	ldr	r3, [r3, #0]
   b595c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5960:	6863      	ldr	r3, [r4, #4]
   b5962:	2b1f      	cmp	r3, #31
   b5964:	dd07      	ble.n	b5976 <__register_exitproc+0x42>
   b5966:	f8d8 0000 	ldr.w	r0, [r8]
   b596a:	f000 f847 	bl	b59fc <__retarget_lock_release_recursive>
   b596e:	f04f 30ff 	mov.w	r0, #4294967295
   b5972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5976:	b34e      	cbz	r6, b59cc <__register_exitproc+0x98>
   b5978:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b597c:	b988      	cbnz	r0, b59a2 <__register_exitproc+0x6e>
   b597e:	4b1c      	ldr	r3, [pc, #112]	; (b59f0 <__register_exitproc+0xbc>)
   b5980:	b923      	cbnz	r3, b598c <__register_exitproc+0x58>
   b5982:	f8d8 0000 	ldr.w	r0, [r8]
   b5986:	f000 f838 	bl	b59fa <__retarget_lock_release>
   b598a:	e7f0      	b.n	b596e <__register_exitproc+0x3a>
   b598c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5990:	f7ff f9f4 	bl	b4d7c <malloc>
   b5994:	2800      	cmp	r0, #0
   b5996:	d0f4      	beq.n	b5982 <__register_exitproc+0x4e>
   b5998:	2300      	movs	r3, #0
   b599a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b599e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b59a2:	6863      	ldr	r3, [r4, #4]
   b59a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b59a8:	2201      	movs	r2, #1
   b59aa:	409a      	lsls	r2, r3
   b59ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b59b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b59b4:	4313      	orrs	r3, r2
   b59b6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b59ba:	2e02      	cmp	r6, #2
   b59bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b59c0:	bf02      	ittt	eq
   b59c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b59c6:	4313      	orreq	r3, r2
   b59c8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b59cc:	6863      	ldr	r3, [r4, #4]
   b59ce:	f8d8 0000 	ldr.w	r0, [r8]
   b59d2:	1c5a      	adds	r2, r3, #1
   b59d4:	3302      	adds	r3, #2
   b59d6:	6062      	str	r2, [r4, #4]
   b59d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b59dc:	f000 f80e 	bl	b59fc <__retarget_lock_release_recursive>
   b59e0:	2000      	movs	r0, #0
   b59e2:	e7c6      	b.n	b5972 <__register_exitproc+0x3e>
   b59e4:	2003e7e8 	.word	0x2003e7e8
   b59e8:	2003e75c 	.word	0x2003e75c
   b59ec:	00000000 	.word	0x00000000
   b59f0:	000b4d7d 	.word	0x000b4d7d
   b59f4:	2003e658 	.word	0x2003e658

000b59f8 <__retarget_lock_acquire_recursive>:
   b59f8:	4770      	bx	lr

000b59fa <__retarget_lock_release>:
   b59fa:	4770      	bx	lr

000b59fc <__retarget_lock_release_recursive>:
   b59fc:	4770      	bx	lr

000b59fe <link_code_end>:
	...

000b5a00 <dynalib_user>:
   b5a00:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5a10:	0000 0000 754d 746c 7069 656c 6578 2e72     ....Multiplexer.
   b5a20:	6573 2874 2029 203e 6176 756c 2065 756d     set() > value mu
   b5a30:	7473 6220 2065 6e69 7420 6568 7220 6e61     st be in the ran
   b5a40:	6567 6f20 2066 2e30 2e2e 3531 202c 6176     ge of 0...15, va
   b5a50:	756c 2065 203d 6425 000a 6542 7473 6320     lue = %d..Best c
   b5a60:	6c6f 656c 7463 6f69 206e 7369 2520 0a64     ollection is %d.
   b5a70:	4200 6765 6e69 696e 676e 7720 7069 0a65     .Beginning wipe.
   b5a80:	5700 7069 6465 2520 2f64 6425 000a 6957     .Wiped %d/%d..Wi
   b5a90:	6570 6320 6d6f 6c70 7465 6465 000a 7250     pe completed..Pr
   b5aa0:	676f 6172 6d6d 6465 6620 6e69 6567 2072     ogrammed finger 
   b5ab0:	6f70 2073 7825 000a 6e55 6e6b 776f 206e     pos %x..Unknown 
   b5ac0:	6f63 6d6d 6e61 0a64 4100 6464 6465 0020     command..Added .
   b5ad0:	6425 2000 6f74 6320 7275 6144 6174 000a     %d. to curData..
   b5ae0:	504d 3655 3530 2030 203e 6e45 6261 696c     MPU6050 > Enabli
   b5af0:	676e 5720 7269 0a65 0000 0000               ng Wire.....

000b5afc <_ZTVN5spark13EthernetClassE>:
	...
   b5b04:	4e2b 000b 4e21 000b 4e17 000b 4e0d 000b     +N..!N...N...N..
   b5b14:	4e01 000b 4df5 000b 5549 000b 5551 000b     .N...M..IU..QU..
   b5b24:	4de9 000b 4de1 000b 4dd7 000b 4dcd 000b     .M...M...M...M..
   b5b34:	5581 000b 7061 0070 5925 252d 2d6d 6425     .U..app.%Y-%m-%d
   b5b44:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5b54:	6d69 0065                                   ime.

000b5b58 <_ZTV9IPAddress>:
	...
   b5b60:	5121 000b 5111 000b 5113 000b               !Q...Q...Q..

000b5b6c <_ZTV9USBSerial>:
	...
   b5b74:	5207 000b 526f 000b 5245 000b 4e91 000b     .R..oR..ER...N..
   b5b84:	5237 000b 5209 000b 5219 000b 5269 000b     7R...R...R..iR..
   b5b94:	5229 000b 5201 000b                         )R...R..

000b5b9c <_ZTV11USARTSerial>:
	...
   b5ba4:	5301 000b 536d 000b 5345 000b 4e91 000b     .S..mS..ES...N..
   b5bb4:	5315 000b 5331 000b 5323 000b 533f 000b     .S..1S..#S..?S..
   b5bc4:	5303 000b 5307 000b                         .S...S..

000b5bcc <_ZTV7TwoWire>:
	...
   b5bd4:	53a5 000b 53ef 000b 53c7 000b 53a7 000b     .S...S...S...S..
   b5be4:	53cf 000b 53d7 000b 53df 000b 53e7 000b     .S...S...S...S..

000b5bf4 <_ZTVN5spark9WiFiClassE>:
	...
   b5bfc:	54e9 000b 54df 000b 54d5 000b 5497 000b     .T...T...T...T..
   b5c0c:	4f9d 000b 54c9 000b 5549 000b 5551 000b     .O...T..IU..QU..
   b5c1c:	54bd 000b 54b5 000b 54ab 000b 54a1 000b     .T...T...T...T..
   b5c2c:	5581 000b                                   .U..

000b5c30 <_ZTVN5spark12NetworkClassE>:
	...
   b5c38:	5509 000b 5513 000b 551d 000b 5527 000b     .U...U...U..'U..
   b5c48:	5531 000b 553d 000b 5549 000b 5551 000b     1U..=U..IU..QU..
   b5c58:	5559 000b 5565 000b 556d 000b 5577 000b     YU..eU..mU..wU..
   b5c68:	5581 000b                                   .U..

000b5c6c <_ZSt7nothrow>:
   b5c6c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5c7c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5c8c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5c9c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5cac:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5cbc:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5ccc:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5cdc:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5cec:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5cfc:	646e 632e                                    nd.c.

000b5d01 <link_const_variable_data_end>:
   b5d01:	00          	.byte	0x00
	...

000b5d04 <link_constructors_location>:
   b5d04:	000b4791 	.word	0x000b4791
   b5d08:	000b4e35 	.word	0x000b4e35
   b5d0c:	000b4e5d 	.word	0x000b4e5d
   b5d10:	000b4e81 	.word	0x000b4e81
   b5d14:	000b4fa9 	.word	0x000b4fa9
   b5d18:	000b4fb9 	.word	0x000b4fb9
   b5d1c:	000b4fcd 	.word	0x000b4fcd
   b5d20:	000b54f5 	.word	0x000b54f5
   b5d24:	000b5659 	.word	0x000b5659

000b5d28 <link_constructors_end>:
	...
