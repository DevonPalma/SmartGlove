
c:/Users/deedp/Documents/IOT/SmartGlove/FinalCode/target/3.2.0/argon/FinalCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001814  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b5830  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e624  000b5834  0001e624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000160  2003e690  2003e690  0002e690  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b58a0  000b58a0  000258a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b58c8  000b58c8  000258c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00100cd8  00000000  00000000  000258cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000114bf  00000000  00000000  001265a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00035423  00000000  00000000  00137a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002950  00000000  00000000  0016ce86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000098c0  00000000  00000000  0016f7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000359fd  00000000  00000000  00179096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00037d96  00000000  00000000  001aea93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00124433  00000000  00000000  001e6829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000747c  00000000  00000000  0030ac5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 f9c3 	bl	b53b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 f9cb 	bl	b53d4 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e624 	.word	0x2003e624
   b4048:	000b5834 	.word	0x000b5834
   b404c:	2003e690 	.word	0x2003e690
   b4050:	2003e690 	.word	0x2003e690
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fe05 	bl	b4c6c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5804 	.word	0x000b5804
   b407c:	000b5828 	.word	0x000b5828

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8f0 	b.w	b4264 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f93f 	bl	b4308 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bda5 	b.w	b4bdc <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 bb8b 	b.w	b47ac <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bb91 	b.w	b47bc <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40aa:	b40e      	push	{r1, r2, r3}
   b40ac:	b503      	push	{r0, r1, lr}
   b40ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40b8:	f000 fcf5 	bl	b4aa6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40bc:	b002      	add	sp, #8
   b40be:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c2:	b003      	add	sp, #12
   b40c4:	4770      	bx	lr
	...

000b40c8 <_ZN11Multiplexer3setEh>:
    void disable() {
        digitalWrite(en, HIGH);
    }

    void set(byte index) {
        if (index < 0 || index > 15) {
   b40c8:	290f      	cmp	r1, #15
    void set(byte index) {
   b40ca:	b538      	push	{r3, r4, r5, lr}
   b40cc:	4605      	mov	r5, r0
   b40ce:	460c      	mov	r4, r1
        if (index < 0 || index > 15) {
   b40d0:	d906      	bls.n	b40e0 <_ZN11Multiplexer3setEh+0x18>
            Serial.printf("Multiplexer.set() > value must be in the range of 0...15, value = %d\n", index);
   b40d2:	f000 fecf 	bl	b4e74 <_Z16_fetch_usbserialv>
   b40d6:	490d      	ldr	r1, [pc, #52]	; (b410c <_ZN11Multiplexer3setEh+0x44>)
   b40d8:	4622      	mov	r2, r4
   b40da:	f7ff ffe6 	bl	b40aa <_ZN5Print6printfEPKcz>

        digitalWrite(s0, (index & 0x1) >> 0);
        digitalWrite(s1, (index & 0x2) >> 1);
        digitalWrite(s2, (index & 0x4) >> 2);
        digitalWrite(s3, (index & 0x8) >> 3);
    }
   b40de:	bd38      	pop	{r3, r4, r5, pc}
        digitalWrite(s0, (index & 0x1) >> 0);
   b40e0:	7840      	ldrb	r0, [r0, #1]
   b40e2:	f001 0101 	and.w	r1, r1, #1
   b40e6:	f001 f8b4 	bl	b5252 <digitalWrite>
        digitalWrite(s1, (index & 0x2) >> 1);
   b40ea:	78a8      	ldrb	r0, [r5, #2]
   b40ec:	f3c4 0140 	ubfx	r1, r4, #1, #1
   b40f0:	f001 f8af 	bl	b5252 <digitalWrite>
        digitalWrite(s2, (index & 0x4) >> 2);
   b40f4:	78e8      	ldrb	r0, [r5, #3]
   b40f6:	f3c4 0180 	ubfx	r1, r4, #2, #1
   b40fa:	f001 f8aa 	bl	b5252 <digitalWrite>
        digitalWrite(s3, (index & 0x8) >> 3);
   b40fe:	7928      	ldrb	r0, [r5, #4]
   b4100:	08e1      	lsrs	r1, r4, #3
    }
   b4102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(s3, (index & 0x8) >> 3);
   b4106:	f001 b8a4 	b.w	b5252 <digitalWrite>
   b410a:	bf00      	nop
   b410c:	000b5554 	.word	0x000b5554

000b4110 <_ZN11Multiplexer4readEh>:

    int read(byte index) {
   b4110:	b538      	push	{r3, r4, r5, lr}
   b4112:	4604      	mov	r4, r0
        set(index);
   b4114:	f7ff ffd8 	bl	b40c8 <_ZN11Multiplexer3setEh>
        digitalWrite(en, LOW);
   b4118:	7820      	ldrb	r0, [r4, #0]
   b411a:	2100      	movs	r1, #0
   b411c:	f001 f899 	bl	b5252 <digitalWrite>
        return read();
    }

    int read() {
        enable();
        int val = analogRead(sig);
   b4120:	7960      	ldrb	r0, [r4, #5]
   b4122:	f001 f8af 	bl	b5284 <analogRead>
        digitalWrite(en, HIGH);
   b4126:	2101      	movs	r1, #1
        int val = analogRead(sig);
   b4128:	4605      	mov	r5, r0
        digitalWrite(en, HIGH);
   b412a:	7820      	ldrb	r0, [r4, #0]
   b412c:	f001 f891 	bl	b5252 <digitalWrite>
    }
   b4130:	4628      	mov	r0, r5
   b4132:	bd38      	pop	{r3, r4, r5, pc}

000b4134 <_ZN21MultiplexerCollectionC1EP11Multiplexer>:
    // This results in a simple range conversion of [VAL * (2^8/2^12)] or [VAL / 2^4] or [VAL/16]
    // Fingers range now between 0-255

    MultiplexerCollection() {}
    
    MultiplexerCollection(Multiplexer *mulp) {
   b4134:	b538      	push	{r3, r4, r5, lr}
   b4136:	460d      	mov	r5, r1
   b4138:	4604      	mov	r4, r0
        thumb = mulp->read(M_THUMB) / 16; 
   b413a:	2109      	movs	r1, #9
   b413c:	4628      	mov	r0, r5
   b413e:	f7ff ffe7 	bl	b4110 <_ZN11Multiplexer4readEh>
   b4142:	2800      	cmp	r0, #0
   b4144:	bfb8      	it	lt
   b4146:	300f      	addlt	r0, #15
   b4148:	1100      	asrs	r0, r0, #4
   b414a:	7020      	strb	r0, [r4, #0]
        pointer_high = mulp->read(M_POINTER_HIGH) / 16;
   b414c:	2108      	movs	r1, #8
   b414e:	4628      	mov	r0, r5
   b4150:	f7ff ffde 	bl	b4110 <_ZN11Multiplexer4readEh>
   b4154:	2800      	cmp	r0, #0
   b4156:	bfb8      	it	lt
   b4158:	300f      	addlt	r0, #15
   b415a:	1100      	asrs	r0, r0, #4
   b415c:	7060      	strb	r0, [r4, #1]
        pointer_low = mulp->read(M_POINTER_LOW) / 16;
   b415e:	2107      	movs	r1, #7
   b4160:	4628      	mov	r0, r5
   b4162:	f7ff ffd5 	bl	b4110 <_ZN11Multiplexer4readEh>
   b4166:	2800      	cmp	r0, #0
   b4168:	bfb8      	it	lt
   b416a:	300f      	addlt	r0, #15
   b416c:	1100      	asrs	r0, r0, #4
   b416e:	70a0      	strb	r0, [r4, #2]
        middle_high = mulp->read(M_MIDDLE_HIGH) / 16;
   b4170:	210c      	movs	r1, #12
   b4172:	4628      	mov	r0, r5
   b4174:	f7ff ffcc 	bl	b4110 <_ZN11Multiplexer4readEh>
   b4178:	2800      	cmp	r0, #0
   b417a:	bfb8      	it	lt
   b417c:	300f      	addlt	r0, #15
   b417e:	1100      	asrs	r0, r0, #4
   b4180:	70e0      	strb	r0, [r4, #3]
        middle_low = mulp->read(M_MIDDLE_LOW) / 16;
   b4182:	210d      	movs	r1, #13
   b4184:	4628      	mov	r0, r5
   b4186:	f7ff ffc3 	bl	b4110 <_ZN11Multiplexer4readEh>
   b418a:	2800      	cmp	r0, #0
   b418c:	bfb8      	it	lt
   b418e:	300f      	addlt	r0, #15
   b4190:	1100      	asrs	r0, r0, #4
   b4192:	7120      	strb	r0, [r4, #4]
        ring_high = mulp->read(M_RING_HIGH) / 16;
   b4194:	210a      	movs	r1, #10
   b4196:	4628      	mov	r0, r5
   b4198:	f7ff ffba 	bl	b4110 <_ZN11Multiplexer4readEh>
   b419c:	2800      	cmp	r0, #0
   b419e:	bfb8      	it	lt
   b41a0:	300f      	addlt	r0, #15
   b41a2:	1100      	asrs	r0, r0, #4
   b41a4:	7160      	strb	r0, [r4, #5]
        ring_low = mulp->read(M_RING_LOW) / 16;
   b41a6:	210b      	movs	r1, #11
   b41a8:	4628      	mov	r0, r5
   b41aa:	f7ff ffb1 	bl	b4110 <_ZN11Multiplexer4readEh>
   b41ae:	2800      	cmp	r0, #0
   b41b0:	bfb8      	it	lt
   b41b2:	300f      	addlt	r0, #15
   b41b4:	1100      	asrs	r0, r0, #4
   b41b6:	71a0      	strb	r0, [r4, #6]
        pinky_high = mulp->read(M_PINKY_HIGH) / 16;
   b41b8:	210e      	movs	r1, #14
   b41ba:	4628      	mov	r0, r5
   b41bc:	f7ff ffa8 	bl	b4110 <_ZN11Multiplexer4readEh>
   b41c0:	2800      	cmp	r0, #0
   b41c2:	bfb8      	it	lt
   b41c4:	300f      	addlt	r0, #15
   b41c6:	1100      	asrs	r0, r0, #4
   b41c8:	71e0      	strb	r0, [r4, #7]
        pinky_low = mulp->read(M_PINKY_LOW) / 16;
   b41ca:	210f      	movs	r1, #15
   b41cc:	4628      	mov	r0, r5
   b41ce:	f7ff ff9f 	bl	b4110 <_ZN11Multiplexer4readEh>
   b41d2:	2800      	cmp	r0, #0
   b41d4:	bfb8      	it	lt
   b41d6:	300f      	addlt	r0, #15
   b41d8:	1100      	asrs	r0, r0, #4
   b41da:	7220      	strb	r0, [r4, #8]
    }
   b41dc:	4620      	mov	r0, r4
   b41de:	bd38      	pop	{r3, r4, r5, pc}

000b41e0 <_ZN21MultiplexerCollection7compareEPS_>:
        pinky_high = mulpC->pinky_high; 
        pinky_low = mulpC->pinky_low;
    }

    // compares how close a mulp is to another (Sum of differences between each finger)
    int compare(MultiplexerCollection *mulpC) {
   b41e0:	b510      	push	{r4, lr}
        int val = 0;
        val += abs(thumb - mulpC->thumb);
   b41e2:	780b      	ldrb	r3, [r1, #0]
   b41e4:	7802      	ldrb	r2, [r0, #0]
        val += abs(pointer_high - mulpC->pointer_high);
   b41e6:	784c      	ldrb	r4, [r1, #1]
        val += abs(thumb - mulpC->thumb);
   b41e8:	1ad2      	subs	r2, r2, r3
        val += abs(pointer_high - mulpC->pointer_high);
   b41ea:	7843      	ldrb	r3, [r0, #1]
        val += abs(thumb - mulpC->thumb);
   b41ec:	2a00      	cmp	r2, #0
        val += abs(pointer_high - mulpC->pointer_high);
   b41ee:	eba3 0304 	sub.w	r3, r3, r4
        val += abs(thumb - mulpC->thumb);
   b41f2:	bfb8      	it	lt
   b41f4:	4252      	neglt	r2, r2
        val += abs(pointer_high - mulpC->pointer_high);
   b41f6:	2b00      	cmp	r3, #0
   b41f8:	bfb8      	it	lt
   b41fa:	425b      	neglt	r3, r3
        val += abs(pointer_low - mulpC->pointer_low);
   b41fc:	788c      	ldrb	r4, [r1, #2]
        val += abs(pointer_high - mulpC->pointer_high);
   b41fe:	441a      	add	r2, r3
        val += abs(pointer_low - mulpC->pointer_low);
   b4200:	7883      	ldrb	r3, [r0, #2]
   b4202:	1b1b      	subs	r3, r3, r4
   b4204:	2b00      	cmp	r3, #0
   b4206:	bfb8      	it	lt
   b4208:	425b      	neglt	r3, r3
        val += abs(middle_high - mulpC->middle_high);
   b420a:	78cc      	ldrb	r4, [r1, #3]
        val += abs(pointer_low - mulpC->pointer_low);
   b420c:	441a      	add	r2, r3
        val += abs(middle_high - mulpC->middle_high);
   b420e:	78c3      	ldrb	r3, [r0, #3]
   b4210:	1b1b      	subs	r3, r3, r4
   b4212:	2b00      	cmp	r3, #0
   b4214:	bfb8      	it	lt
   b4216:	425b      	neglt	r3, r3
        val += abs(middle_low - mulpC->middle_low);
   b4218:	790c      	ldrb	r4, [r1, #4]
        val += abs(middle_high - mulpC->middle_high);
   b421a:	4413      	add	r3, r2
        val += abs(middle_low - mulpC->middle_low);
   b421c:	7902      	ldrb	r2, [r0, #4]
   b421e:	1b12      	subs	r2, r2, r4
   b4220:	2a00      	cmp	r2, #0
   b4222:	bfb8      	it	lt
   b4224:	4252      	neglt	r2, r2
        val += abs(ring_high - mulpC->ring_high);
   b4226:	794c      	ldrb	r4, [r1, #5]
        val += abs(middle_low - mulpC->middle_low);
   b4228:	4413      	add	r3, r2
        val += abs(ring_high - mulpC->ring_high);
   b422a:	7942      	ldrb	r2, [r0, #5]
   b422c:	1b12      	subs	r2, r2, r4
   b422e:	2a00      	cmp	r2, #0
   b4230:	bfb8      	it	lt
   b4232:	4252      	neglt	r2, r2
        val += abs(ring_low - mulpC->ring_low);
   b4234:	798c      	ldrb	r4, [r1, #6]
        val += abs(ring_high - mulpC->ring_high);
   b4236:	441a      	add	r2, r3
        val += abs(ring_low - mulpC->ring_low);
   b4238:	7983      	ldrb	r3, [r0, #6]
   b423a:	1b1b      	subs	r3, r3, r4
   b423c:	2b00      	cmp	r3, #0
   b423e:	bfb8      	it	lt
   b4240:	425b      	neglt	r3, r3
   b4242:	441a      	add	r2, r3
        val += abs(pinky_high - mulpC->pinky_high);
   b4244:	79cc      	ldrb	r4, [r1, #7]
   b4246:	79c3      	ldrb	r3, [r0, #7]
        val += abs(pinky_low - mulpC->pinky_low);
   b4248:	7a00      	ldrb	r0, [r0, #8]
        val += abs(pinky_high - mulpC->pinky_high);
   b424a:	1b1b      	subs	r3, r3, r4
   b424c:	2b00      	cmp	r3, #0
   b424e:	bfb8      	it	lt
   b4250:	425b      	neglt	r3, r3
   b4252:	4413      	add	r3, r2
        val += abs(pinky_low - mulpC->pinky_low);
   b4254:	7a0a      	ldrb	r2, [r1, #8]
   b4256:	1a80      	subs	r0, r0, r2
   b4258:	2800      	cmp	r0, #0
   b425a:	bfb8      	it	lt
   b425c:	4240      	neglt	r0, r0
        return val;
    }
   b425e:	4418      	add	r0, r3
   b4260:	bd10      	pop	{r4, pc}
	...

000b4264 <setup>:
MultiplexerCollection thumbsUpSign;
bool thumbsUpSignSet = false;

MultiplexerCollection* getBestCollection(MultiplexerCollection* currentCol);

void setup() {
   b4264:	b510      	push	{r4, lr}
        pinMode(en, OUTPUT);
   b4266:	4c11      	ldr	r4, [pc, #68]	; (b42ac <setup+0x48>)
   b4268:	2101      	movs	r1, #1
   b426a:	7820      	ldrb	r0, [r4, #0]
   b426c:	f000 ffe0 	bl	b5230 <pinMode>
        pinMode(s0, OUTPUT);
   b4270:	7860      	ldrb	r0, [r4, #1]
   b4272:	2101      	movs	r1, #1
   b4274:	f000 ffdc 	bl	b5230 <pinMode>
        pinMode(s1, OUTPUT);
   b4278:	78a0      	ldrb	r0, [r4, #2]
   b427a:	2101      	movs	r1, #1
   b427c:	f000 ffd8 	bl	b5230 <pinMode>
        pinMode(s2, OUTPUT);
   b4280:	78e0      	ldrb	r0, [r4, #3]
   b4282:	2101      	movs	r1, #1
   b4284:	f000 ffd4 	bl	b5230 <pinMode>
        pinMode(s3, OUTPUT);
   b4288:	7920      	ldrb	r0, [r4, #4]
   b428a:	2101      	movs	r1, #1
   b428c:	f000 ffd0 	bl	b5230 <pinMode>
        pinMode(sig, INPUT);
   b4290:	7960      	ldrb	r0, [r4, #5]
   b4292:	2100      	movs	r1, #0
   b4294:	f000 ffcc 	bl	b5230 <pinMode>
        set(index);
   b4298:	79a1      	ldrb	r1, [r4, #6]
   b429a:	4620      	mov	r0, r4
   b429c:	f7ff ff14 	bl	b40c8 <_ZN11Multiplexer3setEh>
        digitalWrite(en, HIGH);
   b42a0:	7820      	ldrb	r0, [r4, #0]
   b42a2:	2101      	movs	r1, #1
    myMulp.begin();
}
   b42a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b42a8:	f000 bfd3 	b.w	b5252 <digitalWrite>
   b42ac:	2003e69c 	.word	0x2003e69c

000b42b0 <_Z17getBestCollectionP21MultiplexerCollection>:
            }
        }
    }
}

MultiplexerCollection* getBestCollection(MultiplexerCollection* currentCol) {
   b42b0:	b513      	push	{r0, r1, r4, lr}
    int bestVal = 256*9; // Impossible to get past this with the algorithm i use
    MultiplexerCollection *bestCollection;

    if (peaceSignSet) {
   b42b2:	4b11      	ldr	r3, [pc, #68]	; (b42f8 <_Z17getBestCollectionP21MultiplexerCollection+0x48>)
   b42b4:	781b      	ldrb	r3, [r3, #0]
MultiplexerCollection* getBestCollection(MultiplexerCollection* currentCol) {
   b42b6:	4601      	mov	r1, r0
    if (peaceSignSet) {
   b42b8:	b1c3      	cbz	r3, b42ec <_Z17getBestCollectionP21MultiplexerCollection+0x3c>
        int thisVal = peaceSign.compare(currentCol);
   b42ba:	9001      	str	r0, [sp, #4]
   b42bc:	480f      	ldr	r0, [pc, #60]	; (b42fc <_Z17getBestCollectionP21MultiplexerCollection+0x4c>)
   b42be:	f7ff ff8f 	bl	b41e0 <_ZN21MultiplexerCollection7compareEPS_>
    int bestVal = 256*9; // Impossible to get past this with the algorithm i use
   b42c2:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
   b42c6:	bfa8      	it	ge
   b42c8:	f44f 6010 	movge.w	r0, #2304	; 0x900
   b42cc:	9901      	ldr	r1, [sp, #4]
   b42ce:	4604      	mov	r4, r0
          bestVal = thisVal;
          bestCollection = &peaceSign;
        }
    }

    if (thumbsUpSignSet) {
   b42d0:	4b0b      	ldr	r3, [pc, #44]	; (b4300 <_Z17getBestCollectionP21MultiplexerCollection+0x50>)
   b42d2:	781b      	ldrb	r3, [r3, #0]
   b42d4:	b16b      	cbz	r3, b42f2 <_Z17getBestCollectionP21MultiplexerCollection+0x42>
        int thisVal = thumbsUpSign.compare(currentCol);
   b42d6:	480b      	ldr	r0, [pc, #44]	; (b4304 <_Z17getBestCollectionP21MultiplexerCollection+0x54>)
   b42d8:	f7ff ff82 	bl	b41e0 <_ZN21MultiplexerCollection7compareEPS_>
        if (thisVal < bestVal) {
          bestVal = thisVal;
          bestCollection = &thumbsUpSign;
   b42dc:	4b07      	ldr	r3, [pc, #28]	; (b42fc <_Z17getBestCollectionP21MultiplexerCollection+0x4c>)
   b42de:	4a09      	ldr	r2, [pc, #36]	; (b4304 <_Z17getBestCollectionP21MultiplexerCollection+0x54>)
   b42e0:	4284      	cmp	r4, r0
   b42e2:	bfc8      	it	gt
   b42e4:	4613      	movgt	r3, r2
        }
    }

    return bestCollection;
   b42e6:	4618      	mov	r0, r3
   b42e8:	b002      	add	sp, #8
   b42ea:	bd10      	pop	{r4, pc}
    int bestVal = 256*9; // Impossible to get past this with the algorithm i use
   b42ec:	f44f 6410 	mov.w	r4, #2304	; 0x900
   b42f0:	e7ee      	b.n	b42d0 <_Z17getBestCollectionP21MultiplexerCollection+0x20>
   b42f2:	4b02      	ldr	r3, [pc, #8]	; (b42fc <_Z17getBestCollectionP21MultiplexerCollection+0x4c>)
   b42f4:	e7f7      	b.n	b42e6 <_Z17getBestCollectionP21MultiplexerCollection+0x36>
   b42f6:	bf00      	nop
   b42f8:	2003e6ac 	.word	0x2003e6ac
   b42fc:	2003e6a3 	.word	0x2003e6a3
   b4300:	2003e6b6 	.word	0x2003e6b6
   b4304:	2003e6ad 	.word	0x2003e6ad

000b4308 <loop>:
void loop() {
   b4308:	b500      	push	{lr}
   b430a:	b089      	sub	sp, #36	; 0x24
    MultiplexerCollection mpc(&myMulp);
   b430c:	4941      	ldr	r1, [pc, #260]	; (b4414 <loop+0x10c>)
   b430e:	a801      	add	r0, sp, #4
   b4310:	f7ff ff10 	bl	b4134 <_ZN21MultiplexerCollectionC1EP11Multiplexer>
    if (Serial.available() > 0) {
   b4314:	f000 fdae 	bl	b4e74 <_Z16_fetch_usbserialv>
   b4318:	6803      	ldr	r3, [r0, #0]
   b431a:	691b      	ldr	r3, [r3, #16]
   b431c:	4798      	blx	r3
   b431e:	2800      	cmp	r0, #0
   b4320:	dd31      	ble.n	b4386 <loop+0x7e>
        String serialData = Serial.readString();
   b4322:	f000 fda7 	bl	b4e74 <_Z16_fetch_usbserialv>
   b4326:	4601      	mov	r1, r0
   b4328:	a804      	add	r0, sp, #16
   b432a:	f000 fc03 	bl	b4b34 <_ZN6Stream10readStringEv>
        if (serialData.equals("REQ_PEACE")) {
   b432e:	493a      	ldr	r1, [pc, #232]	; (b4418 <loop+0x110>)
   b4330:	a804      	add	r0, sp, #16
   b4332:	f000 fb48 	bl	b49c6 <_ZNK6String6equalsEPKc>
   b4336:	b348      	cbz	r0, b438c <loop+0x84>
        thumb = mulpC->thumb; 
   b4338:	4b38      	ldr	r3, [pc, #224]	; (b441c <loop+0x114>)
   b433a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   b433e:	701a      	strb	r2, [r3, #0]
        pointer_high = mulpC->pointer_high; 
   b4340:	f89d 2005 	ldrb.w	r2, [sp, #5]
   b4344:	705a      	strb	r2, [r3, #1]
        pointer_low = mulpC->pointer_low; 
   b4346:	f89d 2006 	ldrb.w	r2, [sp, #6]
   b434a:	709a      	strb	r2, [r3, #2]
        middle_high = mulpC->middle_high; 
   b434c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b4350:	70da      	strb	r2, [r3, #3]
        middle_low = mulpC->middle_low; 
   b4352:	f89d 2008 	ldrb.w	r2, [sp, #8]
   b4356:	711a      	strb	r2, [r3, #4]
        ring_high = mulpC->ring_high; 
   b4358:	f89d 2009 	ldrb.w	r2, [sp, #9]
   b435c:	715a      	strb	r2, [r3, #5]
        ring_low = mulpC->ring_low; 
   b435e:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b4362:	719a      	strb	r2, [r3, #6]
        pinky_high = mulpC->pinky_high; 
   b4364:	f89d 200b 	ldrb.w	r2, [sp, #11]
   b4368:	71da      	strb	r2, [r3, #7]
        pinky_low = mulpC->pinky_low;
   b436a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   b436e:	721a      	strb	r2, [r3, #8]
            peaceSignSet = true;
   b4370:	4b2b      	ldr	r3, [pc, #172]	; (b4420 <loop+0x118>)
   b4372:	2201      	movs	r2, #1
   b4374:	701a      	strb	r2, [r3, #0]
            Serial.printf("PROG_PEACE");
   b4376:	f000 fd7d 	bl	b4e74 <_Z16_fetch_usbserialv>
   b437a:	492a      	ldr	r1, [pc, #168]	; (b4424 <loop+0x11c>)
              Serial.printf("BEST_UNKNOWN");
   b437c:	f7ff fe95 	bl	b40aa <_ZN5Print6printfEPKcz>
        String serialData = Serial.readString();
   b4380:	a804      	add	r0, sp, #16
   b4382:	f000 fa9d 	bl	b48c0 <_ZN6StringD1Ev>
}
   b4386:	b009      	add	sp, #36	; 0x24
   b4388:	f85d fb04 	ldr.w	pc, [sp], #4
        } else if (serialData.equals("REQ_THUMB_UP")) {
   b438c:	4926      	ldr	r1, [pc, #152]	; (b4428 <loop+0x120>)
   b438e:	a804      	add	r0, sp, #16
   b4390:	f000 fb19 	bl	b49c6 <_ZNK6String6equalsEPKc>
   b4394:	b310      	cbz	r0, b43dc <loop+0xd4>
        thumb = mulpC->thumb; 
   b4396:	4b25      	ldr	r3, [pc, #148]	; (b442c <loop+0x124>)
   b4398:	f89d 2004 	ldrb.w	r2, [sp, #4]
   b439c:	701a      	strb	r2, [r3, #0]
        pointer_high = mulpC->pointer_high; 
   b439e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   b43a2:	705a      	strb	r2, [r3, #1]
        pointer_low = mulpC->pointer_low; 
   b43a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   b43a8:	709a      	strb	r2, [r3, #2]
        middle_high = mulpC->middle_high; 
   b43aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b43ae:	70da      	strb	r2, [r3, #3]
        middle_low = mulpC->middle_low; 
   b43b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   b43b4:	711a      	strb	r2, [r3, #4]
        ring_high = mulpC->ring_high; 
   b43b6:	f89d 2009 	ldrb.w	r2, [sp, #9]
   b43ba:	715a      	strb	r2, [r3, #5]
        ring_low = mulpC->ring_low; 
   b43bc:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b43c0:	719a      	strb	r2, [r3, #6]
        pinky_high = mulpC->pinky_high; 
   b43c2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   b43c6:	71da      	strb	r2, [r3, #7]
        pinky_low = mulpC->pinky_low;
   b43c8:	f89d 200c 	ldrb.w	r2, [sp, #12]
   b43cc:	721a      	strb	r2, [r3, #8]
            thumbsUpSignSet = true;
   b43ce:	4b18      	ldr	r3, [pc, #96]	; (b4430 <loop+0x128>)
   b43d0:	2201      	movs	r2, #1
   b43d2:	701a      	strb	r2, [r3, #0]
            Serial.printf("PROG_THUMB_UP");
   b43d4:	f000 fd4e 	bl	b4e74 <_Z16_fetch_usbserialv>
   b43d8:	4916      	ldr	r1, [pc, #88]	; (b4434 <loop+0x12c>)
   b43da:	e7cf      	b.n	b437c <loop+0x74>
        } else if (serialData.equals("REQ_BEST")) {
   b43dc:	4916      	ldr	r1, [pc, #88]	; (b4438 <loop+0x130>)
   b43de:	a804      	add	r0, sp, #16
   b43e0:	f000 faf1 	bl	b49c6 <_ZNK6String6equalsEPKc>
   b43e4:	2800      	cmp	r0, #0
   b43e6:	d0cb      	beq.n	b4380 <loop+0x78>
            MultiplexerCollection* bestCollection = getBestCollection(&mpc);
   b43e8:	a801      	add	r0, sp, #4
   b43ea:	f7ff ff61 	bl	b42b0 <_Z17getBestCollectionP21MultiplexerCollection>
            if (bestCollection == &peaceSign) {
   b43ee:	4b0b      	ldr	r3, [pc, #44]	; (b441c <loop+0x114>)
   b43f0:	4298      	cmp	r0, r3
   b43f2:	d103      	bne.n	b43fc <loop+0xf4>
              Serial.printf("BEST_PEACE");
   b43f4:	f000 fd3e 	bl	b4e74 <_Z16_fetch_usbserialv>
   b43f8:	4910      	ldr	r1, [pc, #64]	; (b443c <loop+0x134>)
   b43fa:	e7bf      	b.n	b437c <loop+0x74>
            } else if (bestCollection == &thumbsUpSign) {
   b43fc:	4b0b      	ldr	r3, [pc, #44]	; (b442c <loop+0x124>)
   b43fe:	4298      	cmp	r0, r3
   b4400:	d103      	bne.n	b440a <loop+0x102>
              Serial.printf("BEST_THUMB_UP");
   b4402:	f000 fd37 	bl	b4e74 <_Z16_fetch_usbserialv>
   b4406:	490e      	ldr	r1, [pc, #56]	; (b4440 <loop+0x138>)
   b4408:	e7b8      	b.n	b437c <loop+0x74>
              Serial.printf("BEST_UNKNOWN");
   b440a:	f000 fd33 	bl	b4e74 <_Z16_fetch_usbserialv>
   b440e:	490d      	ldr	r1, [pc, #52]	; (b4444 <loop+0x13c>)
   b4410:	e7b4      	b.n	b437c <loop+0x74>
   b4412:	bf00      	nop
   b4414:	2003e69c 	.word	0x2003e69c
   b4418:	000b559a 	.word	0x000b559a
   b441c:	2003e6a3 	.word	0x2003e6a3
   b4420:	2003e6ac 	.word	0x2003e6ac
   b4424:	000b55a4 	.word	0x000b55a4
   b4428:	000b55af 	.word	0x000b55af
   b442c:	2003e6ad 	.word	0x2003e6ad
   b4430:	2003e6b6 	.word	0x2003e6b6
   b4434:	000b55bc 	.word	0x000b55bc
   b4438:	000b55ca 	.word	0x000b55ca
   b443c:	000b55d3 	.word	0x000b55d3
   b4440:	000b55de 	.word	0x000b55de
   b4444:	000b55ec 	.word	0x000b55ec

000b4448 <_GLOBAL__sub_I_SystemMode>:
   b4448:	b508      	push	{r3, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b444a:	4b0c      	ldr	r3, [pc, #48]	; (b447c <_GLOBAL__sub_I_SystemMode+0x34>)
   b444c:	2200      	movs	r2, #0
   b444e:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4452:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4456:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4458:	2002      	movs	r0, #2
   b445a:	f000 f923 	bl	b46a4 <set_system_mode>
        en = enablePin;
   b445e:	4b08      	ldr	r3, [pc, #32]	; (b4480 <_GLOBAL__sub_I_SystemMode+0x38>)
   b4460:	2206      	movs	r2, #6
   b4462:	701a      	strb	r2, [r3, #0]
        s0 = select0Pin;
   b4464:	2202      	movs	r2, #2
   b4466:	705a      	strb	r2, [r3, #1]
        s1 = select1Pin;
   b4468:	2203      	movs	r2, #3
   b446a:	709a      	strb	r2, [r3, #2]
        s2 = select2Pin;
   b446c:	2204      	movs	r2, #4
   b446e:	70da      	strb	r2, [r3, #3]
        s3 = select3Pin;
   b4470:	2205      	movs	r2, #5
   b4472:	711a      	strb	r2, [r3, #4]
        sig = signalPin;
   b4474:	2213      	movs	r2, #19
   b4476:	715a      	strb	r2, [r3, #5]
   b4478:	bd08      	pop	{r3, pc}
   b447a:	bf00      	nop
   b447c:	2003e690 	.word	0x2003e690
   b4480:	2003e69c 	.word	0x2003e69c

000b4484 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b02      	ldr	r3, [pc, #8]	; (b4490 <netdb_freeaddrinfo+0xc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	689b      	ldr	r3, [r3, #8]
   b448c:	9301      	str	r3, [sp, #4]
   b448e:	bd08      	pop	{r3, pc}
   b4490:	00030268 	.word	0x00030268

000b4494 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b02      	ldr	r3, [pc, #8]	; (b44a0 <netdb_getaddrinfo+0xc>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	68db      	ldr	r3, [r3, #12]
   b449c:	9301      	str	r3, [sp, #4]
   b449e:	bd08      	pop	{r3, pc}
   b44a0:	00030268 	.word	0x00030268

000b44a4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b44a4:	b508      	push	{r3, lr}
   b44a6:	4b02      	ldr	r3, [pc, #8]	; (b44b0 <HAL_Validate_Pin_Function+0xc>)
   b44a8:	681b      	ldr	r3, [r3, #0]
   b44aa:	685b      	ldr	r3, [r3, #4]
   b44ac:	9301      	str	r3, [sp, #4]
   b44ae:	bd08      	pop	{r3, pc}
   b44b0:	0003022c 	.word	0x0003022c

000b44b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b02      	ldr	r3, [pc, #8]	; (b44c0 <HAL_Pin_Mode+0xc>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	689b      	ldr	r3, [r3, #8]
   b44bc:	9301      	str	r3, [sp, #4]
   b44be:	bd08      	pop	{r3, pc}
   b44c0:	0003022c 	.word	0x0003022c

000b44c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b44c4:	b508      	push	{r3, lr}
   b44c6:	4b02      	ldr	r3, [pc, #8]	; (b44d0 <HAL_Get_Pin_Mode+0xc>)
   b44c8:	681b      	ldr	r3, [r3, #0]
   b44ca:	68db      	ldr	r3, [r3, #12]
   b44cc:	9301      	str	r3, [sp, #4]
   b44ce:	bd08      	pop	{r3, pc}
   b44d0:	0003022c 	.word	0x0003022c

000b44d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b02      	ldr	r3, [pc, #8]	; (b44e0 <HAL_GPIO_Write+0xc>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	691b      	ldr	r3, [r3, #16]
   b44dc:	9301      	str	r3, [sp, #4]
   b44de:	bd08      	pop	{r3, pc}
   b44e0:	0003022c 	.word	0x0003022c

000b44e4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b02      	ldr	r3, [pc, #8]	; (b44f0 <hal_adc_read+0xc>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b44ec:	9301      	str	r3, [sp, #4]
   b44ee:	bd08      	pop	{r3, pc}
   b44f0:	0003022c 	.word	0x0003022c

000b44f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <HAL_RNG_GetRandomNumber+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	685b      	ldr	r3, [r3, #4]
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	00030218 	.word	0x00030218

000b4504 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	695b      	ldr	r3, [r3, #20]
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	00030218 	.word	0x00030218

000b4514 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <os_mutex_recursive_create+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	00030248 	.word	0x00030248

000b4524 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <inet_inet_ntop+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	695b      	ldr	r3, [r3, #20]
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	00030264 	.word	0x00030264

000b4534 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <hal_usart_write+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	68db      	ldr	r3, [r3, #12]
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	0003023c 	.word	0x0003023c

000b4544 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <hal_usart_available+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	691b      	ldr	r3, [r3, #16]
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	0003023c 	.word	0x0003023c

000b4554 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <hal_usart_read+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	695b      	ldr	r3, [r3, #20]
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	0003023c 	.word	0x0003023c

000b4564 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <hal_usart_peek+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	699b      	ldr	r3, [r3, #24]
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	0003023c 	.word	0x0003023c

000b4574 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <hal_usart_flush+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	69db      	ldr	r3, [r3, #28]
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	0003023c 	.word	0x0003023c

000b4584 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <hal_usart_is_enabled+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	6a1b      	ldr	r3, [r3, #32]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	0003023c 	.word	0x0003023c

000b4594 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <hal_usart_available_data_for_write+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	0003023c 	.word	0x0003023c

000b45a4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <hal_usart_init_ex+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	0003023c 	.word	0x0003023c

000b45b4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <hal_i2c_write+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	6a1b      	ldr	r3, [r3, #32]
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	00030228 	.word	0x00030228

000b45c4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <hal_i2c_available+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	00030228 	.word	0x00030228

000b45d4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <hal_i2c_read+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	00030228 	.word	0x00030228

000b45e4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <hal_i2c_peek+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	00030228 	.word	0x00030228

000b45f4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <hal_i2c_flush+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	00030228 	.word	0x00030228

000b4604 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <hal_i2c_is_enabled+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030228 	.word	0x00030228

000b4614 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <hal_i2c_init+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030228 	.word	0x00030228

000b4624 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <hal_spi_init+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	69db      	ldr	r3, [r3, #28]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030230 	.word	0x00030230

000b4634 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <hal_spi_is_enabled+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	6a1b      	ldr	r3, [r3, #32]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030230 	.word	0x00030230

000b4644 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <HAL_USB_USART_Init+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	681b      	ldr	r3, [r3, #0]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	0003024c 	.word	0x0003024c

000b4654 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <HAL_USB_USART_Available_Data+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	691b      	ldr	r3, [r3, #16]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	0003024c 	.word	0x0003024c

000b4664 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	695b      	ldr	r3, [r3, #20]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	0003024c 	.word	0x0003024c

000b4674 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <HAL_USB_USART_Receive_Data+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	699b      	ldr	r3, [r3, #24]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	0003024c 	.word	0x0003024c

000b4684 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <HAL_USB_USART_Send_Data+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	69db      	ldr	r3, [r3, #28]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	0003024c 	.word	0x0003024c

000b4694 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <HAL_USB_USART_Flush_Data+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	6a1b      	ldr	r3, [r3, #32]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	0003024c 	.word	0x0003024c

000b46a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <set_system_mode+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	685b      	ldr	r3, [r3, #4]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030220 	.word	0x00030220

000b46b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b03      	ldr	r3, [pc, #12]	; (b46c4 <system_ctrl_set_app_request_handler+0x10>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b46be:	9301      	str	r3, [sp, #4]
   b46c0:	bd08      	pop	{r3, pc}
   b46c2:	0000      	.short	0x0000
   b46c4:	00030220 	.word	0x00030220

000b46c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b03      	ldr	r3, [pc, #12]	; (b46d8 <system_ctrl_set_result+0x10>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b46d2:	9301      	str	r3, [sp, #4]
   b46d4:	bd08      	pop	{r3, pc}
   b46d6:	0000      	.short	0x0000
   b46d8:	00030220 	.word	0x00030220

000b46dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b46dc:	b508      	push	{r3, lr}
   b46de:	4b02      	ldr	r3, [pc, #8]	; (b46e8 <network_connect+0xc>)
   b46e0:	681b      	ldr	r3, [r3, #0]
   b46e2:	685b      	ldr	r3, [r3, #4]
   b46e4:	9301      	str	r3, [sp, #4]
   b46e6:	bd08      	pop	{r3, pc}
   b46e8:	00030240 	.word	0x00030240

000b46ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b46ec:	b508      	push	{r3, lr}
   b46ee:	4b02      	ldr	r3, [pc, #8]	; (b46f8 <network_connecting+0xc>)
   b46f0:	681b      	ldr	r3, [r3, #0]
   b46f2:	689b      	ldr	r3, [r3, #8]
   b46f4:	9301      	str	r3, [sp, #4]
   b46f6:	bd08      	pop	{r3, pc}
   b46f8:	00030240 	.word	0x00030240

000b46fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <network_disconnect+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	68db      	ldr	r3, [r3, #12]
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	00030240 	.word	0x00030240

000b470c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <network_ready+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	691b      	ldr	r3, [r3, #16]
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	00030240 	.word	0x00030240

000b471c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <network_on+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	695b      	ldr	r3, [r3, #20]
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	00030240 	.word	0x00030240

000b472c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <network_off+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	699b      	ldr	r3, [r3, #24]
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	00030240 	.word	0x00030240

000b473c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <network_listen+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	69db      	ldr	r3, [r3, #28]
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	00030240 	.word	0x00030240

000b474c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b02      	ldr	r3, [pc, #8]	; (b4758 <network_listening+0xc>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	6a1b      	ldr	r3, [r3, #32]
   b4754:	9301      	str	r3, [sp, #4]
   b4756:	bd08      	pop	{r3, pc}
   b4758:	00030240 	.word	0x00030240

000b475c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <network_set_listen_timeout+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	00030240 	.word	0x00030240

000b476c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b476c:	b508      	push	{r3, lr}
   b476e:	4b02      	ldr	r3, [pc, #8]	; (b4778 <network_get_listen_timeout+0xc>)
   b4770:	681b      	ldr	r3, [r3, #0]
   b4772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4774:	9301      	str	r3, [sp, #4]
   b4776:	bd08      	pop	{r3, pc}
   b4778:	00030240 	.word	0x00030240

000b477c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <network_is_on+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	00030240 	.word	0x00030240

000b478c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <network_is_off+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	00030240 	.word	0x00030240

000b479c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b479c:	b508      	push	{r3, lr}
   b479e:	4b02      	ldr	r3, [pc, #8]	; (b47a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b47a0:	681b      	ldr	r3, [r3, #0]
   b47a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b47a4:	9301      	str	r3, [sp, #4]
   b47a6:	bd08      	pop	{r3, pc}
   b47a8:	00030244 	.word	0x00030244

000b47ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b02      	ldr	r3, [pc, #8]	; (b47b8 <malloc+0xc>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	681b      	ldr	r3, [r3, #0]
   b47b4:	9301      	str	r3, [sp, #4]
   b47b6:	bd08      	pop	{r3, pc}
   b47b8:	0003021c 	.word	0x0003021c

000b47bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b47bc:	b508      	push	{r3, lr}
   b47be:	4b02      	ldr	r3, [pc, #8]	; (b47c8 <free+0xc>)
   b47c0:	681b      	ldr	r3, [r3, #0]
   b47c2:	685b      	ldr	r3, [r3, #4]
   b47c4:	9301      	str	r3, [sp, #4]
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	0003021c 	.word	0x0003021c

000b47cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b47cc:	b508      	push	{r3, lr}
   b47ce:	4b02      	ldr	r3, [pc, #8]	; (b47d8 <realloc+0xc>)
   b47d0:	681b      	ldr	r3, [r3, #0]
   b47d2:	689b      	ldr	r3, [r3, #8]
   b47d4:	9301      	str	r3, [sp, #4]
   b47d6:	bd08      	pop	{r3, pc}
   b47d8:	0003021c 	.word	0x0003021c

000b47dc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <vsnprintf+0xc>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47e4:	9301      	str	r3, [sp, #4]
   b47e6:	bd08      	pop	{r3, pc}
   b47e8:	0003021c 	.word	0x0003021c

000b47ec <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b47ec:	b508      	push	{r3, lr}
   b47ee:	4b02      	ldr	r3, [pc, #8]	; (b47f8 <__assert_func+0xc>)
   b47f0:	681b      	ldr	r3, [r3, #0]
   b47f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47f4:	9301      	str	r3, [sp, #4]
   b47f6:	bd08      	pop	{r3, pc}
   b47f8:	0003021c 	.word	0x0003021c

000b47fc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b47fc:	b508      	push	{r3, lr}
   b47fe:	4b02      	ldr	r3, [pc, #8]	; (b4808 <newlib_impure_ptr_callback+0xc>)
   b4800:	681b      	ldr	r3, [r3, #0]
   b4802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4804:	9301      	str	r3, [sp, #4]
   b4806:	bd08      	pop	{r3, pc}
   b4808:	0003021c 	.word	0x0003021c

000b480c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b480c:	2200      	movs	r2, #0
   b480e:	6840      	ldr	r0, [r0, #4]
   b4810:	4611      	mov	r1, r2
   b4812:	f7ff bf9b 	b.w	b474c <network_listening>

000b4816 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4816:	2200      	movs	r2, #0
   b4818:	6840      	ldr	r0, [r0, #4]
   b481a:	4611      	mov	r1, r2
   b481c:	f7ff bfa6 	b.w	b476c <network_get_listen_timeout>

000b4820 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4820:	6840      	ldr	r0, [r0, #4]
   b4822:	2200      	movs	r2, #0
   b4824:	f7ff bf9a 	b.w	b475c <network_set_listen_timeout>

000b4828 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4828:	6840      	ldr	r0, [r0, #4]
   b482a:	2200      	movs	r2, #0
   b482c:	f081 0101 	eor.w	r1, r1, #1
   b4830:	f7ff bf84 	b.w	b473c <network_listen>

000b4834 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4834:	2300      	movs	r3, #0
   b4836:	6840      	ldr	r0, [r0, #4]
   b4838:	461a      	mov	r2, r3
   b483a:	4619      	mov	r1, r3
   b483c:	f7ff bf76 	b.w	b472c <network_off>

000b4840 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4840:	2300      	movs	r3, #0
   b4842:	6840      	ldr	r0, [r0, #4]
   b4844:	461a      	mov	r2, r3
   b4846:	4619      	mov	r1, r3
   b4848:	f7ff bf68 	b.w	b471c <network_on>

000b484c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b484c:	2200      	movs	r2, #0
   b484e:	6840      	ldr	r0, [r0, #4]
   b4850:	4611      	mov	r1, r2
   b4852:	f7ff bf5b 	b.w	b470c <network_ready>

000b4856 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4856:	2200      	movs	r2, #0
   b4858:	6840      	ldr	r0, [r0, #4]
   b485a:	4611      	mov	r1, r2
   b485c:	f7ff bf46 	b.w	b46ec <network_connecting>

000b4860 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4860:	6840      	ldr	r0, [r0, #4]
   b4862:	2200      	movs	r2, #0
   b4864:	2102      	movs	r1, #2
   b4866:	f7ff bf49 	b.w	b46fc <network_disconnect>

000b486a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b486a:	2300      	movs	r3, #0
   b486c:	6840      	ldr	r0, [r0, #4]
   b486e:	461a      	mov	r2, r3
   b4870:	f7ff bf34 	b.w	b46dc <network_connect>

000b4874 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4874:	4b02      	ldr	r3, [pc, #8]	; (b4880 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4876:	2203      	movs	r2, #3
   b4878:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b487a:	4a02      	ldr	r2, [pc, #8]	; (b4884 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b487c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b487e:	4770      	bx	lr
   b4880:	2003e6b8 	.word	0x2003e6b8
   b4884:	000b5604 	.word	0x000b5604

000b4888 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4888:	b510      	push	{r4, lr}
   b488a:	4604      	mov	r4, r0
   b488c:	4608      	mov	r0, r1
{
    _spi = spi;
   b488e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4890:	f7ff fec8 	bl	b4624 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4894:	2300      	movs	r3, #0
   b4896:	6063      	str	r3, [r4, #4]
}
   b4898:	4620      	mov	r0, r4
   b489a:	bd10      	pop	{r4, pc}

000b489c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b489c:	4b05      	ldr	r3, [pc, #20]	; (b48b4 <_GLOBAL__sub_I_System+0x18>)
   b489e:	2202      	movs	r2, #2
   b48a0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b48a2:	4b05      	ldr	r3, [pc, #20]	; (b48b8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b48a4:	4a05      	ldr	r2, [pc, #20]	; (b48bc <_GLOBAL__sub_I_System+0x20>)
   b48a6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b48a8:	2000      	movs	r0, #0
   b48aa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b48ae:	f7ff bef9 	b.w	b46a4 <set_system_mode>
   b48b2:	bf00      	nop
   b48b4:	2003e6cc 	.word	0x2003e6cc
   b48b8:	2003e6c0 	.word	0x2003e6c0
   b48bc:	ffff0000 	.word	0xffff0000

000b48c0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b48c0:	b510      	push	{r4, lr}
   b48c2:	4604      	mov	r4, r0
{
	free(buffer);
   b48c4:	6800      	ldr	r0, [r0, #0]
   b48c6:	f7ff ff79 	bl	b47bc <free>
}
   b48ca:	4620      	mov	r0, r4
   b48cc:	bd10      	pop	{r4, pc}

000b48ce <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b48ce:	b510      	push	{r4, lr}
   b48d0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b48d2:	6800      	ldr	r0, [r0, #0]
   b48d4:	b108      	cbz	r0, b48da <_ZN6String10invalidateEv+0xc>
   b48d6:	f7ff ff71 	bl	b47bc <free>
	buffer = NULL;
   b48da:	2300      	movs	r3, #0
	capacity = len = 0;
   b48dc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b48e0:	6023      	str	r3, [r4, #0]
}
   b48e2:	bd10      	pop	{r4, pc}

000b48e4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b48e4:	b538      	push	{r3, r4, r5, lr}
   b48e6:	4604      	mov	r4, r0
   b48e8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b48ea:	6800      	ldr	r0, [r0, #0]
   b48ec:	3101      	adds	r1, #1
   b48ee:	f7ff ff6d 	bl	b47cc <realloc>
	if (newbuffer) {
   b48f2:	b110      	cbz	r0, b48fa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b48f4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b48f8:	2001      	movs	r0, #1
	}
	return 0;
}
   b48fa:	bd38      	pop	{r3, r4, r5, pc}

000b48fc <_ZN6String7reserveEj>:
{
   b48fc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b48fe:	6803      	ldr	r3, [r0, #0]
{
   b4900:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4902:	b123      	cbz	r3, b490e <_ZN6String7reserveEj+0x12>
   b4904:	6843      	ldr	r3, [r0, #4]
   b4906:	428b      	cmp	r3, r1
   b4908:	d301      	bcc.n	b490e <_ZN6String7reserveEj+0x12>
   b490a:	2001      	movs	r0, #1
}
   b490c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b490e:	4620      	mov	r0, r4
   b4910:	f7ff ffe8 	bl	b48e4 <_ZN6String12changeBufferEj>
   b4914:	2800      	cmp	r0, #0
   b4916:	d0f9      	beq.n	b490c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4918:	68a3      	ldr	r3, [r4, #8]
   b491a:	2b00      	cmp	r3, #0
   b491c:	d1f5      	bne.n	b490a <_ZN6String7reserveEj+0xe>
   b491e:	6822      	ldr	r2, [r4, #0]
   b4920:	7013      	strb	r3, [r2, #0]
   b4922:	e7f2      	b.n	b490a <_ZN6String7reserveEj+0xe>

000b4924 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4924:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4926:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4928:	4611      	mov	r1, r2
   b492a:	9201      	str	r2, [sp, #4]
{
   b492c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b492e:	f7ff ffe5 	bl	b48fc <_ZN6String7reserveEj>
   b4932:	9a01      	ldr	r2, [sp, #4]
   b4934:	b928      	cbnz	r0, b4942 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4936:	4620      	mov	r0, r4
   b4938:	f7ff ffc9 	bl	b48ce <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b493c:	4620      	mov	r0, r4
   b493e:	b003      	add	sp, #12
   b4940:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4942:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4944:	4629      	mov	r1, r5
   b4946:	6820      	ldr	r0, [r4, #0]
   b4948:	f000 fd36 	bl	b53b8 <memcpy>
	buffer[len] = 0;
   b494c:	6822      	ldr	r2, [r4, #0]
   b494e:	68a3      	ldr	r3, [r4, #8]
   b4950:	2100      	movs	r1, #0
   b4952:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4954:	e7f2      	b.n	b493c <_ZN6String4copyEPKcj+0x18>

000b4956 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4956:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4958:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b495a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b495e:	4604      	mov	r4, r0
	len = 0;
   b4960:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4962:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4964:	b141      	cbz	r1, b4978 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4966:	4608      	mov	r0, r1
   b4968:	9101      	str	r1, [sp, #4]
   b496a:	f000 fd7b 	bl	b5464 <strlen>
   b496e:	9901      	ldr	r1, [sp, #4]
   b4970:	4602      	mov	r2, r0
   b4972:	4620      	mov	r0, r4
   b4974:	f7ff ffd6 	bl	b4924 <_ZN6String4copyEPKcj>
}
   b4978:	4620      	mov	r0, r4
   b497a:	b002      	add	sp, #8
   b497c:	bd10      	pop	{r4, pc}

000b497e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b497e:	b570      	push	{r4, r5, r6, lr}
   b4980:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4982:	460e      	mov	r6, r1
   b4984:	b909      	cbnz	r1, b498a <_ZN6String6concatEPKcj+0xc>
   b4986:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4988:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b498a:	b16a      	cbz	r2, b49a8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b498c:	6884      	ldr	r4, [r0, #8]
   b498e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4990:	4621      	mov	r1, r4
   b4992:	f7ff ffb3 	bl	b48fc <_ZN6String7reserveEj>
   b4996:	2800      	cmp	r0, #0
   b4998:	d0f5      	beq.n	b4986 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b499a:	6828      	ldr	r0, [r5, #0]
   b499c:	68ab      	ldr	r3, [r5, #8]
   b499e:	4631      	mov	r1, r6
   b49a0:	4418      	add	r0, r3
   b49a2:	f000 fd57 	bl	b5454 <strcpy>
	len = newlen;
   b49a6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b49a8:	2001      	movs	r0, #1
   b49aa:	e7ed      	b.n	b4988 <_ZN6String6concatEPKcj+0xa>

000b49ac <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b49ac:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b49ae:	2300      	movs	r3, #0
	buf[0] = c;
   b49b0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b49b4:	2201      	movs	r2, #1
   b49b6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b49b8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b49bc:	f7ff ffdf 	bl	b497e <_ZN6String6concatEPKcj>
}
   b49c0:	b003      	add	sp, #12
   b49c2:	f85d fb04 	ldr.w	pc, [sp], #4

000b49c6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b49c6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b49c8:	6882      	ldr	r2, [r0, #8]
   b49ca:	b93a      	cbnz	r2, b49dc <_ZNK6String6equalsEPKc+0x16>
   b49cc:	b121      	cbz	r1, b49d8 <_ZNK6String6equalsEPKc+0x12>
   b49ce:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b49d0:	fab0 f080 	clz	r0, r0
   b49d4:	0940      	lsrs	r0, r0, #5
   b49d6:	e000      	b.n	b49da <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b49d8:	2001      	movs	r0, #1
}
   b49da:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b49dc:	6800      	ldr	r0, [r0, #0]
   b49de:	b909      	cbnz	r1, b49e4 <_ZNK6String6equalsEPKc+0x1e>
   b49e0:	7800      	ldrb	r0, [r0, #0]
   b49e2:	e7f5      	b.n	b49d0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b49e4:	f000 fd2c 	bl	b5440 <strcmp>
   b49e8:	e7f2      	b.n	b49d0 <_ZNK6String6equalsEPKc+0xa>
	...

000b49ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b49ec:	4802      	ldr	r0, [pc, #8]	; (b49f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b49ee:	2300      	movs	r3, #0
   b49f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b49f2:	f7ff bd8f 	b.w	b4514 <os_mutex_recursive_create>
   b49f6:	bf00      	nop
   b49f8:	2003e6d0 	.word	0x2003e6d0

000b49fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b49fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b49fe:	4606      	mov	r6, r0
   b4a00:	460d      	mov	r5, r1
  size_t n = 0;
   b4a02:	188f      	adds	r7, r1, r2
   b4a04:	2400      	movs	r4, #0
  while (size--) {
   b4a06:	42bd      	cmp	r5, r7
   b4a08:	d00c      	beq.n	b4a24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4a0a:	6833      	ldr	r3, [r6, #0]
   b4a0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4a10:	689b      	ldr	r3, [r3, #8]
   b4a12:	4630      	mov	r0, r6
   b4a14:	4798      	blx	r3
     if (chunk>=0)
   b4a16:	1e03      	subs	r3, r0, #0
   b4a18:	db01      	blt.n	b4a1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4a1a:	441c      	add	r4, r3
  while (size--) {
   b4a1c:	e7f3      	b.n	b4a06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4a1e:	2c00      	cmp	r4, #0
   b4a20:	bf08      	it	eq
   b4a22:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4a24:	4620      	mov	r0, r4
   b4a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4a28 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4a28:	b513      	push	{r0, r1, r4, lr}
   b4a2a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4a2c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4a2e:	b159      	cbz	r1, b4a48 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4a30:	9101      	str	r1, [sp, #4]
   b4a32:	f000 fd17 	bl	b5464 <strlen>
   b4a36:	6823      	ldr	r3, [r4, #0]
   b4a38:	9901      	ldr	r1, [sp, #4]
   b4a3a:	68db      	ldr	r3, [r3, #12]
   b4a3c:	4602      	mov	r2, r0
   b4a3e:	4620      	mov	r0, r4
    }
   b4a40:	b002      	add	sp, #8
   b4a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4a46:	4718      	bx	r3
    }
   b4a48:	b002      	add	sp, #8
   b4a4a:	bd10      	pop	{r4, pc}

000b4a4c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4a4c:	6803      	ldr	r3, [r0, #0]
   b4a4e:	689b      	ldr	r3, [r3, #8]
   b4a50:	4718      	bx	r3

000b4a52 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4a52:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4a54:	210d      	movs	r1, #13
{
   b4a56:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4a58:	f7ff fff8 	bl	b4a4c <_ZN5Print5printEc>
  n += print('\n');
   b4a5c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4a5e:	4604      	mov	r4, r0
  n += print('\n');
   b4a60:	4628      	mov	r0, r5
   b4a62:	f7ff fff3 	bl	b4a4c <_ZN5Print5printEc>
  return n;
}
   b4a66:	4420      	add	r0, r4
   b4a68:	bd38      	pop	{r3, r4, r5, pc}

000b4a6a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4a6a:	b530      	push	{r4, r5, lr}
   b4a6c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4a6e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4a70:	2a01      	cmp	r2, #1
  *str = '\0';
   b4a72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4a76:	bf98      	it	ls
   b4a78:	220a      	movls	r2, #10
   b4a7a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4a7c:	460d      	mov	r5, r1
   b4a7e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4a82:	fb01 5312 	mls	r3, r1, r2, r5
   b4a86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a8a:	2b09      	cmp	r3, #9
   b4a8c:	bf94      	ite	ls
   b4a8e:	3330      	addls	r3, #48	; 0x30
   b4a90:	3337      	addhi	r3, #55	; 0x37
   b4a92:	b2db      	uxtb	r3, r3
  } while(n);
   b4a94:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a96:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4a9a:	d9ef      	bls.n	b4a7c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4a9c:	4621      	mov	r1, r4
   b4a9e:	f7ff ffc3 	bl	b4a28 <_ZN5Print5writeEPKc>
}
   b4aa2:	b00b      	add	sp, #44	; 0x2c
   b4aa4:	bd30      	pop	{r4, r5, pc}

000b4aa6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4aaa:	b086      	sub	sp, #24
   b4aac:	af00      	add	r7, sp, #0
   b4aae:	4605      	mov	r5, r0
   b4ab0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4ab2:	1d38      	adds	r0, r7, #4
   b4ab4:	2114      	movs	r1, #20
{
   b4ab6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4ab8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4aba:	f7ff fe8f 	bl	b47dc <vsnprintf>

    if (n<bufsize)
   b4abe:	2813      	cmp	r0, #19
   b4ac0:	d80e      	bhi.n	b4ae0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4ac2:	1d39      	adds	r1, r7, #4
   b4ac4:	4628      	mov	r0, r5
   b4ac6:	f7ff ffaf 	bl	b4a28 <_ZN5Print5writeEPKc>
   b4aca:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4acc:	b11e      	cbz	r6, b4ad6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4ace:	4628      	mov	r0, r5
   b4ad0:	f7ff ffbf 	bl	b4a52 <_ZN5Print7printlnEv>
   b4ad4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4ad6:	4620      	mov	r0, r4
   b4ad8:	3718      	adds	r7, #24
   b4ada:	46bd      	mov	sp, r7
   b4adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4ae0:	f100 0308 	add.w	r3, r0, #8
   b4ae4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4ae8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4aea:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4aee:	4622      	mov	r2, r4
   b4af0:	1c41      	adds	r1, r0, #1
   b4af2:	683b      	ldr	r3, [r7, #0]
   b4af4:	4668      	mov	r0, sp
   b4af6:	f7ff fe71 	bl	b47dc <vsnprintf>
  return write(str);
   b4afa:	4669      	mov	r1, sp
   b4afc:	4628      	mov	r0, r5
   b4afe:	f7ff ff93 	bl	b4a28 <_ZN5Print5writeEPKc>
   b4b02:	4604      	mov	r4, r0
   b4b04:	46c5      	mov	sp, r8
   b4b06:	e7e1      	b.n	b4acc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4b08 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b4b08:	b510      	push	{r4, lr}
   b4b0a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4b0c:	f7ff fcfa 	bl	b4504 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b4b10:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b4b12:	6823      	ldr	r3, [r4, #0]
   b4b14:	4620      	mov	r0, r4
   b4b16:	695b      	ldr	r3, [r3, #20]
   b4b18:	4798      	blx	r3
    if (c >= 0) return c;
   b4b1a:	2800      	cmp	r0, #0
   b4b1c:	da08      	bge.n	b4b30 <_ZN6Stream9timedReadEv+0x28>
   b4b1e:	f7ff fcf1 	bl	b4504 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b4b22:	68e3      	ldr	r3, [r4, #12]
   b4b24:	1ac0      	subs	r0, r0, r3
   b4b26:	68a3      	ldr	r3, [r4, #8]
   b4b28:	4298      	cmp	r0, r3
   b4b2a:	d3f2      	bcc.n	b4b12 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b4b2c:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4b30:	bd10      	pop	{r4, pc}
	...

000b4b34 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b4b34:	b538      	push	{r3, r4, r5, lr}
   b4b36:	460d      	mov	r5, r1
  String ret;
   b4b38:	4907      	ldr	r1, [pc, #28]	; (b4b58 <_ZN6Stream10readStringEv+0x24>)
{
   b4b3a:	4604      	mov	r4, r0
  String ret;
   b4b3c:	f7ff ff0b 	bl	b4956 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b4b40:	4628      	mov	r0, r5
   b4b42:	f7ff ffe1 	bl	b4b08 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b4b46:	2800      	cmp	r0, #0
   b4b48:	db04      	blt.n	b4b54 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b4b4a:	b2c1      	uxtb	r1, r0
   b4b4c:	4620      	mov	r0, r4
   b4b4e:	f7ff ff2d 	bl	b49ac <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b4b52:	e7f5      	b.n	b4b40 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b4b54:	4620      	mov	r0, r4
   b4b56:	bd38      	pop	{r3, r4, r5, pc}
   b4b58:	000b5599 	.word	0x000b5599

000b4b5c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4b5c:	2300      	movs	r3, #0
   b4b5e:	6840      	ldr	r0, [r0, #4]
   b4b60:	461a      	mov	r2, r3
   b4b62:	4619      	mov	r1, r3
   b4b64:	f7ff bdda 	b.w	b471c <network_on>

000b4b68 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4b68:	4b01      	ldr	r3, [pc, #4]	; (b4b70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4b6a:	4a02      	ldr	r2, [pc, #8]	; (b4b74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4b6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4b6e:	4770      	bx	lr
   b4b70:	2003e6d4 	.word	0x2003e6d4
   b4b74:	000b5638 	.word	0x000b5638

000b4b78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4b78:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4b7a:	681a      	ldr	r2, [r3, #0]
   b4b7c:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4b7e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4b80:	4770      	bx	lr
   b4b82:	bf00      	nop
   b4b84:	2003e624 	.word	0x2003e624
   b4b88:	2003e6d8 	.word	0x2003e6d8

000b4b8c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4b8c:	4b01      	ldr	r3, [pc, #4]	; (b4b94 <_GLOBAL__sub_I_RGB+0x8>)
   b4b8e:	2200      	movs	r2, #0
   b4b90:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4b92:	4770      	bx	lr
   b4b94:	2003e6dc 	.word	0x2003e6dc

000b4b98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4b98:	4b01      	ldr	r3, [pc, #4]	; (b4ba0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4b9a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4b9c:	4770      	bx	lr
   b4b9e:	bf00      	nop
   b4ba0:	2003e628 	.word	0x2003e628

000b4ba4 <serialEventRun>:
{
   b4ba4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4ba6:	4b0b      	ldr	r3, [pc, #44]	; (b4bd4 <serialEventRun+0x30>)
   b4ba8:	b143      	cbz	r3, b4bbc <serialEventRun+0x18>
   b4baa:	f000 f963 	bl	b4e74 <_Z16_fetch_usbserialv>
   b4bae:	6803      	ldr	r3, [r0, #0]
   b4bb0:	691b      	ldr	r3, [r3, #16]
   b4bb2:	4798      	blx	r3
   b4bb4:	2800      	cmp	r0, #0
   b4bb6:	dd01      	ble.n	b4bbc <serialEventRun+0x18>
        serialEvent();
   b4bb8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4bbc:	4b06      	ldr	r3, [pc, #24]	; (b4bd8 <serialEventRun+0x34>)
   b4bbe:	b143      	cbz	r3, b4bd2 <serialEventRun+0x2e>
   b4bc0:	f000 fb92 	bl	b52e8 <_Z22__fetch_global_Serial1v>
   b4bc4:	6803      	ldr	r3, [r0, #0]
   b4bc6:	691b      	ldr	r3, [r3, #16]
   b4bc8:	4798      	blx	r3
   b4bca:	2800      	cmp	r0, #0
   b4bcc:	dd01      	ble.n	b4bd2 <serialEventRun+0x2e>
        serialEvent1();
   b4bce:	f3af 8000 	nop.w
}
   b4bd2:	bd08      	pop	{r3, pc}
	...

000b4bdc <_post_loop>:
{
   b4bdc:	b508      	push	{r3, lr}
	serialEventRun();
   b4bde:	f7ff ffe1 	bl	b4ba4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4be2:	f7ff fc8f 	bl	b4504 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4be6:	4b01      	ldr	r3, [pc, #4]	; (b4bec <_post_loop+0x10>)
   b4be8:	6018      	str	r0, [r3, #0]
}
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	2003e740 	.word	0x2003e740

000b4bf0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4bf0:	4805      	ldr	r0, [pc, #20]	; (b4c08 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4bf2:	4a06      	ldr	r2, [pc, #24]	; (b4c0c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4bf4:	4906      	ldr	r1, [pc, #24]	; (b4c10 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4bf6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4bf8:	1a12      	subs	r2, r2, r0
   b4bfa:	f000 fbdd 	bl	b53b8 <memcpy>
    __backup_sram_signature = signature;
   b4bfe:	4b05      	ldr	r3, [pc, #20]	; (b4c14 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4c00:	4a05      	ldr	r2, [pc, #20]	; (b4c18 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4c02:	601a      	str	r2, [r3, #0]
}
   b4c04:	bd08      	pop	{r3, pc}
   b4c06:	bf00      	nop
   b4c08:	2003f400 	.word	0x2003f400
   b4c0c:	2003f404 	.word	0x2003f404
   b4c10:	000b5830 	.word	0x000b5830
   b4c14:	2003f400 	.word	0x2003f400
   b4c18:	9a271c1e 	.word	0x9a271c1e

000b4c1c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4c1c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4c1e:	2300      	movs	r3, #0
   b4c20:	9300      	str	r3, [sp, #0]
   b4c22:	461a      	mov	r2, r3
   b4c24:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4c28:	f7ff fd4e 	bl	b46c8 <system_ctrl_set_result>
}
   b4c2c:	b003      	add	sp, #12
   b4c2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4c34 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4c34:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4c36:	8843      	ldrh	r3, [r0, #2]
   b4c38:	2b0a      	cmp	r3, #10
   b4c3a:	d008      	beq.n	b4c4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4c3c:	2b50      	cmp	r3, #80	; 0x50
   b4c3e:	d10b      	bne.n	b4c58 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4c40:	4b09      	ldr	r3, [pc, #36]	; (b4c68 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4c42:	681b      	ldr	r3, [r3, #0]
   b4c44:	b14b      	cbz	r3, b4c5a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4c46:	b003      	add	sp, #12
   b4c48:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4c4c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4c4e:	f7ff ffe5 	bl	b4c1c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4c52:	b003      	add	sp, #12
   b4c54:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4c58:	2300      	movs	r3, #0
   b4c5a:	9300      	str	r3, [sp, #0]
   b4c5c:	461a      	mov	r2, r3
   b4c5e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4c62:	f7ff fd31 	bl	b46c8 <system_ctrl_set_result>
}
   b4c66:	e7f4      	b.n	b4c52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4c68:	2003e6f0 	.word	0x2003e6f0

000b4c6c <module_user_init_hook>:
{
   b4c6c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4c6e:	4812      	ldr	r0, [pc, #72]	; (b4cb8 <module_user_init_hook+0x4c>)
   b4c70:	2100      	movs	r1, #0
   b4c72:	f7ff fdc3 	bl	b47fc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4c76:	4b11      	ldr	r3, [pc, #68]	; (b4cbc <module_user_init_hook+0x50>)
   b4c78:	681a      	ldr	r2, [r3, #0]
   b4c7a:	4b11      	ldr	r3, [pc, #68]	; (b4cc0 <module_user_init_hook+0x54>)
   b4c7c:	429a      	cmp	r2, r3
   b4c7e:	4b11      	ldr	r3, [pc, #68]	; (b4cc4 <module_user_init_hook+0x58>)
   b4c80:	bf0c      	ite	eq
   b4c82:	2201      	moveq	r2, #1
   b4c84:	2200      	movne	r2, #0
   b4c86:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4c88:	d001      	beq.n	b4c8e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4c8a:	f7ff ffb1 	bl	b4bf0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4c8e:	f7ff fc31 	bl	b44f4 <HAL_RNG_GetRandomNumber>
   b4c92:	4604      	mov	r4, r0
    srand(seed);
   b4c94:	f000 fba6 	bl	b53e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4c98:	4b0b      	ldr	r3, [pc, #44]	; (b4cc8 <module_user_init_hook+0x5c>)
   b4c9a:	b113      	cbz	r3, b4ca2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4ca2:	2100      	movs	r1, #0
   b4ca4:	4808      	ldr	r0, [pc, #32]	; (b4cc8 <module_user_init_hook+0x5c>)
   b4ca6:	f7ff fd79 	bl	b479c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4cae:	4807      	ldr	r0, [pc, #28]	; (b4ccc <module_user_init_hook+0x60>)
   b4cb0:	2100      	movs	r1, #0
   b4cb2:	f7ff bcff 	b.w	b46b4 <system_ctrl_set_app_request_handler>
   b4cb6:	bf00      	nop
   b4cb8:	000b4b99 	.word	0x000b4b99
   b4cbc:	2003f400 	.word	0x2003f400
   b4cc0:	9a271c1e 	.word	0x9a271c1e
   b4cc4:	2003e6ec 	.word	0x2003e6ec
   b4cc8:	00000000 	.word	0x00000000
   b4ccc:	000b4c35 	.word	0x000b4c35

000b4cd0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4cd0:	4770      	bx	lr

000b4cd2 <_ZN9IPAddressD0Ev>:
   b4cd2:	b510      	push	{r4, lr}
   b4cd4:	2118      	movs	r1, #24
   b4cd6:	4604      	mov	r4, r0
   b4cd8:	f7ff f9dd 	bl	b4096 <_ZdlPvj>
   b4cdc:	4620      	mov	r0, r4
   b4cde:	bd10      	pop	{r4, pc}

000b4ce0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4ce2:	7d03      	ldrb	r3, [r0, #20]
   b4ce4:	2b06      	cmp	r3, #6
{
   b4ce6:	b08d      	sub	sp, #52	; 0x34
   b4ce8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4cea:	f100 0704 	add.w	r7, r0, #4
   b4cee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4cf2:	d012      	beq.n	b4d1a <_ZNK9IPAddress7printToER5Print+0x3a>
   b4cf4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4cf8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4cfc:	220a      	movs	r2, #10
   b4cfe:	4630      	mov	r0, r6
   b4d00:	f7ff feb3 	bl	b4a6a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4d04:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4d06:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4d08:	d019      	beq.n	b4d3e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4d0a:	2c00      	cmp	r4, #0
   b4d0c:	d0f4      	beq.n	b4cf8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4d0e:	212e      	movs	r1, #46	; 0x2e
   b4d10:	4630      	mov	r0, r6
   b4d12:	f7ff fe9b 	bl	b4a4c <_ZN5Print5printEc>
   b4d16:	4404      	add	r4, r0
   b4d18:	e7ee      	b.n	b4cf8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d1a:	232f      	movs	r3, #47	; 0x2f
   b4d1c:	466a      	mov	r2, sp
   b4d1e:	4639      	mov	r1, r7
   b4d20:	200a      	movs	r0, #10
		buf[0] = 0;
   b4d22:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d26:	f7ff fbfd 	bl	b4524 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4d2a:	4668      	mov	r0, sp
   b4d2c:	f000 fb9a 	bl	b5464 <strlen>
   b4d30:	6833      	ldr	r3, [r6, #0]
   b4d32:	4602      	mov	r2, r0
   b4d34:	68db      	ldr	r3, [r3, #12]
   b4d36:	4669      	mov	r1, sp
   b4d38:	4630      	mov	r0, r6
   b4d3a:	4798      	blx	r3
   b4d3c:	4604      	mov	r4, r0
    }
    return n;
}
   b4d3e:	4620      	mov	r0, r4
   b4d40:	b00d      	add	sp, #52	; 0x34
   b4d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4d44 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4d44:	b510      	push	{r4, lr}
   b4d46:	4b05      	ldr	r3, [pc, #20]	; (b4d5c <_ZN9IPAddressC1Ev+0x18>)
   b4d48:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4d4a:	2211      	movs	r2, #17
   b4d4c:	f840 3b04 	str.w	r3, [r0], #4
   b4d50:	2100      	movs	r1, #0
   b4d52:	f000 fb3f 	bl	b53d4 <memset>
}
   b4d56:	4620      	mov	r0, r4
   b4d58:	bd10      	pop	{r4, pc}
   b4d5a:	bf00      	nop
   b4d5c:	000b5660 	.word	0x000b5660

000b4d60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4d60:	4603      	mov	r3, r0
   b4d62:	4a07      	ldr	r2, [pc, #28]	; (b4d80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4d64:	b510      	push	{r4, lr}
   b4d66:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4d6a:	f101 0210 	add.w	r2, r1, #16
   b4d6e:	f851 4b04 	ldr.w	r4, [r1], #4
   b4d72:	f843 4b04 	str.w	r4, [r3], #4
   b4d76:	4291      	cmp	r1, r2
   b4d78:	d1f9      	bne.n	b4d6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4d7a:	780a      	ldrb	r2, [r1, #0]
   b4d7c:	701a      	strb	r2, [r3, #0]
}
   b4d7e:	bd10      	pop	{r4, pc}
   b4d80:	000b5660 	.word	0x000b5660

000b4d84 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4d84:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4d86:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4d8a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4d8e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4d92:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4d96:	2304      	movs	r3, #4
   b4d98:	6041      	str	r1, [r0, #4]
   b4d9a:	7503      	strb	r3, [r0, #20]
}
   b4d9c:	bd10      	pop	{r4, pc}
	...

000b4da0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4da0:	b507      	push	{r0, r1, r2, lr}
   b4da2:	4b06      	ldr	r3, [pc, #24]	; (b4dbc <_ZN9IPAddressC1EPKh+0x1c>)
   b4da4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4da6:	78cb      	ldrb	r3, [r1, #3]
   b4da8:	9300      	str	r3, [sp, #0]
   b4daa:	788b      	ldrb	r3, [r1, #2]
   b4dac:	784a      	ldrb	r2, [r1, #1]
   b4dae:	7809      	ldrb	r1, [r1, #0]
   b4db0:	f7ff ffe8 	bl	b4d84 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4db4:	b003      	add	sp, #12
   b4db6:	f85d fb04 	ldr.w	pc, [sp], #4
   b4dba:	bf00      	nop
   b4dbc:	000b5660 	.word	0x000b5660

000b4dc0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4dc0:	7441      	strb	r1, [r0, #17]
}
   b4dc2:	4770      	bx	lr

000b4dc4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4dc4:	4770      	bx	lr

000b4dc6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4dc6:	4770      	bx	lr

000b4dc8 <_ZN9USBSerial4readEv>:
{
   b4dc8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4dca:	2100      	movs	r1, #0
   b4dcc:	7c00      	ldrb	r0, [r0, #16]
   b4dce:	f7ff fc51 	bl	b4674 <HAL_USB_USART_Receive_Data>
}
   b4dd2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4dd6:	bd08      	pop	{r3, pc}

000b4dd8 <_ZN9USBSerial4peekEv>:
{
   b4dd8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4dda:	2101      	movs	r1, #1
   b4ddc:	7c00      	ldrb	r0, [r0, #16]
   b4dde:	f7ff fc49 	bl	b4674 <HAL_USB_USART_Receive_Data>
}
   b4de2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4de6:	bd08      	pop	{r3, pc}

000b4de8 <_ZN9USBSerial17availableForWriteEv>:
{
   b4de8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4dea:	7c00      	ldrb	r0, [r0, #16]
   b4dec:	f7ff fc3a 	bl	b4664 <HAL_USB_USART_Available_Data_For_Write>
}
   b4df0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4df4:	bd08      	pop	{r3, pc}

000b4df6 <_ZN9USBSerial9availableEv>:
{
   b4df6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4df8:	7c00      	ldrb	r0, [r0, #16]
   b4dfa:	f7ff fc2b 	bl	b4654 <HAL_USB_USART_Available_Data>
}
   b4dfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e02:	bd08      	pop	{r3, pc}

000b4e04 <_ZN9USBSerial5writeEh>:
{
   b4e04:	b513      	push	{r0, r1, r4, lr}
   b4e06:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4e08:	7c00      	ldrb	r0, [r0, #16]
{
   b4e0a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4e0c:	f7ff fc2a 	bl	b4664 <HAL_USB_USART_Available_Data_For_Write>
   b4e10:	2800      	cmp	r0, #0
   b4e12:	9901      	ldr	r1, [sp, #4]
   b4e14:	dc01      	bgt.n	b4e1a <_ZN9USBSerial5writeEh+0x16>
   b4e16:	7c60      	ldrb	r0, [r4, #17]
   b4e18:	b120      	cbz	r0, b4e24 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4e1a:	7c20      	ldrb	r0, [r4, #16]
   b4e1c:	f7ff fc32 	bl	b4684 <HAL_USB_USART_Send_Data>
   b4e20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4e24:	b002      	add	sp, #8
   b4e26:	bd10      	pop	{r4, pc}

000b4e28 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4e28:	7c00      	ldrb	r0, [r0, #16]
   b4e2a:	f7ff bc33 	b.w	b4694 <HAL_USB_USART_Flush_Data>

000b4e2e <_ZN9USBSerialD0Ev>:
   b4e2e:	b510      	push	{r4, lr}
   b4e30:	2114      	movs	r1, #20
   b4e32:	4604      	mov	r4, r0
   b4e34:	f7ff f92f 	bl	b4096 <_ZdlPvj>
   b4e38:	4620      	mov	r0, r4
   b4e3a:	bd10      	pop	{r4, pc}

000b4e3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4e3c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4e42:	4604      	mov	r4, r0
   b4e44:	4608      	mov	r0, r1
   b4e46:	2100      	movs	r1, #0
   b4e48:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4e4c:	4b04      	ldr	r3, [pc, #16]	; (b4e60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4e4e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4e50:	2301      	movs	r3, #1
  _serial = serial;
   b4e52:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4e54:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4e56:	4611      	mov	r1, r2
   b4e58:	f7ff fbf4 	bl	b4644 <HAL_USB_USART_Init>
}
   b4e5c:	4620      	mov	r0, r4
   b4e5e:	bd10      	pop	{r4, pc}
   b4e60:	000b5674 	.word	0x000b5674

000b4e64 <_Z19acquireSerialBufferv>:
{
   b4e64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4e66:	2214      	movs	r2, #20
{
   b4e68:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4e6a:	2100      	movs	r1, #0
   b4e6c:	f000 fab2 	bl	b53d4 <memset>
}
   b4e70:	4620      	mov	r0, r4
   b4e72:	bd10      	pop	{r4, pc}

000b4e74 <_Z16_fetch_usbserialv>:
{
   b4e74:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4e76:	4c0f      	ldr	r4, [pc, #60]	; (b4eb4 <_Z16_fetch_usbserialv+0x40>)
{
   b4e78:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4e7a:	a803      	add	r0, sp, #12
   b4e7c:	f7ff fff2 	bl	b4e64 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4e80:	7821      	ldrb	r1, [r4, #0]
   b4e82:	f3bf 8f5b 	dmb	ish
   b4e86:	f011 0101 	ands.w	r1, r1, #1
   b4e8a:	d10f      	bne.n	b4eac <_Z16_fetch_usbserialv+0x38>
   b4e8c:	4620      	mov	r0, r4
   b4e8e:	9101      	str	r1, [sp, #4]
   b4e90:	f7ff f903 	bl	b409a <__cxa_guard_acquire>
   b4e94:	9901      	ldr	r1, [sp, #4]
   b4e96:	b148      	cbz	r0, b4eac <_Z16_fetch_usbserialv+0x38>
   b4e98:	aa03      	add	r2, sp, #12
   b4e9a:	4807      	ldr	r0, [pc, #28]	; (b4eb8 <_Z16_fetch_usbserialv+0x44>)
   b4e9c:	f7ff ffce 	bl	b4e3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4ea0:	4620      	mov	r0, r4
   b4ea2:	f7ff f8ff 	bl	b40a4 <__cxa_guard_release>
   b4ea6:	4805      	ldr	r0, [pc, #20]	; (b4ebc <_Z16_fetch_usbserialv+0x48>)
   b4ea8:	f000 fa80 	bl	b53ac <atexit>
	return _usbserial;
}
   b4eac:	4802      	ldr	r0, [pc, #8]	; (b4eb8 <_Z16_fetch_usbserialv+0x44>)
   b4eae:	b008      	add	sp, #32
   b4eb0:	bd10      	pop	{r4, pc}
   b4eb2:	bf00      	nop
   b4eb4:	2003e6f4 	.word	0x2003e6f4
   b4eb8:	2003e6f8 	.word	0x2003e6f8
   b4ebc:	000b4dc5 	.word	0x000b4dc5

000b4ec0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4ec0:	4770      	bx	lr

000b4ec2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4ec2:	7441      	strb	r1, [r0, #17]
}
   b4ec4:	4770      	bx	lr

000b4ec6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4ec6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4ec8:	7c00      	ldrb	r0, [r0, #16]
   b4eca:	f7ff fb63 	bl	b4594 <hal_usart_available_data_for_write>
}
   b4ece:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ed2:	bd08      	pop	{r3, pc}

000b4ed4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4ed4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4ed6:	7c00      	ldrb	r0, [r0, #16]
   b4ed8:	f7ff fb34 	bl	b4544 <hal_usart_available>
}
   b4edc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ee0:	bd08      	pop	{r3, pc}

000b4ee2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4ee2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4ee4:	7c00      	ldrb	r0, [r0, #16]
   b4ee6:	f7ff fb3d 	bl	b4564 <hal_usart_peek>
}
   b4eea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4eee:	bd08      	pop	{r3, pc}

000b4ef0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4ef0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4ef2:	7c00      	ldrb	r0, [r0, #16]
   b4ef4:	f7ff fb2e 	bl	b4554 <hal_usart_read>
}
   b4ef8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4efc:	bd08      	pop	{r3, pc}

000b4efe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4efe:	7c00      	ldrb	r0, [r0, #16]
   b4f00:	f7ff bb38 	b.w	b4574 <hal_usart_flush>

000b4f04 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4f06:	7c45      	ldrb	r5, [r0, #17]
{
   b4f08:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4f0a:	b12d      	cbz	r5, b4f18 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4f0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4f0e:	b003      	add	sp, #12
   b4f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4f14:	f7ff bb0e 	b.w	b4534 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4f18:	7c00      	ldrb	r0, [r0, #16]
   b4f1a:	9101      	str	r1, [sp, #4]
   b4f1c:	f7ff fb3a 	bl	b4594 <hal_usart_available_data_for_write>
   b4f20:	2800      	cmp	r0, #0
   b4f22:	9901      	ldr	r1, [sp, #4]
   b4f24:	dcf2      	bgt.n	b4f0c <_ZN11USARTSerial5writeEh+0x8>
}
   b4f26:	4628      	mov	r0, r5
   b4f28:	b003      	add	sp, #12
   b4f2a:	bd30      	pop	{r4, r5, pc}

000b4f2c <_ZN11USARTSerialD0Ev>:
   b4f2c:	b510      	push	{r4, lr}
   b4f2e:	2114      	movs	r1, #20
   b4f30:	4604      	mov	r4, r0
   b4f32:	f7ff f8b0 	bl	b4096 <_ZdlPvj>
   b4f36:	4620      	mov	r0, r4
   b4f38:	bd10      	pop	{r4, pc}
	...

000b4f3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4f3c:	b510      	push	{r4, lr}
   b4f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4f42:	4604      	mov	r4, r0
   b4f44:	4608      	mov	r0, r1
   b4f46:	4611      	mov	r1, r2
   b4f48:	2200      	movs	r2, #0
   b4f4a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4f4e:	4b04      	ldr	r3, [pc, #16]	; (b4f60 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4f50:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4f52:	2301      	movs	r3, #1
  _serial = serial;
   b4f54:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4f56:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4f58:	f7ff fb24 	bl	b45a4 <hal_usart_init_ex>
}
   b4f5c:	4620      	mov	r0, r4
   b4f5e:	bd10      	pop	{r4, pc}
   b4f60:	000b56a4 	.word	0x000b56a4

000b4f64 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4f64:	4770      	bx	lr

000b4f66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f68:	4606      	mov	r6, r0
   b4f6a:	4615      	mov	r5, r2
   b4f6c:	460c      	mov	r4, r1
   b4f6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4f70:	42bc      	cmp	r4, r7
   b4f72:	d006      	beq.n	b4f82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4f74:	6833      	ldr	r3, [r6, #0]
   b4f76:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4f7a:	689b      	ldr	r3, [r3, #8]
   b4f7c:	4630      	mov	r0, r6
   b4f7e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4f80:	e7f6      	b.n	b4f70 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4f82:	4628      	mov	r0, r5
   b4f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f86 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4f86:	7c00      	ldrb	r0, [r0, #16]
   b4f88:	2200      	movs	r2, #0
   b4f8a:	f7ff bb13 	b.w	b45b4 <hal_i2c_write>

000b4f8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4f8e:	7c00      	ldrb	r0, [r0, #16]
   b4f90:	2100      	movs	r1, #0
   b4f92:	f7ff bb17 	b.w	b45c4 <hal_i2c_available>

000b4f96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4f96:	7c00      	ldrb	r0, [r0, #16]
   b4f98:	2100      	movs	r1, #0
   b4f9a:	f7ff bb1b 	b.w	b45d4 <hal_i2c_read>

000b4f9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4f9e:	7c00      	ldrb	r0, [r0, #16]
   b4fa0:	2100      	movs	r1, #0
   b4fa2:	f7ff bb1f 	b.w	b45e4 <hal_i2c_peek>

000b4fa6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4fa6:	7c00      	ldrb	r0, [r0, #16]
   b4fa8:	2100      	movs	r1, #0
   b4faa:	f7ff bb23 	b.w	b45f4 <hal_i2c_flush>

000b4fae <_ZN7TwoWireD0Ev>:
   b4fae:	b510      	push	{r4, lr}
   b4fb0:	2114      	movs	r1, #20
   b4fb2:	4604      	mov	r4, r0
   b4fb4:	f7ff f86f 	bl	b4096 <_ZdlPvj>
   b4fb8:	4620      	mov	r0, r4
   b4fba:	bd10      	pop	{r4, pc}

000b4fbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4fbc:	b510      	push	{r4, lr}
   b4fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fc2:	4604      	mov	r4, r0
   b4fc4:	4608      	mov	r0, r1
   b4fc6:	2100      	movs	r1, #0
   b4fc8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4fcc:	4b03      	ldr	r3, [pc, #12]	; (b4fdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4fce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4fd0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4fd2:	4611      	mov	r1, r2
   b4fd4:	f7ff fb1e 	bl	b4614 <hal_i2c_init>
}
   b4fd8:	4620      	mov	r0, r4
   b4fda:	bd10      	pop	{r4, pc}
   b4fdc:	000b56d4 	.word	0x000b56d4

000b4fe0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4fe0:	2200      	movs	r2, #0
   b4fe2:	6840      	ldr	r0, [r0, #4]
   b4fe4:	4611      	mov	r1, r2
   b4fe6:	f7ff bb91 	b.w	b470c <network_ready>

000b4fea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4fea:	2200      	movs	r2, #0
   b4fec:	6840      	ldr	r0, [r0, #4]
   b4fee:	4611      	mov	r1, r2
   b4ff0:	f7ff bbac 	b.w	b474c <network_listening>

000b4ff4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4ff4:	2200      	movs	r2, #0
   b4ff6:	6840      	ldr	r0, [r0, #4]
   b4ff8:	4611      	mov	r1, r2
   b4ffa:	f7ff bbb7 	b.w	b476c <network_get_listen_timeout>

000b4ffe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ffe:	6840      	ldr	r0, [r0, #4]
   b5000:	2200      	movs	r2, #0
   b5002:	f7ff bbab 	b.w	b475c <network_set_listen_timeout>

000b5006 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5006:	6840      	ldr	r0, [r0, #4]
   b5008:	2200      	movs	r2, #0
   b500a:	f081 0101 	eor.w	r1, r1, #1
   b500e:	f7ff bb95 	b.w	b473c <network_listen>

000b5012 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5012:	2300      	movs	r3, #0
   b5014:	6840      	ldr	r0, [r0, #4]
   b5016:	461a      	mov	r2, r3
   b5018:	4619      	mov	r1, r3
   b501a:	f7ff bb87 	b.w	b472c <network_off>

000b501e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b501e:	2200      	movs	r2, #0
   b5020:	6840      	ldr	r0, [r0, #4]
   b5022:	4611      	mov	r1, r2
   b5024:	f7ff bb62 	b.w	b46ec <network_connecting>

000b5028 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5028:	6840      	ldr	r0, [r0, #4]
   b502a:	2200      	movs	r2, #0
   b502c:	2102      	movs	r1, #2
   b502e:	f7ff bb65 	b.w	b46fc <network_disconnect>

000b5032 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5032:	2300      	movs	r3, #0
   b5034:	6840      	ldr	r0, [r0, #4]
   b5036:	461a      	mov	r2, r3
   b5038:	f7ff bb50 	b.w	b46dc <network_connect>

000b503c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b503c:	4b02      	ldr	r3, [pc, #8]	; (b5048 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b503e:	2204      	movs	r2, #4
   b5040:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5042:	4a02      	ldr	r2, [pc, #8]	; (b504c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5044:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5046:	4770      	bx	lr
   b5048:	2003e70c 	.word	0x2003e70c
   b504c:	000b56fc 	.word	0x000b56fc

000b5050 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5050:	2300      	movs	r3, #0
   b5052:	6840      	ldr	r0, [r0, #4]
   b5054:	461a      	mov	r2, r3
   b5056:	f7ff bb41 	b.w	b46dc <network_connect>

000b505a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b505a:	6840      	ldr	r0, [r0, #4]
   b505c:	2200      	movs	r2, #0
   b505e:	2102      	movs	r1, #2
   b5060:	f7ff bb4c 	b.w	b46fc <network_disconnect>

000b5064 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5064:	2200      	movs	r2, #0
   b5066:	6840      	ldr	r0, [r0, #4]
   b5068:	4611      	mov	r1, r2
   b506a:	f7ff bb3f 	b.w	b46ec <network_connecting>

000b506e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b506e:	2200      	movs	r2, #0
   b5070:	6840      	ldr	r0, [r0, #4]
   b5072:	4611      	mov	r1, r2
   b5074:	f7ff bb4a 	b.w	b470c <network_ready>

000b5078 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5078:	2300      	movs	r3, #0
   b507a:	6840      	ldr	r0, [r0, #4]
   b507c:	461a      	mov	r2, r3
   b507e:	4619      	mov	r1, r3
   b5080:	f7ff bb4c 	b.w	b471c <network_on>

000b5084 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5084:	2300      	movs	r3, #0
   b5086:	6840      	ldr	r0, [r0, #4]
   b5088:	461a      	mov	r2, r3
   b508a:	4619      	mov	r1, r3
   b508c:	f7ff bb4e 	b.w	b472c <network_off>

000b5090 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5090:	6840      	ldr	r0, [r0, #4]
   b5092:	2100      	movs	r1, #0
   b5094:	f7ff bb72 	b.w	b477c <network_is_on>

000b5098 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5098:	6840      	ldr	r0, [r0, #4]
   b509a:	2100      	movs	r1, #0
   b509c:	f7ff bb76 	b.w	b478c <network_is_off>

000b50a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b50a0:	6840      	ldr	r0, [r0, #4]
   b50a2:	2200      	movs	r2, #0
   b50a4:	f081 0101 	eor.w	r1, r1, #1
   b50a8:	f7ff bb48 	b.w	b473c <network_listen>

000b50ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b50ac:	6840      	ldr	r0, [r0, #4]
   b50ae:	2200      	movs	r2, #0
   b50b0:	f7ff bb54 	b.w	b475c <network_set_listen_timeout>

000b50b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b50b4:	2200      	movs	r2, #0
   b50b6:	6840      	ldr	r0, [r0, #4]
   b50b8:	4611      	mov	r1, r2
   b50ba:	f7ff bb57 	b.w	b476c <network_get_listen_timeout>

000b50be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b50be:	2200      	movs	r2, #0
   b50c0:	6840      	ldr	r0, [r0, #4]
   b50c2:	4611      	mov	r1, r2
   b50c4:	f7ff bb42 	b.w	b474c <network_listening>

000b50c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b50c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b50cc:	b095      	sub	sp, #84	; 0x54
   b50ce:	4614      	mov	r4, r2
   b50d0:	460d      	mov	r5, r1
   b50d2:	4607      	mov	r7, r0
    IPAddress addr;
   b50d4:	f7ff fe36 	bl	b4d44 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b50d8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b50da:	221c      	movs	r2, #28
   b50dc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b50de:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b50e0:	f000 f978 	bl	b53d4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b50e4:	2340      	movs	r3, #64	; 0x40
   b50e6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b50e8:	4620      	mov	r0, r4
   b50ea:	466b      	mov	r3, sp
   b50ec:	aa0c      	add	r2, sp, #48	; 0x30
   b50ee:	2100      	movs	r1, #0
   b50f0:	f7ff f9d0 	bl	b4494 <netdb_getaddrinfo>
    if (!r) {
   b50f4:	4604      	mov	r4, r0
   b50f6:	2800      	cmp	r0, #0
   b50f8:	d14b      	bne.n	b5192 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b50fa:	4602      	mov	r2, r0
   b50fc:	2101      	movs	r1, #1
   b50fe:	6868      	ldr	r0, [r5, #4]
   b5100:	f7ff fb04 	bl	b470c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5104:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5106:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5108:	4622      	mov	r2, r4
   b510a:	6868      	ldr	r0, [r5, #4]
   b510c:	f7ff fafe 	bl	b470c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5110:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5112:	4681      	mov	r9, r0
        bool ok = false;
   b5114:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5116:	2e00      	cmp	r6, #0
   b5118:	d03b      	beq.n	b5192 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b511a:	2900      	cmp	r1, #0
   b511c:	d139      	bne.n	b5192 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b511e:	6873      	ldr	r3, [r6, #4]
   b5120:	2b02      	cmp	r3, #2
   b5122:	d003      	beq.n	b512c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5124:	2b0a      	cmp	r3, #10
   b5126:	d011      	beq.n	b514c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5128:	69f6      	ldr	r6, [r6, #28]
   b512a:	e7f4      	b.n	b5116 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b512c:	f1b8 0f00 	cmp.w	r8, #0
   b5130:	d0fa      	beq.n	b5128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5132:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5134:	a806      	add	r0, sp, #24
   b5136:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5138:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b513a:	f7ff fe31 	bl	b4da0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b513e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5140:	1d3c      	adds	r4, r7, #4
   b5142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5144:	682b      	ldr	r3, [r5, #0]
   b5146:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5148:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b514a:	e7ed      	b.n	b5128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b514c:	f1b9 0f00 	cmp.w	r9, #0
   b5150:	d0ea      	beq.n	b5128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5152:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5154:	2210      	movs	r2, #16
   b5156:	a801      	add	r0, sp, #4
   b5158:	f000 f93c 	bl	b53d4 <memset>
                    a.v = 6;
   b515c:	2306      	movs	r3, #6
   b515e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5162:	ad01      	add	r5, sp, #4
   b5164:	f104 0308 	add.w	r3, r4, #8
   b5168:	3418      	adds	r4, #24
   b516a:	6818      	ldr	r0, [r3, #0]
   b516c:	6859      	ldr	r1, [r3, #4]
   b516e:	462a      	mov	r2, r5
   b5170:	c203      	stmia	r2!, {r0, r1}
   b5172:	3308      	adds	r3, #8
   b5174:	42a3      	cmp	r3, r4
   b5176:	4615      	mov	r5, r2
   b5178:	d1f7      	bne.n	b516a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b517a:	a901      	add	r1, sp, #4
   b517c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b517e:	ad07      	add	r5, sp, #28
   b5180:	f7ff fdee 	bl	b4d60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5186:	1d3c      	adds	r4, r7, #4
   b5188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b518a:	682b      	ldr	r3, [r5, #0]
   b518c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b518e:	4649      	mov	r1, r9
   b5190:	e7ca      	b.n	b5128 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5192:	9800      	ldr	r0, [sp, #0]
   b5194:	f7ff f976 	bl	b4484 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5198:	4638      	mov	r0, r7
   b519a:	b015      	add	sp, #84	; 0x54
   b519c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b51a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b51a0:	4b02      	ldr	r3, [pc, #8]	; (b51ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b51a2:	4a03      	ldr	r2, [pc, #12]	; (b51b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b51a4:	601a      	str	r2, [r3, #0]
   b51a6:	2200      	movs	r2, #0
   b51a8:	605a      	str	r2, [r3, #4]

} // spark
   b51aa:	4770      	bx	lr
   b51ac:	2003e714 	.word	0x2003e714
   b51b0:	000b5738 	.word	0x000b5738

000b51b4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b51b4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b51b6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b51b8:	d902      	bls.n	b51c0 <pinAvailable+0xc>
    return false;
   b51ba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b51bc:	b002      	add	sp, #8
   b51be:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b51c0:	f1a0 030b 	sub.w	r3, r0, #11
   b51c4:	2b02      	cmp	r3, #2
   b51c6:	d81a      	bhi.n	b51fe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b51c8:	4c17      	ldr	r4, [pc, #92]	; (b5228 <pinAvailable+0x74>)
   b51ca:	7821      	ldrb	r1, [r4, #0]
   b51cc:	f3bf 8f5b 	dmb	ish
   b51d0:	f011 0101 	ands.w	r1, r1, #1
   b51d4:	d10b      	bne.n	b51ee <pinAvailable+0x3a>
   b51d6:	4620      	mov	r0, r4
   b51d8:	9101      	str	r1, [sp, #4]
   b51da:	f7fe ff5e 	bl	b409a <__cxa_guard_acquire>
   b51de:	9901      	ldr	r1, [sp, #4]
   b51e0:	b128      	cbz	r0, b51ee <pinAvailable+0x3a>
   b51e2:	4812      	ldr	r0, [pc, #72]	; (b522c <pinAvailable+0x78>)
   b51e4:	f7ff fb50 	bl	b4888 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b51e8:	4620      	mov	r0, r4
   b51ea:	f7fe ff5b 	bl	b40a4 <__cxa_guard_release>
   b51ee:	4b0f      	ldr	r3, [pc, #60]	; (b522c <pinAvailable+0x78>)
   b51f0:	7818      	ldrb	r0, [r3, #0]
   b51f2:	f7ff fa1f 	bl	b4634 <hal_spi_is_enabled>
   b51f6:	2800      	cmp	r0, #0
   b51f8:	d1df      	bne.n	b51ba <pinAvailable+0x6>
  return true; // 'pin' is available
   b51fa:	2001      	movs	r0, #1
   b51fc:	e7de      	b.n	b51bc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b51fe:	2801      	cmp	r0, #1
   b5200:	d809      	bhi.n	b5216 <pinAvailable+0x62>
   b5202:	f000 f8ad 	bl	b5360 <_Z19__fetch_global_Wirev>
   b5206:	2100      	movs	r1, #0
   b5208:	7c00      	ldrb	r0, [r0, #16]
   b520a:	f7ff f9fb 	bl	b4604 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b520e:	f080 0001 	eor.w	r0, r0, #1
   b5212:	b2c0      	uxtb	r0, r0
   b5214:	e7d2      	b.n	b51bc <pinAvailable+0x8>
   b5216:	3809      	subs	r0, #9
   b5218:	2801      	cmp	r0, #1
   b521a:	d8ee      	bhi.n	b51fa <pinAvailable+0x46>
   b521c:	f000 f864 	bl	b52e8 <_Z22__fetch_global_Serial1v>
   b5220:	7c00      	ldrb	r0, [r0, #16]
   b5222:	f7ff f9af 	bl	b4584 <hal_usart_is_enabled>
   b5226:	e7f2      	b.n	b520e <pinAvailable+0x5a>
   b5228:	2003e71c 	.word	0x2003e71c
   b522c:	2003e720 	.word	0x2003e720

000b5230 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5230:	2823      	cmp	r0, #35	; 0x23
{
   b5232:	b538      	push	{r3, r4, r5, lr}
   b5234:	4604      	mov	r4, r0
   b5236:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5238:	d80a      	bhi.n	b5250 <pinMode+0x20>
   b523a:	29ff      	cmp	r1, #255	; 0xff
   b523c:	d008      	beq.n	b5250 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b523e:	f7ff ffb9 	bl	b51b4 <pinAvailable>
   b5242:	b128      	cbz	r0, b5250 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5244:	4629      	mov	r1, r5
   b5246:	4620      	mov	r0, r4
}
   b5248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b524c:	f7ff b932 	b.w	b44b4 <HAL_Pin_Mode>
}
   b5250:	bd38      	pop	{r3, r4, r5, pc}

000b5252 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5252:	b538      	push	{r3, r4, r5, lr}
   b5254:	4604      	mov	r4, r0
   b5256:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5258:	f7ff f934 	bl	b44c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b525c:	28ff      	cmp	r0, #255	; 0xff
   b525e:	d010      	beq.n	b5282 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5260:	2806      	cmp	r0, #6
   b5262:	d804      	bhi.n	b526e <digitalWrite+0x1c>
   b5264:	234d      	movs	r3, #77	; 0x4d
   b5266:	fa23 f000 	lsr.w	r0, r3, r0
   b526a:	07c3      	lsls	r3, r0, #31
   b526c:	d409      	bmi.n	b5282 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b526e:	4620      	mov	r0, r4
   b5270:	f7ff ffa0 	bl	b51b4 <pinAvailable>
   b5274:	b128      	cbz	r0, b5282 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5276:	4629      	mov	r1, r5
   b5278:	4620      	mov	r0, r4
}
   b527a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b527e:	f7ff b929 	b.w	b44d4 <HAL_GPIO_Write>
}
   b5282:	bd38      	pop	{r3, r4, r5, pc}

000b5284 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5284:	280d      	cmp	r0, #13
{
   b5286:	b510      	push	{r4, lr}
   b5288:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b528a:	bf9c      	itt	ls
   b528c:	340e      	addls	r4, #14
   b528e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b5290:	4620      	mov	r0, r4
   b5292:	f7ff ff8f 	bl	b51b4 <pinAvailable>
   b5296:	b150      	cbz	r0, b52ae <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5298:	2103      	movs	r1, #3
   b529a:	4620      	mov	r0, r4
   b529c:	f7ff f902 	bl	b44a4 <HAL_Validate_Pin_Function>
   b52a0:	2803      	cmp	r0, #3
   b52a2:	d104      	bne.n	b52ae <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b52a4:	4620      	mov	r0, r4
}
   b52a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b52aa:	f7ff b91b 	b.w	b44e4 <hal_adc_read>
}
   b52ae:	2000      	movs	r0, #0
   b52b0:	bd10      	pop	{r4, pc}

000b52b2 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b52b2:	4770      	bx	lr

000b52b4 <_Z20acquireSerial1Bufferv>:
{
   b52b4:	b538      	push	{r3, r4, r5, lr}
   b52b6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b52b8:	2514      	movs	r5, #20
   b52ba:	462a      	mov	r2, r5
   b52bc:	2100      	movs	r1, #0
   b52be:	f000 f889 	bl	b53d4 <memset>
   b52c2:	8025      	strh	r5, [r4, #0]
   b52c4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b52c6:	4907      	ldr	r1, [pc, #28]	; (b52e4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b52c8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b52ca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b52cc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b52ce:	f000 f86b 	bl	b53a8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b52d2:	4904      	ldr	r1, [pc, #16]	; (b52e4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b52d4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b52d6:	4628      	mov	r0, r5
   b52d8:	f000 f866 	bl	b53a8 <_ZnajRKSt9nothrow_t>
    };
   b52dc:	60e0      	str	r0, [r4, #12]
}
   b52de:	4620      	mov	r0, r4
   b52e0:	bd38      	pop	{r3, r4, r5, pc}
   b52e2:	bf00      	nop
   b52e4:	000b576c 	.word	0x000b576c

000b52e8 <_Z22__fetch_global_Serial1v>:
{
   b52e8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b52ea:	4d0e      	ldr	r5, [pc, #56]	; (b5324 <_Z22__fetch_global_Serial1v+0x3c>)
   b52ec:	7829      	ldrb	r1, [r5, #0]
   b52ee:	f3bf 8f5b 	dmb	ish
   b52f2:	f011 0401 	ands.w	r4, r1, #1
{
   b52f6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b52f8:	d111      	bne.n	b531e <_Z22__fetch_global_Serial1v+0x36>
   b52fa:	4628      	mov	r0, r5
   b52fc:	f7fe fecd 	bl	b409a <__cxa_guard_acquire>
   b5300:	b168      	cbz	r0, b531e <_Z22__fetch_global_Serial1v+0x36>
   b5302:	a801      	add	r0, sp, #4
   b5304:	f7ff ffd6 	bl	b52b4 <_Z20acquireSerial1Bufferv>
   b5308:	aa01      	add	r2, sp, #4
   b530a:	4621      	mov	r1, r4
   b530c:	4806      	ldr	r0, [pc, #24]	; (b5328 <_Z22__fetch_global_Serial1v+0x40>)
   b530e:	f7ff fe15 	bl	b4f3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5312:	4628      	mov	r0, r5
   b5314:	f7fe fec6 	bl	b40a4 <__cxa_guard_release>
   b5318:	4804      	ldr	r0, [pc, #16]	; (b532c <_Z22__fetch_global_Serial1v+0x44>)
   b531a:	f000 f847 	bl	b53ac <atexit>
    return serial1;
}
   b531e:	4802      	ldr	r0, [pc, #8]	; (b5328 <_Z22__fetch_global_Serial1v+0x40>)
   b5320:	b007      	add	sp, #28
   b5322:	bd30      	pop	{r4, r5, pc}
   b5324:	2003e728 	.word	0x2003e728
   b5328:	2003e72c 	.word	0x2003e72c
   b532c:	000b52b3 	.word	0x000b52b3

000b5330 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5330:	4770      	bx	lr
	...

000b5334 <_Z17acquireWireBufferv>:
{
   b5334:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5336:	2520      	movs	r5, #32
   b5338:	2314      	movs	r3, #20
{
   b533a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b533c:	6003      	str	r3, [r0, #0]
   b533e:	6085      	str	r5, [r0, #8]
   b5340:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5342:	4906      	ldr	r1, [pc, #24]	; (b535c <_Z17acquireWireBufferv+0x28>)
   b5344:	4628      	mov	r0, r5
   b5346:	f000 f82f 	bl	b53a8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b534a:	4904      	ldr	r1, [pc, #16]	; (b535c <_Z17acquireWireBufferv+0x28>)
	};
   b534c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b534e:	4628      	mov	r0, r5
   b5350:	f000 f82a 	bl	b53a8 <_ZnajRKSt9nothrow_t>
	};
   b5354:	60e0      	str	r0, [r4, #12]
}
   b5356:	4620      	mov	r0, r4
   b5358:	bd38      	pop	{r3, r4, r5, pc}
   b535a:	bf00      	nop
   b535c:	000b576c 	.word	0x000b576c

000b5360 <_Z19__fetch_global_Wirev>:
{
   b5360:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5362:	4d0e      	ldr	r5, [pc, #56]	; (b539c <_Z19__fetch_global_Wirev+0x3c>)
   b5364:	7829      	ldrb	r1, [r5, #0]
   b5366:	f3bf 8f5b 	dmb	ish
   b536a:	f011 0401 	ands.w	r4, r1, #1
{
   b536e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5370:	d111      	bne.n	b5396 <_Z19__fetch_global_Wirev+0x36>
   b5372:	4628      	mov	r0, r5
   b5374:	f7fe fe91 	bl	b409a <__cxa_guard_acquire>
   b5378:	b168      	cbz	r0, b5396 <_Z19__fetch_global_Wirev+0x36>
   b537a:	a801      	add	r0, sp, #4
   b537c:	f7ff ffda 	bl	b5334 <_Z17acquireWireBufferv>
   b5380:	aa01      	add	r2, sp, #4
   b5382:	4621      	mov	r1, r4
   b5384:	4806      	ldr	r0, [pc, #24]	; (b53a0 <_Z19__fetch_global_Wirev+0x40>)
   b5386:	f7ff fe19 	bl	b4fbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b538a:	4628      	mov	r0, r5
   b538c:	f7fe fe8a 	bl	b40a4 <__cxa_guard_release>
   b5390:	4804      	ldr	r0, [pc, #16]	; (b53a4 <_Z19__fetch_global_Wirev+0x44>)
   b5392:	f000 f80b 	bl	b53ac <atexit>
	return wire;
}
   b5396:	4802      	ldr	r0, [pc, #8]	; (b53a0 <_Z19__fetch_global_Wirev+0x40>)
   b5398:	b007      	add	sp, #28
   b539a:	bd30      	pop	{r4, r5, pc}
   b539c:	2003e744 	.word	0x2003e744
   b53a0:	2003e748 	.word	0x2003e748
   b53a4:	000b5331 	.word	0x000b5331

000b53a8 <_ZnajRKSt9nothrow_t>:
   b53a8:	f7fe be73 	b.w	b4092 <_Znaj>

000b53ac <atexit>:
   b53ac:	2300      	movs	r3, #0
   b53ae:	4601      	mov	r1, r0
   b53b0:	461a      	mov	r2, r3
   b53b2:	4618      	mov	r0, r3
   b53b4:	f000 b85e 	b.w	b5474 <__register_exitproc>

000b53b8 <memcpy>:
   b53b8:	440a      	add	r2, r1
   b53ba:	4291      	cmp	r1, r2
   b53bc:	f100 33ff 	add.w	r3, r0, #4294967295
   b53c0:	d100      	bne.n	b53c4 <memcpy+0xc>
   b53c2:	4770      	bx	lr
   b53c4:	b510      	push	{r4, lr}
   b53c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b53ca:	f803 4f01 	strb.w	r4, [r3, #1]!
   b53ce:	4291      	cmp	r1, r2
   b53d0:	d1f9      	bne.n	b53c6 <memcpy+0xe>
   b53d2:	bd10      	pop	{r4, pc}

000b53d4 <memset>:
   b53d4:	4402      	add	r2, r0
   b53d6:	4603      	mov	r3, r0
   b53d8:	4293      	cmp	r3, r2
   b53da:	d100      	bne.n	b53de <memset+0xa>
   b53dc:	4770      	bx	lr
   b53de:	f803 1b01 	strb.w	r1, [r3], #1
   b53e2:	e7f9      	b.n	b53d8 <memset+0x4>

000b53e4 <srand>:
   b53e4:	b538      	push	{r3, r4, r5, lr}
   b53e6:	4b10      	ldr	r3, [pc, #64]	; (b5428 <srand+0x44>)
   b53e8:	681d      	ldr	r5, [r3, #0]
   b53ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b53ec:	4604      	mov	r4, r0
   b53ee:	b9b3      	cbnz	r3, b541e <srand+0x3a>
   b53f0:	2018      	movs	r0, #24
   b53f2:	f7ff f9db 	bl	b47ac <malloc>
   b53f6:	4602      	mov	r2, r0
   b53f8:	63a8      	str	r0, [r5, #56]	; 0x38
   b53fa:	b920      	cbnz	r0, b5406 <srand+0x22>
   b53fc:	4b0b      	ldr	r3, [pc, #44]	; (b542c <srand+0x48>)
   b53fe:	480c      	ldr	r0, [pc, #48]	; (b5430 <srand+0x4c>)
   b5400:	2142      	movs	r1, #66	; 0x42
   b5402:	f7ff f9f3 	bl	b47ec <__assert_func>
   b5406:	490b      	ldr	r1, [pc, #44]	; (b5434 <srand+0x50>)
   b5408:	4b0b      	ldr	r3, [pc, #44]	; (b5438 <srand+0x54>)
   b540a:	e9c0 1300 	strd	r1, r3, [r0]
   b540e:	4b0b      	ldr	r3, [pc, #44]	; (b543c <srand+0x58>)
   b5410:	6083      	str	r3, [r0, #8]
   b5412:	230b      	movs	r3, #11
   b5414:	8183      	strh	r3, [r0, #12]
   b5416:	2100      	movs	r1, #0
   b5418:	2001      	movs	r0, #1
   b541a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b541e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5420:	2200      	movs	r2, #0
   b5422:	611c      	str	r4, [r3, #16]
   b5424:	615a      	str	r2, [r3, #20]
   b5426:	bd38      	pop	{r3, r4, r5, pc}
   b5428:	2003e628 	.word	0x2003e628
   b542c:	000b576d 	.word	0x000b576d
   b5430:	000b5784 	.word	0x000b5784
   b5434:	abcd330e 	.word	0xabcd330e
   b5438:	e66d1234 	.word	0xe66d1234
   b543c:	0005deec 	.word	0x0005deec

000b5440 <strcmp>:
   b5440:	f810 2b01 	ldrb.w	r2, [r0], #1
   b5444:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5448:	2a01      	cmp	r2, #1
   b544a:	bf28      	it	cs
   b544c:	429a      	cmpcs	r2, r3
   b544e:	d0f7      	beq.n	b5440 <strcmp>
   b5450:	1ad0      	subs	r0, r2, r3
   b5452:	4770      	bx	lr

000b5454 <strcpy>:
   b5454:	4603      	mov	r3, r0
   b5456:	f811 2b01 	ldrb.w	r2, [r1], #1
   b545a:	f803 2b01 	strb.w	r2, [r3], #1
   b545e:	2a00      	cmp	r2, #0
   b5460:	d1f9      	bne.n	b5456 <strcpy+0x2>
   b5462:	4770      	bx	lr

000b5464 <strlen>:
   b5464:	4603      	mov	r3, r0
   b5466:	f813 2b01 	ldrb.w	r2, [r3], #1
   b546a:	2a00      	cmp	r2, #0
   b546c:	d1fb      	bne.n	b5466 <strlen+0x2>
   b546e:	1a18      	subs	r0, r3, r0
   b5470:	3801      	subs	r0, #1
   b5472:	4770      	bx	lr

000b5474 <__register_exitproc>:
   b5474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5478:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5534 <__register_exitproc+0xc0>
   b547c:	4606      	mov	r6, r0
   b547e:	f8d8 0000 	ldr.w	r0, [r8]
   b5482:	461f      	mov	r7, r3
   b5484:	460d      	mov	r5, r1
   b5486:	4691      	mov	r9, r2
   b5488:	f000 f856 	bl	b5538 <__retarget_lock_acquire_recursive>
   b548c:	4b25      	ldr	r3, [pc, #148]	; (b5524 <__register_exitproc+0xb0>)
   b548e:	681c      	ldr	r4, [r3, #0]
   b5490:	b934      	cbnz	r4, b54a0 <__register_exitproc+0x2c>
   b5492:	4c25      	ldr	r4, [pc, #148]	; (b5528 <__register_exitproc+0xb4>)
   b5494:	601c      	str	r4, [r3, #0]
   b5496:	4b25      	ldr	r3, [pc, #148]	; (b552c <__register_exitproc+0xb8>)
   b5498:	b113      	cbz	r3, b54a0 <__register_exitproc+0x2c>
   b549a:	681b      	ldr	r3, [r3, #0]
   b549c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b54a0:	6863      	ldr	r3, [r4, #4]
   b54a2:	2b1f      	cmp	r3, #31
   b54a4:	dd07      	ble.n	b54b6 <__register_exitproc+0x42>
   b54a6:	f8d8 0000 	ldr.w	r0, [r8]
   b54aa:	f000 f847 	bl	b553c <__retarget_lock_release_recursive>
   b54ae:	f04f 30ff 	mov.w	r0, #4294967295
   b54b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b54b6:	b34e      	cbz	r6, b550c <__register_exitproc+0x98>
   b54b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b54bc:	b988      	cbnz	r0, b54e2 <__register_exitproc+0x6e>
   b54be:	4b1c      	ldr	r3, [pc, #112]	; (b5530 <__register_exitproc+0xbc>)
   b54c0:	b923      	cbnz	r3, b54cc <__register_exitproc+0x58>
   b54c2:	f8d8 0000 	ldr.w	r0, [r8]
   b54c6:	f000 f838 	bl	b553a <__retarget_lock_release>
   b54ca:	e7f0      	b.n	b54ae <__register_exitproc+0x3a>
   b54cc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b54d0:	f7ff f96c 	bl	b47ac <malloc>
   b54d4:	2800      	cmp	r0, #0
   b54d6:	d0f4      	beq.n	b54c2 <__register_exitproc+0x4e>
   b54d8:	2300      	movs	r3, #0
   b54da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b54de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b54e2:	6863      	ldr	r3, [r4, #4]
   b54e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b54e8:	2201      	movs	r2, #1
   b54ea:	409a      	lsls	r2, r3
   b54ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b54f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b54f4:	4313      	orrs	r3, r2
   b54f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b54fa:	2e02      	cmp	r6, #2
   b54fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5500:	bf02      	ittt	eq
   b5502:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5506:	4313      	orreq	r3, r2
   b5508:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b550c:	6863      	ldr	r3, [r4, #4]
   b550e:	f8d8 0000 	ldr.w	r0, [r8]
   b5512:	1c5a      	adds	r2, r3, #1
   b5514:	3302      	adds	r3, #2
   b5516:	6062      	str	r2, [r4, #4]
   b5518:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b551c:	f000 f80e 	bl	b553c <__retarget_lock_release_recursive>
   b5520:	2000      	movs	r0, #0
   b5522:	e7c6      	b.n	b54b2 <__register_exitproc+0x3e>
   b5524:	2003e7e8 	.word	0x2003e7e8
   b5528:	2003e75c 	.word	0x2003e75c
   b552c:	00000000 	.word	0x00000000
   b5530:	000b47ad 	.word	0x000b47ad
   b5534:	2003e68c 	.word	0x2003e68c

000b5538 <__retarget_lock_acquire_recursive>:
   b5538:	4770      	bx	lr

000b553a <__retarget_lock_release>:
   b553a:	4770      	bx	lr

000b553c <__retarget_lock_release_recursive>:
   b553c:	4770      	bx	lr

000b553e <link_code_end>:
	...

000b5540 <dynalib_user>:
   b5540:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5550:	0000 0000 754d 746c 7069 656c 6578 2e72     ....Multiplexer.
   b5560:	6573 2874 2029 203e 6176 756c 2065 756d     set() > value mu
   b5570:	7473 6220 2065 6e69 7420 6568 7220 6e61     st be in the ran
   b5580:	6567 6f20 2066 2e30 2e2e 3531 202c 6176     ge of 0...15, va
   b5590:	756c 2065 203d 6425 000a 4552 5f51 4550     lue = %d..REQ_PE
   b55a0:	4341 0045 5250 474f 505f 4145 4543 5200     ACE.PROG_PEACE.R
   b55b0:	5145 545f 5548 424d 555f 0050 5250 474f     EQ_THUMB_UP.PROG
   b55c0:	545f 5548 424d 555f 0050 4552 5f51 4542     _THUMB_UP.REQ_BE
   b55d0:	5453 4200 5345 5f54 4550 4341 0045 4542     ST.BEST_PEACE.BE
   b55e0:	5453 545f 5548 424d 555f 0050 4542 5453     ST_THUMB_UP.BEST
   b55f0:	555f 4b4e 4f4e 4e57 0000 0000               _UNKNOWN....

000b55fc <_ZTVN5spark13EthernetClassE>:
	...
   b5604:	486b 000b 4861 000b 4857 000b 484d 000b     kH..aH..WH..MH..
   b5614:	4841 000b 4835 000b 5091 000b 5099 000b     AH..5H...P...P..
   b5624:	4829 000b 4821 000b 4817 000b 480d 000b     )H..!H...H...H..
   b5634:	50c9 000b 7061 0070 5925 252d 2d6d 6425     .P..app.%Y-%m-%d
   b5644:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5654:	6d69 0065                                   ime.

000b5658 <_ZTV9IPAddress>:
	...
   b5660:	4ce1 000b 4cd1 000b 4cd3 000b               .L...L...L..

000b566c <_ZTV9USBSerial>:
	...
   b5674:	4dc7 000b 4e2f 000b 4e05 000b 49fd 000b     .M../N...N...I..
   b5684:	4df7 000b 4dc9 000b 4dd9 000b 4e29 000b     .M...M...M..)N..
   b5694:	4de9 000b 4dc1 000b                         .M...M..

000b569c <_ZTV11USARTSerial>:
	...
   b56a4:	4ec1 000b 4f2d 000b 4f05 000b 49fd 000b     .N..-O...O...I..
   b56b4:	4ed5 000b 4ef1 000b 4ee3 000b 4eff 000b     .N...N...N...N..
   b56c4:	4ec3 000b 4ec7 000b                         .N...N..

000b56cc <_ZTV7TwoWire>:
	...
   b56d4:	4f65 000b 4faf 000b 4f87 000b 4f67 000b     eO...O...O..gO..
   b56e4:	4f8f 000b 4f97 000b 4f9f 000b 4fa7 000b     .O...O...O...O..

000b56f4 <_ZTVN5spark9WiFiClassE>:
	...
   b56fc:	5033 000b 5029 000b 501f 000b 4fe1 000b     3P..)P...P...O..
   b570c:	4b5d 000b 5013 000b 5091 000b 5099 000b     ]K...P...P...P..
   b571c:	5007 000b 4fff 000b 4ff5 000b 4feb 000b     .P...O...O...O..
   b572c:	50c9 000b                                   .P..

000b5730 <_ZTVN5spark12NetworkClassE>:
	...
   b5738:	5051 000b 505b 000b 5065 000b 506f 000b     QP..[P..eP..oP..
   b5748:	5079 000b 5085 000b 5091 000b 5099 000b     yP...P...P...P..
   b5758:	50a1 000b 50ad 000b 50b5 000b 50bf 000b     .P...P...P...P..
   b5768:	50c9 000b                                   .P..

000b576c <_ZSt7nothrow>:
   b576c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b577c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b578c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b579c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b57ac:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b57bc:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b57cc:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b57dc:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b57ec:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b57fc:	646e 632e                                    nd.c.

000b5801 <link_const_variable_data_end>:
   b5801:	00          	.byte	0x00
	...

000b5804 <link_constructors_location>:
   b5804:	000b4449 	.word	0x000b4449
   b5808:	000b4875 	.word	0x000b4875
   b580c:	000b489d 	.word	0x000b489d
   b5810:	000b49ed 	.word	0x000b49ed
   b5814:	000b4b69 	.word	0x000b4b69
   b5818:	000b4b79 	.word	0x000b4b79
   b581c:	000b4b8d 	.word	0x000b4b8d
   b5820:	000b503d 	.word	0x000b503d
   b5824:	000b51a1 	.word	0x000b51a1

000b5828 <link_constructors_end>:
	...
