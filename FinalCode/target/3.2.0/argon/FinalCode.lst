
c:/Users/deedp/Documents/IOT/SmartGlove/FinalCode/target/3.2.0/argon/FinalCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ea4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b6ec0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e4f0  000b6ec4  0001e4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000028c  2003e564  2003e564  0002e564  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b6f38  000b6f38  00026f38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b6f60  000b6f60  00026f60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00120875  00000000  00000000  00026f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00014861  00000000  00000000  001477d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0003829b  00000000  00000000  0015c03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002d78  00000000  00000000  001942d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000a790  00000000  00000000  0019704d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003be72  00000000  00000000  001a17dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00041afb  00000000  00000000  001dd64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012da79  00000000  00000000  0021f14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007ff0  00000000  00000000  0034cbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fa7b 	bl	b6528 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fa9d 	bl	b6578 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e4f0 	.word	0x2003e4f0
   b4048:	000b6ec4 	.word	0x000b6ec4
   b404c:	2003e564 	.word	0x2003e564
   b4050:	2003e564 	.word	0x2003e564
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fa9f 	bl	b55a0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6e94 	.word	0x000b6e94
   b407c:	000b6eb8 	.word	0x000b6eb8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b9a8 	b.w	b43d4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fa71 	bl	b456c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 ba3f 	b.w	b5510 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b865 	b.w	b5160 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b863 	b.w	b5160 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b869 	b.w	b5170 <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	2100      	movs	r1, #0
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 ffbe 	bl	b5028 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4dc9 	.word	0x000b4dc9

000b40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b4:	7800      	ldrb	r0, [r0, #0]
   b40b6:	fab0 f080 	clz	r0, r0
   b40ba:	0940      	lsrs	r0, r0, #5
   b40bc:	4770      	bx	lr

000b40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40be:	2301      	movs	r3, #1
   b40c0:	7003      	strb	r3, [r0, #0]
   b40c2:	4770      	bx	lr

000b40c4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c4:	b40e      	push	{r1, r2, r3}
   b40c6:	b503      	push	{r0, r1, lr}
   b40c8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ca:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40cc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d2:	f001 f992 	bl	b53fa <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d6:	b002      	add	sp, #8
   b40d8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40dc:	b003      	add	sp, #12
   b40de:	4770      	bx	lr

000b40e0 <_ZN11Multiplexer3setEh>:
    void disable() {
        digitalWrite(en, HIGH);
    }

    void set(byte index) {
        if (index < 0 || index > 15) {
   b40e0:	290f      	cmp	r1, #15
    void set(byte index) {
   b40e2:	b538      	push	{r3, r4, r5, lr}
   b40e4:	4605      	mov	r5, r0
   b40e6:	460c      	mov	r4, r1
        if (index < 0 || index > 15) {
   b40e8:	d906      	bls.n	b40f8 <_ZN11Multiplexer3setEh+0x18>
            Serial.printf("Multiplexer.set() > value must be in the range of 0...15, value = %d\n", index);
   b40ea:	f001 fb73 	bl	b57d4 <_Z16_fetch_usbserialv>
   b40ee:	490d      	ldr	r1, [pc, #52]	; (b4124 <_ZN11Multiplexer3setEh+0x44>)
   b40f0:	4622      	mov	r2, r4
   b40f2:	f7ff ffe7 	bl	b40c4 <_ZN5Print6printfEPKcz>

        digitalWrite(s0, (index & 0x1) >> 0);
        digitalWrite(s1, (index & 0x2) >> 1);
        digitalWrite(s2, (index & 0x4) >> 2);
        digitalWrite(s3, (index & 0x8) >> 3);
    }
   b40f6:	bd38      	pop	{r3, r4, r5, pc}
        digitalWrite(s0, (index & 0x1) >> 0);
   b40f8:	7840      	ldrb	r0, [r0, #1]
   b40fa:	f001 0101 	and.w	r1, r1, #1
   b40fe:	f002 f824 	bl	b614a <digitalWrite>
        digitalWrite(s1, (index & 0x2) >> 1);
   b4102:	78a8      	ldrb	r0, [r5, #2]
   b4104:	f3c4 0140 	ubfx	r1, r4, #1, #1
   b4108:	f002 f81f 	bl	b614a <digitalWrite>
        digitalWrite(s2, (index & 0x4) >> 2);
   b410c:	78e8      	ldrb	r0, [r5, #3]
   b410e:	f3c4 0180 	ubfx	r1, r4, #2, #1
   b4112:	f002 f81a 	bl	b614a <digitalWrite>
        digitalWrite(s3, (index & 0x8) >> 3);
   b4116:	7928      	ldrb	r0, [r5, #4]
   b4118:	08e1      	lsrs	r1, r4, #3
    }
   b411a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(s3, (index & 0x8) >> 3);
   b411e:	f002 b814 	b.w	b614a <digitalWrite>
   b4122:	bf00      	nop
   b4124:	000b6720 	.word	0x000b6720

000b4128 <_ZN11Multiplexer4readEh>:

    int read(byte index) {
   b4128:	b538      	push	{r3, r4, r5, lr}
   b412a:	4604      	mov	r4, r0
        set(index);
   b412c:	f7ff ffd8 	bl	b40e0 <_ZN11Multiplexer3setEh>
        digitalWrite(en, LOW);
   b4130:	7820      	ldrb	r0, [r4, #0]
   b4132:	2100      	movs	r1, #0
   b4134:	f002 f809 	bl	b614a <digitalWrite>
        return read();
    }

    int read() {
        enable();
        int val = analogRead(sig);
   b4138:	7960      	ldrb	r0, [r4, #5]
   b413a:	f002 f81f 	bl	b617c <analogRead>
        digitalWrite(en, HIGH);
   b413e:	2101      	movs	r1, #1
        int val = analogRead(sig);
   b4140:	4605      	mov	r5, r0
        digitalWrite(en, HIGH);
   b4142:	7820      	ldrb	r0, [r4, #0]
   b4144:	f002 f801 	bl	b614a <digitalWrite>
    }
   b4148:	4628      	mov	r0, r5
   b414a:	bd38      	pop	{r3, r4, r5, pc}

000b414c <_ZN21MultiplexerCollectionC1EP11Multiplexer>:
    // This results in a simple range conversion of [VAL * (2^8/2^12)] or [VAL / 2^4] or [VAL/16]
    // Fingers range now between 0-255

    MultiplexerCollection() {}

    MultiplexerCollection(Multiplexer *mulp) {
   b414c:	b538      	push	{r3, r4, r5, lr}
   b414e:	460d      	mov	r5, r1
   b4150:	4604      	mov	r4, r0
        thumb = mulp->read(M_THUMB) / 16;
   b4152:	2108      	movs	r1, #8
   b4154:	4628      	mov	r0, r5
   b4156:	f7ff ffe7 	bl	b4128 <_ZN11Multiplexer4readEh>
   b415a:	2800      	cmp	r0, #0
   b415c:	bfb8      	it	lt
   b415e:	300f      	addlt	r0, #15
   b4160:	1100      	asrs	r0, r0, #4
   b4162:	7020      	strb	r0, [r4, #0]
        pointer = mulp->read(M_POINTER) / 16;
   b4164:	2107      	movs	r1, #7
   b4166:	4628      	mov	r0, r5
   b4168:	f7ff ffde 	bl	b4128 <_ZN11Multiplexer4readEh>
   b416c:	1e03      	subs	r3, r0, #0
   b416e:	bfb8      	it	lt
   b4170:	330f      	addlt	r3, #15
   b4172:	111b      	asrs	r3, r3, #4
   b4174:	7063      	strb	r3, [r4, #1]
        middle = mulp->read(M_MIDDLE) / 16;
   b4176:	2109      	movs	r1, #9
   b4178:	4628      	mov	r0, r5
   b417a:	f7ff ffd5 	bl	b4128 <_ZN11Multiplexer4readEh>
   b417e:	1e03      	subs	r3, r0, #0
   b4180:	bfb8      	it	lt
   b4182:	330f      	addlt	r3, #15
   b4184:	111b      	asrs	r3, r3, #4
   b4186:	70a3      	strb	r3, [r4, #2]
        ring = mulp->read(M_RING) / 16;
   b4188:	210c      	movs	r1, #12
   b418a:	4628      	mov	r0, r5
   b418c:	f7ff ffcc 	bl	b4128 <_ZN11Multiplexer4readEh>
   b4190:	1e03      	subs	r3, r0, #0
   b4192:	bfb8      	it	lt
   b4194:	330f      	addlt	r3, #15
   b4196:	111b      	asrs	r3, r3, #4
   b4198:	70e3      	strb	r3, [r4, #3]
        pinky = mulp->read(M_PINKY) / 16;
   b419a:	210d      	movs	r1, #13
   b419c:	4628      	mov	r0, r5
   b419e:	f7ff ffc3 	bl	b4128 <_ZN11Multiplexer4readEh>
   b41a2:	2800      	cmp	r0, #0
   b41a4:	bfb8      	it	lt
   b41a6:	300f      	addlt	r0, #15
   b41a8:	1100      	asrs	r0, r0, #4
   b41aa:	7120      	strb	r0, [r4, #4]
    }
   b41ac:	4620      	mov	r0, r4
   b41ae:	bd38      	pop	{r3, r4, r5, pc}

000b41b0 <_ZN21MultiplexerCollection12saveToEEPROMEi>:
        val += abs(ring - mulpC->ring);
        val += abs(pinky - mulpC->pinky) ;
        return val;
    }

    void saveToEEPROM(int index) {
   b41b0:	b538      	push	{r3, r4, r5, lr}
   b41b2:	4605      	mov	r5, r0
        int startIndex = index * 5;
   b41b4:	eb01 0481 	add.w	r4, r1, r1, lsl #2
        EEPROM.write(startIndex + 0, thumb);
   b41b8:	f002 f836 	bl	b6228 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   b41bc:	7829      	ldrb	r1, [r5, #0]
   b41be:	4620      	mov	r0, r4
   b41c0:	f000 fe22 	bl	b4e08 <HAL_EEPROM_Write>
        EEPROM.write(startIndex + 1, pointer);
   b41c4:	f002 f830 	bl	b6228 <_Z21__fetch_global_EEPROMv>
   b41c8:	7869      	ldrb	r1, [r5, #1]
   b41ca:	1c60      	adds	r0, r4, #1
   b41cc:	f000 fe1c 	bl	b4e08 <HAL_EEPROM_Write>
        EEPROM.write(startIndex + 2, middle);
   b41d0:	f002 f82a 	bl	b6228 <_Z21__fetch_global_EEPROMv>
   b41d4:	78a9      	ldrb	r1, [r5, #2]
   b41d6:	1ca0      	adds	r0, r4, #2
   b41d8:	f000 fe16 	bl	b4e08 <HAL_EEPROM_Write>
        EEPROM.write(startIndex + 3, ring);
   b41dc:	f002 f824 	bl	b6228 <_Z21__fetch_global_EEPROMv>
   b41e0:	78e9      	ldrb	r1, [r5, #3]
   b41e2:	1ce0      	adds	r0, r4, #3
   b41e4:	f000 fe10 	bl	b4e08 <HAL_EEPROM_Write>
        EEPROM.write(startIndex + 4, pinky);
   b41e8:	f002 f81e 	bl	b6228 <_Z21__fetch_global_EEPROMv>
   b41ec:	7929      	ldrb	r1, [r5, #4]
   b41ee:	1d20      	adds	r0, r4, #4
    }
   b41f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b41f4:	f000 be08 	b.w	b4e08 <HAL_EEPROM_Write>

000b41f8 <_Z11readCommandPhS_>:
    // P_11101 = 0x1D,
    // P_11110 = 0x1E,
    // P_11111 = 0x1F,
};

void readCommand(byte *mainCmd, byte *data) {
   b41f8:	b538      	push	{r3, r4, r5, lr}
   b41fa:	460c      	mov	r4, r1
   b41fc:	4605      	mov	r5, r0
    if (Serial.available() > 0) {
   b41fe:	f001 fae9 	bl	b57d4 <_Z16_fetch_usbserialv>
   b4202:	6803      	ldr	r3, [r0, #0]
   b4204:	691b      	ldr	r3, [r3, #16]
   b4206:	4798      	blx	r3
   b4208:	2800      	cmp	r0, #0
   b420a:	dd0a      	ble.n	b4222 <_Z11readCommandPhS_+0x2a>
        byte packet = Serial.read();
   b420c:	f001 fae2 	bl	b57d4 <_Z16_fetch_usbserialv>
   b4210:	6803      	ldr	r3, [r0, #0]
   b4212:	695b      	ldr	r3, [r3, #20]
   b4214:	4798      	blx	r3
        *mainCmd = (packet & 0xE0) >> 5;
   b4216:	f3c0 1342 	ubfx	r3, r0, #5, #3
        *data = (packet & 0x1F);
   b421a:	f000 001f 	and.w	r0, r0, #31
        *mainCmd = (packet & 0xE0) >> 5;
   b421e:	702b      	strb	r3, [r5, #0]
        *data = (packet & 0x1F);
   b4220:	7020      	strb	r0, [r4, #0]
    }
}
   b4222:	bd38      	pop	{r3, r4, r5, pc}

000b4224 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>:
                break;
            }
        }
    }

    int getBestCollection(MultiplexerCollection *comparedCol) {
   b4224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        int bestVal = 1000000000; 
   b4228:	f8df c084 	ldr.w	ip, [pc, #132]	; b42b0 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x8c>
   b422c:	6806      	ldr	r6, [r0, #0]
        int bestColIndex = -1;

        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b422e:	2700      	movs	r7, #0
        int bestColIndex = -1;
   b4230:	f04f 30ff 	mov.w	r0, #4294967295
        return thumb != 0 ||
   b4234:	7833      	ldrb	r3, [r6, #0]
               pointer != 0 ||
   b4236:	f896 8001 	ldrb.w	r8, [r6, #1]
               middle != 0 ||
   b423a:	78b5      	ldrb	r5, [r6, #2]
               ring != 0 ||
   b423c:	78f4      	ldrb	r4, [r6, #3]
               pinky != 0;
   b423e:	7932      	ldrb	r2, [r6, #4]
               ring != 0 ||
   b4240:	ea48 0e03 	orr.w	lr, r8, r3
   b4244:	ea45 0e0e 	orr.w	lr, r5, lr
   b4248:	ea44 0e0e 	orr.w	lr, r4, lr
   b424c:	ea52 0e0e 	orrs.w	lr, r2, lr
   b4250:	d027      	beq.n	b42a2 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x7e>
        val += abs(thumb - mulpC->thumb) ;
   b4252:	f891 e000 	ldrb.w	lr, [r1]
   b4256:	eba3 030e 	sub.w	r3, r3, lr
        val += abs(pointer - mulpC->pointer);
   b425a:	f891 e001 	ldrb.w	lr, [r1, #1]
        val += abs(thumb - mulpC->thumb) ;
   b425e:	2b00      	cmp	r3, #0
        val += abs(pointer - mulpC->pointer);
   b4260:	eba8 0e0e 	sub.w	lr, r8, lr
        val += abs(thumb - mulpC->thumb) ;
   b4264:	bfb8      	it	lt
   b4266:	425b      	neglt	r3, r3
        val += abs(pointer - mulpC->pointer);
   b4268:	f1be 0f00 	cmp.w	lr, #0
   b426c:	bfb8      	it	lt
   b426e:	f1ce 0e00 	rsblt	lr, lr, #0
   b4272:	449e      	add	lr, r3
        val += abs(middle - mulpC->middle);
   b4274:	788b      	ldrb	r3, [r1, #2]
   b4276:	1aeb      	subs	r3, r5, r3
        val += abs(ring - mulpC->ring);
   b4278:	78cd      	ldrb	r5, [r1, #3]
        val += abs(middle - mulpC->middle);
   b427a:	2b00      	cmp	r3, #0
        val += abs(ring - mulpC->ring);
   b427c:	eba4 0405 	sub.w	r4, r4, r5
        val += abs(middle - mulpC->middle);
   b4280:	bfb8      	it	lt
   b4282:	425b      	neglt	r3, r3
        val += abs(ring - mulpC->ring);
   b4284:	2c00      	cmp	r4, #0
        val += abs(middle - mulpC->middle);
   b4286:	4473      	add	r3, lr
        val += abs(ring - mulpC->ring);
   b4288:	bfb8      	it	lt
   b428a:	4264      	neglt	r4, r4
   b428c:	441c      	add	r4, r3
        val += abs(pinky - mulpC->pinky) ;
   b428e:	790b      	ldrb	r3, [r1, #4]
   b4290:	1ad3      	subs	r3, r2, r3
   b4292:	2b00      	cmp	r3, #0
   b4294:	bfb8      	it	lt
   b4296:	425b      	neglt	r3, r3
   b4298:	4423      	add	r3, r4
            MultiplexerCollection *curSign = &allSigns[i];
            if (curSign->isSet()) {
                int curVal = curSign->compare(comparedCol);
                if (curVal < bestVal) {
   b429a:	4563      	cmp	r3, ip
   b429c:	bfbc      	itt	lt
   b429e:	4638      	movlt	r0, r7
   b42a0:	469c      	movlt	ip, r3
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b42a2:	3701      	adds	r7, #1
   b42a4:	2f08      	cmp	r7, #8
   b42a6:	f106 0605 	add.w	r6, r6, #5
   b42aa:	d1c3      	bne.n	b4234 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection+0x10>
                }
            }
        }

        return bestColIndex;
    }
   b42ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b42b0:	3b9aca00 	.word	0x3b9aca00

000b42b4 <_ZN17ProgramController17getBestCollectionEv>:

    int getBestCollection() {
   b42b4:	b513      	push	{r0, r1, r4, lr}
   b42b6:	4604      	mov	r4, r0
        MultiplexerCollection mpc(myMulp);
   b42b8:	6841      	ldr	r1, [r0, #4]
   b42ba:	4668      	mov	r0, sp
   b42bc:	f7ff ff46 	bl	b414c <_ZN21MultiplexerCollectionC1EP11Multiplexer>
        return getBestCollection(&mpc);
   b42c0:	4669      	mov	r1, sp
   b42c2:	4620      	mov	r0, r4
   b42c4:	f7ff ffae 	bl	b4224 <_ZN17ProgramController17getBestCollectionEP21MultiplexerCollection>
    }
   b42c8:	b002      	add	sp, #8
   b42ca:	bd10      	pop	{r4, pc}

000b42cc <_ZN17ProgramController13handleRequestEh>:
            allSigns[fingerPos].saveToEEPROM(fingerPos);
            Serial.printf("Programmed finger pos %x\n", fingerPos);
        }
    }

    void handleRequest(byte request) {
   b42cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b42d0:	4606      	mov	r6, r0
        Request req = (Request)request;

        switch (req) {
   b42d2:	b121      	cbz	r1, b42de <_ZN17ProgramController13handleRequestEh+0x12>
   b42d4:	2901      	cmp	r1, #1
   b42d6:	d00c      	beq.n	b42f2 <_ZN17ProgramController13handleRequestEh+0x26>
            Serial.printf("Wipe completed\n");
        } break;
        default:
            break;
        }
    }
   b42d8:	b002      	add	sp, #8
   b42da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int bestCol = getBestCollection();
   b42de:	f7ff ffe9 	bl	b42b4 <_ZN17ProgramController17getBestCollectionEv>
   b42e2:	9001      	str	r0, [sp, #4]
            Serial.printf("Best collection is %d\n", bestCol);
   b42e4:	f001 fa76 	bl	b57d4 <_Z16_fetch_usbserialv>
   b42e8:	9a01      	ldr	r2, [sp, #4]
   b42ea:	4916      	ldr	r1, [pc, #88]	; (b4344 <_ZN17ProgramController13handleRequestEh+0x78>)
   b42ec:	f7ff feea 	bl	b40c4 <_ZN5Print6printfEPKcz>
    }
   b42f0:	e7f2      	b.n	b42d8 <_ZN17ProgramController13handleRequestEh+0xc>
            Serial.printf("Beginning wipe\n");
   b42f2:	f001 fa6f 	bl	b57d4 <_Z16_fetch_usbserialv>
   b42f6:	4914      	ldr	r1, [pc, #80]	; (b4348 <_ZN17ProgramController13handleRequestEh+0x7c>)
                Serial.printf("Wiped %d/%d\n", i + 1, HAND_POS_COUNT);
   b42f8:	f8df 8054 	ldr.w	r8, [pc, #84]	; b4350 <_ZN17ProgramController13handleRequestEh+0x84>
            Serial.printf("Beginning wipe\n");
   b42fc:	f7ff fee2 	bl	b40c4 <_ZN5Print6printfEPKcz>
            for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4300:	2400      	movs	r4, #0
        thumb = 0;
   b4302:	4625      	mov	r5, r4
                Serial.printf("Wiped %d/%d\n", i + 1, HAND_POS_COUNT);
   b4304:	4627      	mov	r7, r4
   b4306:	3401      	adds	r4, #1
   b4308:	f001 fa64 	bl	b57d4 <_Z16_fetch_usbserialv>
   b430c:	2308      	movs	r3, #8
   b430e:	4622      	mov	r2, r4
   b4310:	4641      	mov	r1, r8
   b4312:	f7ff fed7 	bl	b40c4 <_ZN5Print6printfEPKcz>
                allSigns[i].clear();
   b4316:	6831      	ldr	r1, [r6, #0]
   b4318:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   b431c:	3b05      	subs	r3, #5
   b431e:	18ca      	adds	r2, r1, r3
   b4320:	54cd      	strb	r5, [r1, r3]
        pointer = 0;
   b4322:	7055      	strb	r5, [r2, #1]
        middle = 0;
   b4324:	7095      	strb	r5, [r2, #2]
        ring = 0;
   b4326:	70d5      	strb	r5, [r2, #3]
        pinky = 0;
   b4328:	7115      	strb	r5, [r2, #4]
                allSigns[i].saveToEEPROM(i);
   b432a:	6830      	ldr	r0, [r6, #0]
   b432c:	4639      	mov	r1, r7
   b432e:	4418      	add	r0, r3
   b4330:	f7ff ff3e 	bl	b41b0 <_ZN21MultiplexerCollection12saveToEEPROMEi>
            for (int i = 0; i < HAND_POS_COUNT; i++) {
   b4334:	2c08      	cmp	r4, #8
   b4336:	d1e5      	bne.n	b4304 <_ZN17ProgramController13handleRequestEh+0x38>
            Serial.printf("Wipe completed\n");
   b4338:	f001 fa4c 	bl	b57d4 <_Z16_fetch_usbserialv>
   b433c:	4903      	ldr	r1, [pc, #12]	; (b434c <_ZN17ProgramController13handleRequestEh+0x80>)
   b433e:	f7ff fec1 	bl	b40c4 <_ZN5Print6printfEPKcz>
    }
   b4342:	e7c9      	b.n	b42d8 <_ZN17ProgramController13handleRequestEh+0xc>
   b4344:	000b6766 	.word	0x000b6766
   b4348:	000b677d 	.word	0x000b677d
   b434c:	000b679a 	.word	0x000b679a
   b4350:	000b678d 	.word	0x000b678d

000b4354 <_Z12tableMatchesiP14FingerPositionS0_>:
#ifndef _SEQUENCE_RUNNER_H_
#define _SEQUENCE_RUNNER_H_

#include "SharedCommands.h"

bool tableMatches(int sequenceLength, FingerPosition *tableA, FingerPosition *tableB) {
   b4354:	b530      	push	{r4, r5, lr}
        for (int i = 0; i < sequenceLength; i++) {
   b4356:	2300      	movs	r3, #0
   b4358:	4283      	cmp	r3, r0
   b435a:	da05      	bge.n	b4368 <_Z12tableMatchesiP14FingerPositionS0_+0x14>
            if (tableA[i] != tableB[i]) {
   b435c:	5ccd      	ldrb	r5, [r1, r3]
   b435e:	5cd4      	ldrb	r4, [r2, r3]
   b4360:	42a5      	cmp	r5, r4
   b4362:	d103      	bne.n	b436c <_Z12tableMatchesiP14FingerPositionS0_+0x18>
        for (int i = 0; i < sequenceLength; i++) {
   b4364:	3301      	adds	r3, #1
   b4366:	e7f7      	b.n	b4358 <_Z12tableMatchesiP14FingerPositionS0_+0x4>
                return false;
            }
        }

        return true;
   b4368:	2001      	movs	r0, #1
}
   b436a:	bd30      	pop	{r4, r5, pc}
                return false;
   b436c:	2000      	movs	r0, #0
   b436e:	e7fc      	b.n	b436a <_Z12tableMatchesiP14FingerPositionS0_+0x16>

000b4370 <_Z9tablePushiP14FingerPositionS_>:

void tablePush(int sequenceLength, FingerPosition *table, FingerPosition newIndex) {
   b4370:	b570      	push	{r4, r5, r6, lr}
        for (int i = sequenceLength - 1; i > 0; i--) {
            table[i] = table[i - 1];
   b4372:	2800      	cmp	r0, #0
   b4374:	f1c0 0402 	rsb	r4, r0, #2
void tablePush(int sequenceLength, FingerPosition *table, FingerPosition newIndex) {
   b4378:	4616      	mov	r6, r2
            table[i] = table[i - 1];
   b437a:	bfd8      	it	le
   b437c:	2401      	movle	r4, #1
        for (int i = sequenceLength - 1; i > 0; i--) {
   b437e:	f100 32ff 	add.w	r2, r0, #4294967295
            table[i] = table[i - 1];
   b4382:	f1a0 0002 	sub.w	r0, r0, #2
void tablePush(int sequenceLength, FingerPosition *table, FingerPosition newIndex) {
   b4386:	460d      	mov	r5, r1
            table[i] = table[i - 1];
   b4388:	eb00 0104 	add.w	r1, r0, r4
   b438c:	eb02 0004 	add.w	r0, r2, r4
   b4390:	4429      	add	r1, r5
   b4392:	bfd8      	it	le
   b4394:	2200      	movle	r2, #0
   b4396:	4428      	add	r0, r5
   b4398:	f002 f8d4 	bl	b6544 <memmove>
        }
        table[0] = newIndex;
   b439c:	702e      	strb	r6, [r5, #0]
}
   b439e:	bd70      	pop	{r4, r5, r6, pc}

000b43a0 <_Z10tablePrintiP14FingerPosition>:

void tablePrint(int sequenceLength, FingerPosition *table) {
   b43a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < sequenceLength; i++) {
        Serial.printf("%d  ", table[i]);
   b43a2:	4f0a      	ldr	r7, [pc, #40]	; (b43cc <_Z10tablePrintiP14FingerPosition+0x2c>)
void tablePrint(int sequenceLength, FingerPosition *table) {
   b43a4:	4606      	mov	r6, r0
   b43a6:	460d      	mov	r5, r1
    for (int i = 0; i < sequenceLength; i++) {
   b43a8:	2400      	movs	r4, #0
   b43aa:	42b4      	cmp	r4, r6
   b43ac:	da07      	bge.n	b43be <_Z10tablePrintiP14FingerPosition+0x1e>
        Serial.printf("%d  ", table[i]);
   b43ae:	f001 fa11 	bl	b57d4 <_Z16_fetch_usbserialv>
   b43b2:	5d2a      	ldrb	r2, [r5, r4]
   b43b4:	4639      	mov	r1, r7
   b43b6:	f7ff fe85 	bl	b40c4 <_ZN5Print6printfEPKcz>
    for (int i = 0; i < sequenceLength; i++) {
   b43ba:	3401      	adds	r4, #1
   b43bc:	e7f5      	b.n	b43aa <_Z10tablePrintiP14FingerPosition+0xa>
    }
    Serial.printf("\n");
   b43be:	f001 fa09 	bl	b57d4 <_Z16_fetch_usbserialv>
   b43c2:	4903      	ldr	r1, [pc, #12]	; (b43d0 <_Z10tablePrintiP14FingerPosition+0x30>)
   b43c4:	f7ff fe7e 	bl	b40c4 <_ZN5Print6printfEPKcz>
}
   b43c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b43ca:	bf00      	nop
   b43cc:	000b67aa 	.word	0x000b67aa
   b43d0:	000b6802 	.word	0x000b6802

000b43d4 <setup>:

FingerPosition countUpMatch[] = {P_ROCK, P_GUN, P_PEACE, P_FIST};
FingerPosition countDownMatch[] = {P_FIST, P_PEACE, P_GUN, P_ROCK};
FingerPosition curData[LENGTH_OF_MATCHERS];

void setup() {
   b43d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        pinMode(en, OUTPUT);
   b43d6:	4c24      	ldr	r4, [pc, #144]	; (b4468 <setup+0x94>)
            allSigns[i].loadFromEEPROM(i);
   b43d8:	4e24      	ldr	r6, [pc, #144]	; (b446c <setup+0x98>)
   b43da:	7820      	ldrb	r0, [r4, #0]
   b43dc:	2101      	movs	r1, #1
   b43de:	f001 fea3 	bl	b6128 <pinMode>
        pinMode(s0, OUTPUT);
   b43e2:	7860      	ldrb	r0, [r4, #1]
   b43e4:	2101      	movs	r1, #1
   b43e6:	f001 fe9f 	bl	b6128 <pinMode>
        pinMode(s1, OUTPUT);
   b43ea:	78a0      	ldrb	r0, [r4, #2]
   b43ec:	2101      	movs	r1, #1
   b43ee:	f001 fe9b 	bl	b6128 <pinMode>
        pinMode(s2, OUTPUT);
   b43f2:	78e0      	ldrb	r0, [r4, #3]
   b43f4:	2101      	movs	r1, #1
   b43f6:	f001 fe97 	bl	b6128 <pinMode>
        pinMode(s3, OUTPUT);
   b43fa:	7920      	ldrb	r0, [r4, #4]
   b43fc:	2101      	movs	r1, #1
   b43fe:	f001 fe93 	bl	b6128 <pinMode>
        pinMode(sig, INPUT);
   b4402:	7960      	ldrb	r0, [r4, #5]
   b4404:	2100      	movs	r1, #0
   b4406:	f001 fe8f 	bl	b6128 <pinMode>
        set(index);
   b440a:	79a1      	ldrb	r1, [r4, #6]
   b440c:	4620      	mov	r0, r4
   b440e:	f7ff fe67 	bl	b40e0 <_ZN11Multiplexer3setEh>
        digitalWrite(en, HIGH);
   b4412:	7820      	ldrb	r0, [r4, #0]
   b4414:	2101      	movs	r1, #1
   b4416:	f001 fe98 	bl	b614a <digitalWrite>
   b441a:	2400      	movs	r4, #0
   b441c:	6837      	ldr	r7, [r6, #0]

    void loadFromEEPROM(int index) {
        int startIndex = index * 5;
        thumb = EEPROM.read(startIndex + 0);
   b441e:	f001 ff03 	bl	b6228 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b4422:	4620      	mov	r0, r4
   b4424:	f000 fce8 	bl	b4df8 <HAL_EEPROM_Read>
   b4428:	5538      	strb	r0, [r7, r4]
        pointer = EEPROM.read(startIndex + 1);
   b442a:	f001 fefd 	bl	b6228 <_Z21__fetch_global_EEPROMv>
   b442e:	1c60      	adds	r0, r4, #1
   b4430:	f000 fce2 	bl	b4df8 <HAL_EEPROM_Read>
   b4434:	193d      	adds	r5, r7, r4
   b4436:	7068      	strb	r0, [r5, #1]
        middle = EEPROM.read(startIndex + 2);
   b4438:	f001 fef6 	bl	b6228 <_Z21__fetch_global_EEPROMv>
   b443c:	1ca0      	adds	r0, r4, #2
   b443e:	f000 fcdb 	bl	b4df8 <HAL_EEPROM_Read>
   b4442:	70a8      	strb	r0, [r5, #2]
        ring = EEPROM.read(startIndex + 3);
   b4444:	f001 fef0 	bl	b6228 <_Z21__fetch_global_EEPROMv>
   b4448:	1ce0      	adds	r0, r4, #3
   b444a:	f000 fcd5 	bl	b4df8 <HAL_EEPROM_Read>
   b444e:	70e8      	strb	r0, [r5, #3]
        pinky = EEPROM.read(startIndex + 4);
   b4450:	f001 feea 	bl	b6228 <_Z21__fetch_global_EEPROMv>
   b4454:	1d20      	adds	r0, r4, #4
   b4456:	f000 fccf 	bl	b4df8 <HAL_EEPROM_Read>
        for (int i = 0; i < HAND_POS_COUNT; i++) {
   b445a:	3405      	adds	r4, #5
   b445c:	2c28      	cmp	r4, #40	; 0x28
   b445e:	7128      	strb	r0, [r5, #4]
   b4460:	d1dc      	bne.n	b441c <setup+0x48>
        isProgrammerEnabled = true;
   b4462:	2301      	movs	r3, #1
   b4464:	7233      	strb	r3, [r6, #8]
    myMulp.begin();
    programmer.begin();
    programmer.enableProgrammer(); // Enables programming the controller via byte commands if needed
}
   b4466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4468:	2003e674 	.word	0x2003e674
   b446c:	2003e67c 	.word	0x2003e67c

000b4470 <_Z12MQTT_connectv>:
        handleCountDown(tableMatches(LENGTH_OF_MATCHERS, curData, countDownMatch));

    }
}

void MQTT_connect() {
   b4470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int8_t ret;

    // Stop if already connected.
    if (mqtt.connected()) {
   b4474:	4818      	ldr	r0, [pc, #96]	; (b44d8 <_Z12MQTT_connectv+0x68>)
   b4476:	f000 f9af 	bl	b47d8 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   b447a:	bb58      	cbnz	r0, b44d4 <_Z12MQTT_connectv+0x64>
        return;
    }

    Serial.print("Connecting to MQTT... ");
   b447c:	f001 f9aa 	bl	b57d4 <_Z16_fetch_usbserialv>
   b4480:	4916      	ldr	r1, [pc, #88]	; (b44dc <_Z12MQTT_connectv+0x6c>)

    while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b4482:	4e15      	ldr	r6, [pc, #84]	; (b44d8 <_Z12MQTT_connectv+0x68>)
        Serial.printf("%s\n", (char *)mqtt.connectErrorString(ret));
   b4484:	f8df 8060 	ldr.w	r8, [pc, #96]	; b44e8 <_Z12MQTT_connectv+0x78>
        Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   b4488:	4f15      	ldr	r7, [pc, #84]	; (b44e0 <_Z12MQTT_connectv+0x70>)
    Serial.print("Connecting to MQTT... ");
   b448a:	f000 ff7b 	bl	b5384 <_ZN5Print5printEPKc>
    while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b448e:	4812      	ldr	r0, [pc, #72]	; (b44d8 <_Z12MQTT_connectv+0x68>)
   b4490:	f000 fbe7 	bl	b4c62 <_ZN13Adafruit_MQTT7connectEv>
   b4494:	4604      	mov	r4, r0
   b4496:	b1c0      	cbz	r0, b44ca <_Z12MQTT_connectv+0x5a>
        Serial.printf("%s\n", (char *)mqtt.connectErrorString(ret));
   b4498:	f001 f99c 	bl	b57d4 <_Z16_fetch_usbserialv>
   b449c:	4621      	mov	r1, r4
   b449e:	4605      	mov	r5, r0
   b44a0:	4630      	mov	r0, r6
   b44a2:	f000 fab7 	bl	b4a14 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   b44a6:	4641      	mov	r1, r8
   b44a8:	4602      	mov	r2, r0
   b44aa:	4628      	mov	r0, r5
   b44ac:	f7ff fe0a 	bl	b40c4 <_ZN5Print6printfEPKcz>
        Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   b44b0:	f001 f990 	bl	b57d4 <_Z16_fetch_usbserialv>
   b44b4:	4639      	mov	r1, r7
   b44b6:	f7ff fe05 	bl	b40c4 <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   b44ba:	4630      	mov	r0, r6
   b44bc:	f000 fab8 	bl	b4a30 <_ZN13Adafruit_MQTT10disconnectEv>
        delay(5000); // wait 5 seconds
   b44c0:	f241 3088 	movw	r0, #5000	; 0x1388
   b44c4:	f000 ffe2 	bl	b548c <delay>
    while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b44c8:	e7e1      	b.n	b448e <_Z12MQTT_connectv+0x1e>
    }
    Serial.printf("MQTT Connected!\n");
   b44ca:	f001 f983 	bl	b57d4 <_Z16_fetch_usbserialv>
   b44ce:	4905      	ldr	r1, [pc, #20]	; (b44e4 <_Z12MQTT_connectv+0x74>)
   b44d0:	f7ff fdf8 	bl	b40c4 <_ZN5Print6printfEPKcz>
}
   b44d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b44d8:	2003e5a0 	.word	0x2003e5a0
   b44dc:	000b67af 	.word	0x000b67af
   b44e0:	000b67ca 	.word	0x000b67ca
   b44e4:	000b67f3 	.word	0x000b67f3
   b44e8:	000b67c6 	.word	0x000b67c6

000b44ec <_Z13handleCountUpb>:

void handleCountUp(bool matches) {
   b44ec:	b510      	push	{r4, lr}

    static bool hasCountedUp = false;
    if (matches && hasCountedUp) {
   b44ee:	4b0c      	ldr	r3, [pc, #48]	; (b4520 <_Z13handleCountUpb+0x34>)
   b44f0:	781a      	ldrb	r2, [r3, #0]
   b44f2:	b108      	cbz	r0, b44f8 <_Z13handleCountUpb+0xc>
   b44f4:	b122      	cbz	r2, b4500 <_Z13handleCountUpb+0x14>
    hasCountedUp = true;
    Serial.printf("Counted up");
    MQTT_connect();
    publishFeed.publish(1);
    
}
   b44f6:	bd10      	pop	{r4, pc}
    } else if (hasCountedUp) {
   b44f8:	2a00      	cmp	r2, #0
   b44fa:	d0fc      	beq.n	b44f6 <_Z13handleCountUpb+0xa>
        hasCountedUp = false;
   b44fc:	7018      	strb	r0, [r3, #0]
        return;
   b44fe:	e7fa      	b.n	b44f6 <_Z13handleCountUpb+0xa>
    hasCountedUp = true;
   b4500:	2401      	movs	r4, #1
   b4502:	701c      	strb	r4, [r3, #0]
    Serial.printf("Counted up");
   b4504:	f001 f966 	bl	b57d4 <_Z16_fetch_usbserialv>
   b4508:	4906      	ldr	r1, [pc, #24]	; (b4524 <_Z13handleCountUpb+0x38>)
   b450a:	f7ff fddb 	bl	b40c4 <_ZN5Print6printfEPKcz>
    MQTT_connect();
   b450e:	f7ff ffaf 	bl	b4470 <_Z12MQTT_connectv>
    publishFeed.publish(1);
   b4512:	4621      	mov	r1, r4
   b4514:	4804      	ldr	r0, [pc, #16]	; (b4528 <_Z13handleCountUpb+0x3c>)
}
   b4516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    publishFeed.publish(1);
   b451a:	f000 bbfe 	b.w	b4d1a <_ZN21Adafruit_MQTT_Publish7publishEi>
   b451e:	bf00      	nop
   b4520:	2003e568 	.word	0x2003e568
   b4524:	000b6804 	.word	0x000b6804
   b4528:	2003e688 	.word	0x2003e688

000b452c <_Z15handleCountDownb>:

void handleCountDown(bool matches) {
   b452c:	b510      	push	{r4, lr}
    static bool hasCountedDown = false;
    if (matches && hasCountedDown) {
   b452e:	4b0c      	ldr	r3, [pc, #48]	; (b4560 <_Z15handleCountDownb+0x34>)
   b4530:	781c      	ldrb	r4, [r3, #0]
   b4532:	b108      	cbz	r0, b4538 <_Z15handleCountDownb+0xc>
   b4534:	b124      	cbz	r4, b4540 <_Z15handleCountDownb+0x14>

    hasCountedDown = true;
    Serial.printf("Counted down");
    MQTT_connect();
    publishFeed.publish(0);
}
   b4536:	bd10      	pop	{r4, pc}
    } else if (hasCountedDown) {
   b4538:	2c00      	cmp	r4, #0
   b453a:	d0fc      	beq.n	b4536 <_Z15handleCountDownb+0xa>
        hasCountedDown = false;
   b453c:	7018      	strb	r0, [r3, #0]
        return;
   b453e:	e7fa      	b.n	b4536 <_Z15handleCountDownb+0xa>
    hasCountedDown = true;
   b4540:	2201      	movs	r2, #1
   b4542:	701a      	strb	r2, [r3, #0]
    Serial.printf("Counted down");
   b4544:	f001 f946 	bl	b57d4 <_Z16_fetch_usbserialv>
   b4548:	4906      	ldr	r1, [pc, #24]	; (b4564 <_Z15handleCountDownb+0x38>)
   b454a:	f7ff fdbb 	bl	b40c4 <_ZN5Print6printfEPKcz>
    MQTT_connect();
   b454e:	f7ff ff8f 	bl	b4470 <_Z12MQTT_connectv>
    publishFeed.publish(0);
   b4552:	4621      	mov	r1, r4
   b4554:	4804      	ldr	r0, [pc, #16]	; (b4568 <_Z15handleCountDownb+0x3c>)
}
   b4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    publishFeed.publish(0);
   b455a:	f000 bbde 	b.w	b4d1a <_ZN21Adafruit_MQTT_Publish7publishEi>
   b455e:	bf00      	nop
   b4560:	2003e569 	.word	0x2003e569
   b4564:	000b680f 	.word	0x000b680f
   b4568:	2003e688 	.word	0x2003e688

000b456c <loop>:
void loop() {
   b456c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    static Sampler mySampler;
   b456e:	4d68      	ldr	r5, [pc, #416]	; (b4710 <loop+0x1a4>)
   b4570:	4c68      	ldr	r4, [pc, #416]	; (b4714 <loop+0x1a8>)
   b4572:	782b      	ldrb	r3, [r5, #0]
   b4574:	f3bf 8f5b 	dmb	ish
   b4578:	f013 0f01 	tst.w	r3, #1
   b457c:	d109      	bne.n	b4592 <loop+0x26>
   b457e:	4628      	mov	r0, r5
   b4580:	f7ff fd98 	bl	b40b4 <__cxa_guard_acquire>
   b4584:	b128      	cbz	r0, b4592 <loop+0x26>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4586:	f000 fc27 	bl	b4dd8 <HAL_Timer_Get_Milli_Seconds>
    int sampleCount[HAND_POS_COUNT];
    int totalSamples;

public:
    Sampler() {
        lastSampleTime = millis();
   b458a:	6020      	str	r0, [r4, #0]
   b458c:	4628      	mov	r0, r5
   b458e:	f7ff fd96 	bl	b40be <__cxa_guard_release>
        if (isProgrammerEnabled && Serial.available() > 0) {
   b4592:	4d61      	ldr	r5, [pc, #388]	; (b4718 <loop+0x1ac>)
   b4594:	7a2b      	ldrb	r3, [r5, #8]
   b4596:	2b00      	cmp	r3, #0
   b4598:	d03e      	beq.n	b4618 <loop+0xac>
   b459a:	f001 f91b 	bl	b57d4 <_Z16_fetch_usbserialv>
   b459e:	6803      	ldr	r3, [r0, #0]
   b45a0:	691b      	ldr	r3, [r3, #16]
   b45a2:	4798      	blx	r3
   b45a4:	2800      	cmp	r0, #0
   b45a6:	dd37      	ble.n	b4618 <loop+0xac>
            readCommand(&cmd, &data);
   b45a8:	f10d 0107 	add.w	r1, sp, #7
   b45ac:	f10d 0006 	add.w	r0, sp, #6
   b45b0:	f7ff fe22 	bl	b41f8 <_Z11readCommandPhS_>
            switch (cmd) {
   b45b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b45b8:	b143      	cbz	r3, b45cc <loop+0x60>
   b45ba:	2b01      	cmp	r3, #1
   b45bc:	f000 8097 	beq.w	b46ee <loop+0x182>
                Serial.printf("Unknown command\n");
   b45c0:	f001 f908 	bl	b57d4 <_Z16_fetch_usbserialv>
   b45c4:	4955      	ldr	r1, [pc, #340]	; (b471c <loop+0x1b0>)
   b45c6:	f7ff fd7d 	bl	b40c4 <_ZN5Print6printfEPKcz>
    }
   b45ca:	e025      	b.n	b4618 <loop+0xac>
                programFingerPosition(data);
   b45cc:	f89d 6007 	ldrb.w	r6, [sp, #7]
        if (fingerPos < HAND_POS_COUNT) {
   b45d0:	2e07      	cmp	r6, #7
   b45d2:	d821      	bhi.n	b4618 <loop+0xac>
            MultiplexerCollection mpc(myMulp);
   b45d4:	6869      	ldr	r1, [r5, #4]
   b45d6:	a802      	add	r0, sp, #8
   b45d8:	f7ff fdb8 	bl	b414c <_ZN21MultiplexerCollectionC1EP11Multiplexer>
            allSigns[fingerPos].set(&mpc);
   b45dc:	6829      	ldr	r1, [r5, #0]
        thumb = mulpC->thumb;
   b45de:	f89d 0008 	ldrb.w	r0, [sp, #8]
   b45e2:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   b45e6:	188b      	adds	r3, r1, r2
   b45e8:	5488      	strb	r0, [r1, r2]
        pointer = mulpC->pointer;
   b45ea:	f89d 1009 	ldrb.w	r1, [sp, #9]
   b45ee:	7059      	strb	r1, [r3, #1]
        middle = mulpC->middle;
   b45f0:	f89d 100a 	ldrb.w	r1, [sp, #10]
   b45f4:	7099      	strb	r1, [r3, #2]
        ring = mulpC->ring;
   b45f6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   b45fa:	70d9      	strb	r1, [r3, #3]
            allSigns[fingerPos].saveToEEPROM(fingerPos);
   b45fc:	6828      	ldr	r0, [r5, #0]
        pinky = mulpC->pinky;
   b45fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b4602:	7119      	strb	r1, [r3, #4]
   b4604:	4410      	add	r0, r2
   b4606:	4631      	mov	r1, r6
   b4608:	f7ff fdd2 	bl	b41b0 <_ZN21MultiplexerCollection12saveToEEPROMEi>
            Serial.printf("Programmed finger pos %x\n", fingerPos);
   b460c:	f001 f8e2 	bl	b57d4 <_Z16_fetch_usbserialv>
   b4610:	4943      	ldr	r1, [pc, #268]	; (b4720 <loop+0x1b4>)
   b4612:	4632      	mov	r2, r6
   b4614:	f7ff fd56 	bl	b40c4 <_ZN5Print6printfEPKcz>
    int i = programmer.getBestCollection();
   b4618:	483f      	ldr	r0, [pc, #252]	; (b4718 <loop+0x1ac>)
   b461a:	f7ff fe4b 	bl	b42b4 <_ZN17ProgramController17getBestCollectionEv>
        }
        return false;
    }

    void addSample(int s) {
        if (s < 0 || s > HAND_POS_COUNT) {
   b461e:	2808      	cmp	r0, #8
   b4620:	d96b      	bls.n	b46fa <loop+0x18e>
            Serial.printf("Sample out of bounds\n");
   b4622:	f001 f8d7 	bl	b57d4 <_Z16_fetch_usbserialv>
   b4626:	493f      	ldr	r1, [pc, #252]	; (b4724 <loop+0x1b8>)
   b4628:	f7ff fd4c 	bl	b40c4 <_ZN5Print6printfEPKcz>
   b462c:	f000 fbd4 	bl	b4dd8 <HAL_Timer_Get_Milli_Seconds>
        if (curTime - lastSampleTime > SAMPLE_DURATION) {
   b4630:	6823      	ldr	r3, [r4, #0]
   b4632:	1ac3      	subs	r3, r0, r3
   b4634:	2b46      	cmp	r3, #70	; 0x46
   b4636:	dd69      	ble.n	b470c <loop+0x1a0>
            lastSampleTime = curTime;
   b4638:	493b      	ldr	r1, [pc, #236]	; (b4728 <loop+0x1bc>)
   b463a:	6020      	str	r0, [r4, #0]
        sampleCount[s]++;
        totalSamples++;
    }

    int getBestSample() {
        int bestSample = 0;
   b463c:	2300      	movs	r3, #0

        for (int i = 1; i < HAND_POS_COUNT; i++) {
   b463e:	2201      	movs	r2, #1
            if (sampleCount[i] > sampleCount[bestSample]) {
   b4640:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   b4644:	f851 5b04 	ldr.w	r5, [r1], #4
   b4648:	6840      	ldr	r0, [r0, #4]
   b464a:	4285      	cmp	r5, r0
   b464c:	bfc8      	it	gt
   b464e:	4613      	movgt	r3, r2
        for (int i = 1; i < HAND_POS_COUNT; i++) {
   b4650:	3201      	adds	r2, #1
   b4652:	2a08      	cmp	r2, #8
   b4654:	d1f4      	bne.n	b4640 <loop+0xd4>

        return bestSample;
    }

    float getSamplePercentage(int s) {
        return (float)sampleCount[s] / (float)totalSamples * 100.0;
   b4656:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   b465a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
   b465e:	edd2 6a01 	vldr	s13, [r2, #4]
   b4662:	4d32      	ldr	r5, [pc, #200]	; (b472c <loop+0x1c0>)
   b4664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   b4668:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   b466c:	eec6 7a87 	vdiv.f32	s15, s13, s14
   b4670:	ed9f 7a2f 	vldr	s14, [pc, #188]	; b4730 <loop+0x1c4>
   b4674:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (perc > 80) {
   b4678:	ed9f 7a2e 	vldr	s14, [pc, #184]	; b4734 <loop+0x1c8>
   b467c:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4684:	dd08      	ble.n	b4698 <loop+0x12c>
            if (bestChoice == bestSample) {
   b4686:	4a2c      	ldr	r2, [pc, #176]	; (b4738 <loop+0x1cc>)
   b4688:	6811      	ldr	r1, [r2, #0]
   b468a:	4299      	cmp	r1, r3
                bestChoiceCount++;
   b468c:	bf0b      	itete	eq
   b468e:	682b      	ldreq	r3, [r5, #0]
                bestChoice = bestSample;
   b4690:	6013      	strne	r3, [r2, #0]
                bestChoiceCount++;
   b4692:	3301      	addeq	r3, #1
                bestChoiceCount = 0;
   b4694:	2300      	movne	r3, #0
   b4696:	602b      	str	r3, [r5, #0]
    }

    void reset() {
        for (int i = 0; i < HAND_POS_COUNT; i++) {
            sampleCount[i] = 0;
   b4698:	4828      	ldr	r0, [pc, #160]	; (b473c <loop+0x1d0>)
   b469a:	2220      	movs	r2, #32
   b469c:	2100      	movs	r1, #0
   b469e:	f001 ff6b 	bl	b6578 <memset>
        }
        totalSamples = 0;
   b46a2:	2300      	movs	r3, #0
   b46a4:	6263      	str	r3, [r4, #36]	; 0x24
        if (bestChoiceCount == 4) {
   b46a6:	682c      	ldr	r4, [r5, #0]
   b46a8:	2c04      	cmp	r4, #4
   b46aa:	d10f      	bne.n	b46cc <loop+0x160>
            Serial.printf("Best choice: %d\n", bestChoice);
   b46ac:	4d22      	ldr	r5, [pc, #136]	; (b4738 <loop+0x1cc>)
   b46ae:	f001 f891 	bl	b57d4 <_Z16_fetch_usbserialv>
   b46b2:	682a      	ldr	r2, [r5, #0]
   b46b4:	4922      	ldr	r1, [pc, #136]	; (b4740 <loop+0x1d4>)
   b46b6:	f7ff fd05 	bl	b40c4 <_ZN5Print6printfEPKcz>
            tablePush(LENGTH_OF_MATCHERS, curData, (FingerPosition)bestChoice);
   b46ba:	4922      	ldr	r1, [pc, #136]	; (b4744 <loop+0x1d8>)
   b46bc:	782a      	ldrb	r2, [r5, #0]
   b46be:	4620      	mov	r0, r4
   b46c0:	f7ff fe56 	bl	b4370 <_Z9tablePushiP14FingerPositionS_>
            tablePrint(LENGTH_OF_MATCHERS, curData);
   b46c4:	491f      	ldr	r1, [pc, #124]	; (b4744 <loop+0x1d8>)
   b46c6:	4620      	mov	r0, r4
   b46c8:	f7ff fe6a 	bl	b43a0 <_Z10tablePrintiP14FingerPosition>
        handleCountUp(tableMatches(LENGTH_OF_MATCHERS, curData, countUpMatch));
   b46cc:	4a1e      	ldr	r2, [pc, #120]	; (b4748 <loop+0x1dc>)
   b46ce:	491d      	ldr	r1, [pc, #116]	; (b4744 <loop+0x1d8>)
   b46d0:	2004      	movs	r0, #4
   b46d2:	f7ff fe3f 	bl	b4354 <_Z12tableMatchesiP14FingerPositionS0_>
   b46d6:	f7ff ff09 	bl	b44ec <_Z13handleCountUpb>
        handleCountDown(tableMatches(LENGTH_OF_MATCHERS, curData, countDownMatch));
   b46da:	4a1c      	ldr	r2, [pc, #112]	; (b474c <loop+0x1e0>)
   b46dc:	4919      	ldr	r1, [pc, #100]	; (b4744 <loop+0x1d8>)
   b46de:	2004      	movs	r0, #4
   b46e0:	f7ff fe38 	bl	b4354 <_Z12tableMatchesiP14FingerPositionS0_>
}
   b46e4:	b004      	add	sp, #16
   b46e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        handleCountDown(tableMatches(LENGTH_OF_MATCHERS, curData, countDownMatch));
   b46ea:	f7ff bf1f 	b.w	b452c <_Z15handleCountDownb>
                handleRequest(data);
   b46ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b46f2:	4628      	mov	r0, r5
   b46f4:	f7ff fdea 	bl	b42cc <_ZN17ProgramController13handleRequestEh>
                break;
   b46f8:	e78e      	b.n	b4618 <loop+0xac>
        sampleCount[s]++;
   b46fa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   b46fe:	6843      	ldr	r3, [r0, #4]
   b4700:	3301      	adds	r3, #1
   b4702:	6043      	str	r3, [r0, #4]
        totalSamples++;
   b4704:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b4706:	3301      	adds	r3, #1
   b4708:	6263      	str	r3, [r4, #36]	; 0x24
   b470a:	e78f      	b.n	b462c <loop+0xc0>
}
   b470c:	b004      	add	sp, #16
   b470e:	bd70      	pop	{r4, r5, r6, pc}
   b4710:	2003e564 	.word	0x2003e564
   b4714:	2003e574 	.word	0x2003e574
   b4718:	2003e67c 	.word	0x2003e67c
   b471c:	000b6836 	.word	0x000b6836
   b4720:	000b681c 	.word	0x000b681c
   b4724:	000b6847 	.word	0x000b6847
   b4728:	2003e57c 	.word	0x2003e57c
   b472c:	2003e570 	.word	0x2003e570
   b4730:	42c80000 	.word	0x42c80000
   b4734:	42a00000 	.word	0x42a00000
   b4738:	2003e56c 	.word	0x2003e56c
   b473c:	2003e578 	.word	0x2003e578
   b4740:	000b685d 	.word	0x000b685d
   b4744:	2003e59c 	.word	0x2003e59c
   b4748:	2003e4f4 	.word	0x2003e4f4
   b474c:	2003e4f0 	.word	0x2003e4f0

000b4750 <_GLOBAL__sub_I__Z11readCommandPhS_>:
}
   b4750:	b537      	push	{r0, r1, r2, r4, r5, lr}
TCPClient theClient;
   b4752:	4d17      	ldr	r5, [pc, #92]	; (b47b0 <_GLOBAL__sub_I__Z11readCommandPhS_+0x60>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b4754:	4c17      	ldr	r4, [pc, #92]	; (b47b4 <_GLOBAL__sub_I__Z11readCommandPhS_+0x64>)
   b4756:	4628      	mov	r0, r5
   b4758:	f001 fbaa 	bl	b5eb0 <_ZN9TCPClientC1Ev>
   b475c:	4b16      	ldr	r3, [pc, #88]	; (b47b8 <_GLOBAL__sub_I__Z11readCommandPhS_+0x68>)
   b475e:	9300      	str	r3, [sp, #0]
   b4760:	4916      	ldr	r1, [pc, #88]	; (b47bc <_GLOBAL__sub_I__Z11readCommandPhS_+0x6c>)
   b4762:	4b17      	ldr	r3, [pc, #92]	; (b47c0 <_GLOBAL__sub_I__Z11readCommandPhS_+0x70>)
   b4764:	f240 725b 	movw	r2, #1883	; 0x75b
   b4768:	4620      	mov	r0, r4
   b476a:	f000 f8cf 	bl	b490c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b476e:	4b15      	ldr	r3, [pc, #84]	; (b47c4 <_GLOBAL__sub_I__Z11readCommandPhS_+0x74>)
   b4770:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_Publish publishFeed(&mqtt, AIO_USERNAME "/feeds/ON_OFF");
   b4772:	4621      	mov	r1, r4
   b4774:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   b4778:	4a13      	ldr	r2, [pc, #76]	; (b47c8 <_GLOBAL__sub_I__Z11readCommandPhS_+0x78>)
   b477a:	4814      	ldr	r0, [pc, #80]	; (b47cc <_GLOBAL__sub_I__Z11readCommandPhS_+0x7c>)
    ProgramController(Multiplexer *myMulp) {
   b477c:	4c14      	ldr	r4, [pc, #80]	; (b47d0 <_GLOBAL__sub_I__Z11readCommandPhS_+0x80>)
   b477e:	2300      	movs	r3, #0
   b4780:	f000 fac6 	bl	b4d10 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
        en = enablePin;
   b4784:	4b13      	ldr	r3, [pc, #76]	; (b47d4 <_GLOBAL__sub_I__Z11readCommandPhS_+0x84>)
        this->myMulp = myMulp;
   b4786:	6063      	str	r3, [r4, #4]
   b4788:	2206      	movs	r2, #6
   b478a:	701a      	strb	r2, [r3, #0]
        s0 = select0Pin;
   b478c:	2202      	movs	r2, #2
   b478e:	705a      	strb	r2, [r3, #1]
        s1 = select1Pin;
   b4790:	2203      	movs	r2, #3
   b4792:	709a      	strb	r2, [r3, #2]
        s2 = select2Pin;
   b4794:	2204      	movs	r2, #4
   b4796:	70da      	strb	r2, [r3, #3]
        s3 = select3Pin;
   b4798:	2205      	movs	r2, #5
   b479a:	711a      	strb	r2, [r3, #4]
        sig = signalPin;
   b479c:	2213      	movs	r2, #19
   b479e:	715a      	strb	r2, [r3, #5]
    ProgramController(Multiplexer *myMulp) {
   b47a0:	2200      	movs	r2, #0
   b47a2:	7222      	strb	r2, [r4, #8]
        allSigns = new MultiplexerCollection[HAND_POS_COUNT];
   b47a4:	2028      	movs	r0, #40	; 0x28
   b47a6:	f7ff fc76 	bl	b4096 <_Znaj>
   b47aa:	6020      	str	r0, [r4, #0]
}
   b47ac:	b003      	add	sp, #12
   b47ae:	bd30      	pop	{r4, r5, pc}
   b47b0:	2003e694 	.word	0x2003e694
   b47b4:	2003e5a0 	.word	0x2003e5a0
   b47b8:	000b6888 	.word	0x000b6888
   b47bc:	000b6878 	.word	0x000b6878
   b47c0:	000b686e 	.word	0x000b686e
   b47c4:	000b68c8 	.word	0x000b68c8
   b47c8:	000b68a9 	.word	0x000b68a9
   b47cc:	2003e688 	.word	0x2003e688
   b47d0:	2003e67c 	.word	0x2003e67c
   b47d4:	2003e674 	.word	0x2003e674

000b47d8 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b47d8:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b47da:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b47de:	6803      	ldr	r3, [r0, #0]
   b47e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47e2:	4798      	blx	r3
}
   b47e4:	3800      	subs	r0, #0
   b47e6:	bf18      	it	ne
   b47e8:	2001      	movne	r0, #1
   b47ea:	bd08      	pop	{r3, pc}

000b47ec <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b47ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b47ee:	4606      	mov	r6, r0
   b47f0:	460f      	mov	r7, r1
   b47f2:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b47f4:	b1c4      	cbz	r4, b4828 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b47f6:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b47fa:	6803      	ldr	r3, [r0, #0]
   b47fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47fe:	4798      	blx	r3
   b4800:	b908      	cbnz	r0, b4806 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b4802:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b4804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b4806:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b480a:	2cfa      	cmp	r4, #250	; 0xfa
   b480c:	6803      	ldr	r3, [r0, #0]
   b480e:	4625      	mov	r5, r4
   b4810:	bfa8      	it	ge
   b4812:	25fa      	movge	r5, #250	; 0xfa
   b4814:	68db      	ldr	r3, [r3, #12]
   b4816:	462a      	mov	r2, r5
   b4818:	4639      	mov	r1, r7
   b481a:	4798      	blx	r3
   b481c:	b283      	uxth	r3, r0
      len -= ret;
   b481e:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b4820:	429d      	cmp	r5, r3
      len -= ret;
   b4822:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b4824:	d0e6      	beq.n	b47f4 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b4826:	e7ec      	b.n	b4802 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b4828:	2001      	movs	r0, #1
   b482a:	e7eb      	b.n	b4804 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b482c <_ZN19Adafruit_MQTT_SPARKD1Ev>:
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b482c:	4770      	bx	lr

000b482e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b482e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4832:	4606      	mov	r6, r0
   b4834:	4688      	mov	r8, r1
   b4836:	4691      	mov	r9, r2
   b4838:	461f      	mov	r7, r3
   b483a:	461d      	mov	r5, r3
  uint16_t len = 0;
   b483c:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b483e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4842:	6803      	ldr	r3, [r0, #0]
   b4844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4846:	4798      	blx	r3
   b4848:	b1d0      	cbz	r0, b4880 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b484a:	2d00      	cmp	r5, #0
   b484c:	db18      	blt.n	b4880 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b484e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4852:	6803      	ldr	r3, [r0, #0]
   b4854:	691b      	ldr	r3, [r3, #16]
   b4856:	4798      	blx	r3
   b4858:	b160      	cbz	r0, b4874 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b485a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b485e:	6803      	ldr	r3, [r0, #0]
   b4860:	695b      	ldr	r3, [r3, #20]
   b4862:	4798      	blx	r3
   b4864:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b4868:	3401      	adds	r4, #1
   b486a:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b486c:	454c      	cmp	r4, r9
   b486e:	d007      	beq.n	b4880 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b4870:	463d      	mov	r5, r7
   b4872:	e7ec      	b.n	b484e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4874:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b4876:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4878:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b487a:	f000 fe07 	bl	b548c <delay>
  while (client->connected() && (timeout >= 0)) {
   b487e:	e7de      	b.n	b483e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b4880:	4620      	mov	r0, r4
   b4882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4886 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b4886:	b570      	push	{r4, r5, r6, lr}
   b4888:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b488a:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b488e:	2296      	movs	r2, #150	; 0x96
   b4890:	2100      	movs	r1, #0
   b4892:	4628      	mov	r0, r5
   b4894:	f001 fe70 	bl	b6578 <memset>
  strcpy((char *)buffer, servername);
   b4898:	6861      	ldr	r1, [r4, #4]
   b489a:	4628      	mov	r0, r5
   b489c:	f001 feac 	bl	b65f8 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b48a0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b48a4:	8922      	ldrh	r2, [r4, #8]
   b48a6:	6803      	ldr	r3, [r0, #0]
   b48a8:	4629      	mov	r1, r5
   b48aa:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b48ac:	2300      	movs	r3, #0
   b48ae:	47b0      	blx	r6
}
   b48b0:	3800      	subs	r0, #0
   b48b2:	bf18      	it	ne
   b48b4:	2001      	movne	r0, #1
   b48b6:	bd70      	pop	{r4, r5, r6, pc}

000b48b8 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b48b8:	b510      	push	{r4, lr}
   b48ba:	21d4      	movs	r1, #212	; 0xd4
   b48bc:	4604      	mov	r4, r0
   b48be:	f7ff fbec 	bl	b409a <_ZdlPvj>
   b48c2:	4620      	mov	r0, r4
   b48c4:	bd10      	pop	{r4, pc}

000b48c6 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b48c6:	b510      	push	{r4, lr}
   b48c8:	4604      	mov	r4, r0
  if (client->connected()) {
   b48ca:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b48ce:	6803      	ldr	r3, [r0, #0]
   b48d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48d2:	4798      	blx	r3
   b48d4:	b120      	cbz	r0, b48e0 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b48d6:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b48da:	6803      	ldr	r3, [r0, #0]
   b48dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b48de:	4798      	blx	r3
}
   b48e0:	2001      	movs	r0, #1
   b48e2:	bd10      	pop	{r4, pc}

000b48e4 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b48e4:	b513      	push	{r0, r1, r4, lr}
   b48e6:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b48e8:	4608      	mov	r0, r1
   b48ea:	9101      	str	r1, [sp, #4]
   b48ec:	f001 fe8c 	bl	b6608 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b48f0:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b48f4:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b48f6:	7060      	strb	r0, [r4, #1]
   b48f8:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b48fa:	b284      	uxth	r4, r0
   b48fc:	9901      	ldr	r1, [sp, #4]
   b48fe:	4622      	mov	r2, r4
   b4900:	4618      	mov	r0, r3
   b4902:	f001 fe89 	bl	b6618 <strncpy>
  return p+len;
}
   b4906:	4420      	add	r0, r4
   b4908:	b002      	add	sp, #8
   b490a:	bd10      	pop	{r4, pc}

000b490c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b490c:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b490e:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b4910:	4a0a      	ldr	r2, [pc, #40]	; (b493c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b4912:	4d0b      	ldr	r5, [pc, #44]	; (b4940 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b4914:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b4918:	9b03      	ldr	r3, [sp, #12]
   b491a:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b491c:	2300      	movs	r3, #0
  servername = server;
   b491e:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b4922:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b4926:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b492a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b492e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b4932:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b4934:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b4938:	bd30      	pop	{r4, r5, pc}
   b493a:	bf00      	nop
   b493c:	000b6803 	.word	0x000b6803
   b4940:	000b6acc 	.word	0x000b6acc

000b4944 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b4944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4948:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b494a:	6802      	ldr	r2, [r0, #0]
   b494c:	b21b      	sxth	r3, r3
   b494e:	6997      	ldr	r7, [r2, #24]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b4954:	4605      	mov	r5, r0
   b4956:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b4958:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b495a:	b2c7      	uxtb	r7, r0
   b495c:	2f01      	cmp	r7, #1
   b495e:	9b01      	ldr	r3, [sp, #4]
   b4960:	d003      	beq.n	b496a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b4962:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b4964:	b003      	add	sp, #12
   b4966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b496a:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b496e:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b4972:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b4976:	682a      	ldr	r2, [r5, #0]
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b497e:	4641      	mov	r1, r8
   b4980:	2201      	movs	r2, #1
   b4982:	4628      	mov	r0, r5
   b4984:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b4986:	b2c0      	uxtb	r0, r0
   b4988:	2801      	cmp	r0, #1
   b498a:	d1ea      	bne.n	b4962 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b498c:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b4990:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b4994:	45c2      	cmp	sl, r8
    value += intermediate;
   b4996:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b499a:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b499e:	d0e0      	beq.n	b4962 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b49a0:	f012 0f80 	tst.w	r2, #128	; 0x80
   b49a4:	9b01      	ldr	r3, [sp, #4]
   b49a6:	d1e6      	bne.n	b4976 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b49a8:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b49ac:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b49ae:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b49b0:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b49b2:	3c01      	subs	r4, #1
   b49b4:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b49b6:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b49ba:	bf3d      	ittte	cc
   b49bc:	f106 32ff 	addcc.w	r2, r6, #4294967295
   b49c0:	1bd2      	subcc	r2, r2, r7
   b49c2:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b49c4:	fa1f f289 	uxthcs.w	r2, r9
   b49c8:	4641      	mov	r1, r8
   b49ca:	4628      	mov	r0, r5
   b49cc:	47d0      	blx	sl
   b49ce:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b49d0:	4438      	add	r0, r7
   b49d2:	b280      	uxth	r0, r0
   b49d4:	e7c6      	b.n	b4964 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b49d8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b49d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b49dc:	f8df 8030 	ldr.w	r8, [pc, #48]	; b4a10 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b49e0:	4605      	mov	r5, r0
   b49e2:	460c      	mov	r4, r1
   b49e4:	4616      	mov	r6, r2
   b49e6:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b49e8:	463b      	mov	r3, r7
   b49ea:	2296      	movs	r2, #150	; 0x96
   b49ec:	4621      	mov	r1, r4
   b49ee:	4628      	mov	r0, r5
   b49f0:	f7ff ffa8 	bl	b4944 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b49f4:	b148      	cbz	r0, b4a0a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b49f6:	7823      	ldrb	r3, [r4, #0]
   b49f8:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b49fc:	d005      	beq.n	b4a0a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b49fe:	f000 fee9 	bl	b57d4 <_Z16_fetch_usbserialv>
   b4a02:	4641      	mov	r1, r8
   b4a04:	f000 fcd1 	bl	b53aa <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b4a08:	e7ee      	b.n	b49e8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b4a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4a0e:	bf00      	nop
   b4a10:	000b68e4 	.word	0x000b68e4

000b4a14 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   b4a14:	3102      	adds	r1, #2
   b4a16:	b2c9      	uxtb	r1, r1
   b4a18:	2909      	cmp	r1, #9
   b4a1a:	bf9a      	itte	ls
   b4a1c:	4b02      	ldrls	r3, [pc, #8]	; (b4a28 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   b4a1e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   b4a22:	4802      	ldrhi	r0, [pc, #8]	; (b4a2c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop
   b4a28:	000b6ae8 	.word	0x000b6ae8
   b4a2c:	000b68f5 	.word	0x000b68f5

000b4a30 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   b4a30:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   b4a32:	23e0      	movs	r3, #224	; 0xe0
   b4a34:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   b4a38:	4601      	mov	r1, r0
  packet[1] = 0;
   b4a3a:	2300      	movs	r3, #0
   b4a3c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   b4a40:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   b4a44:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   b4a46:	695b      	ldr	r3, [r3, #20]
   b4a48:	2202      	movs	r2, #2
   b4a4a:	4798      	blx	r3
  return disconnectServer();
   b4a4c:	6823      	ldr	r3, [r4, #0]
   b4a4e:	4620      	mov	r0, r4
   b4a50:	691b      	ldr	r3, [r3, #16]
}
   b4a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   b4a56:	4718      	bx	r3

000b4a58 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b4a58:	b538      	push	{r3, r4, r5, lr}
   b4a5a:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b4a5c:	4608      	mov	r0, r1
   b4a5e:	2310      	movs	r3, #16
   b4a60:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b4a64:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b4a66:	4929      	ldr	r1, [pc, #164]	; (b4b0c <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b4a68:	f7ff ff3c 	bl	b48e4 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b4a6c:	2304      	movs	r3, #4
   b4a6e:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b4a70:	2302      	movs	r3, #2
   b4a72:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b4a74:	69ab      	ldr	r3, [r5, #24]
   b4a76:	b18b      	cbz	r3, b4a9c <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b4a78:	781b      	ldrb	r3, [r3, #0]
   b4a7a:	b17b      	cbz	r3, b4a9c <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b4a7c:	2306      	movs	r3, #6
   b4a7e:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b4a80:	f895 3020 	ldrb.w	r3, [r5, #32]
   b4a84:	2b01      	cmp	r3, #1
   b4a86:	d139      	bne.n	b4afc <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b4a88:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b4a8a:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b4a8c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b4a90:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b4a92:	bf02      	ittt	eq
   b4a94:	7843      	ldrbeq	r3, [r0, #1]
   b4a96:	f043 0320 	orreq.w	r3, r3, #32
   b4a9a:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b4a9c:	692b      	ldr	r3, [r5, #16]
   b4a9e:	781b      	ldrb	r3, [r3, #0]
   b4aa0:	b11b      	cbz	r3, b4aaa <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b4aa2:	7843      	ldrb	r3, [r0, #1]
   b4aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b4aa8:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b4aaa:	696b      	ldr	r3, [r5, #20]
   b4aac:	781b      	ldrb	r3, [r3, #0]
   b4aae:	b11b      	cbz	r3, b4ab8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b4ab0:	7843      	ldrb	r3, [r0, #1]
   b4ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b4ab6:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b4ab8:	2301      	movs	r3, #1
   b4aba:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b4abc:	232c      	movs	r3, #44	; 0x2c
   b4abe:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b4ac0:	68e9      	ldr	r1, [r5, #12]
   b4ac2:	780b      	ldrb	r3, [r1, #0]
   b4ac4:	b1f3      	cbz	r3, b4b04 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b4ac6:	3004      	adds	r0, #4
   b4ac8:	f7ff ff0c 	bl	b48e4 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b4acc:	69a9      	ldr	r1, [r5, #24]
   b4ace:	b131      	cbz	r1, b4ade <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b4ad0:	780b      	ldrb	r3, [r1, #0]
   b4ad2:	b123      	cbz	r3, b4ade <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b4ad4:	f7ff ff06 	bl	b48e4 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b4ad8:	69e9      	ldr	r1, [r5, #28]
   b4ada:	f7ff ff03 	bl	b48e4 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b4ade:	6929      	ldr	r1, [r5, #16]
   b4ae0:	780b      	ldrb	r3, [r1, #0]
   b4ae2:	b10b      	cbz	r3, b4ae8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b4ae4:	f7ff fefe 	bl	b48e4 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b4ae8:	6969      	ldr	r1, [r5, #20]
   b4aea:	780b      	ldrb	r3, [r1, #0]
   b4aec:	b10b      	cbz	r3, b4af2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b4aee:	f7ff fef9 	bl	b48e4 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b4af2:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b4af4:	b2c0      	uxtb	r0, r0
   b4af6:	1e83      	subs	r3, r0, #2
   b4af8:	7063      	strb	r3, [r4, #1]
}
   b4afa:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b4afc:	2b02      	cmp	r3, #2
   b4afe:	d1c5      	bne.n	b4a8c <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b4b00:	231e      	movs	r3, #30
   b4b02:	e7c2      	b.n	b4a8a <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b4b04:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b4b06:	7143      	strb	r3, [r0, #5]
      p++;
   b4b08:	3006      	adds	r0, #6
   b4b0a:	e7df      	b.n	b4acc <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b4b0c:	000b6903 	.word	0x000b6903

000b4b10 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4b14:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   b4b16:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4b18:	460e      	mov	r6, r1
   b4b1a:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   b4b1c:	9201      	str	r2, [sp, #4]
   b4b1e:	f001 fd73 	bl	b6608 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4b22:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b4b26:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   b4b2a:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   b4b2c:	b284      	uxth	r4, r0
  if(qos > 0) { 
   b4b2e:	f1b9 0f00 	cmp.w	r9, #0
   b4b32:	d135      	bne.n	b4ba0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   b4b34:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4b36:	ea4f 0349 	mov.w	r3, r9, lsl #1
   b4b3a:	4630      	mov	r0, r6
    len += 2; // qos packet id
   b4b3c:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4b3e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   b4b42:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4b44:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   b4b48:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   b4b4a:	4622      	mov	r2, r4
   b4b4c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   b4b50:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   b4b52:	bf88      	it	hi
   b4b54:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   b4b58:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   b4b5a:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   b4b5e:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   b4b62:	d8f2      	bhi.n	b4b4a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   b4b64:	f7ff febe 	bl	b48e4 <_ZL11stringprintPhPKct.constprop.0>
   b4b68:	4603      	mov	r3, r0
  if(qos > 0) {
   b4b6a:	f1b9 0f00 	cmp.w	r9, #0
   b4b6e:	d00c      	beq.n	b4b8a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   b4b70:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4b74:	0a12      	lsrs	r2, r2, #8
   b4b76:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   b4b78:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4b7c:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   b4b7e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4b82:	3201      	adds	r2, #1
    p+=2;
   b4b84:	3302      	adds	r3, #2
    packet_id_counter++;
   b4b86:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   b4b8a:	463a      	mov	r2, r7
   b4b8c:	4641      	mov	r1, r8
   b4b8e:	4618      	mov	r0, r3
   b4b90:	f001 fcd8 	bl	b6544 <memmove>
  p+= bLen;
   b4b94:	4438      	add	r0, r7
  len = p - packet;
   b4b96:	1b80      	subs	r0, r0, r6
}
   b4b98:	b280      	uxth	r0, r0
   b4b9a:	b003      	add	sp, #12
   b4b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   b4ba0:	3404      	adds	r4, #4
   b4ba2:	e7c8      	b.n	b4b36 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000b4ba4 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4ba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4ba6:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b4baa:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4bae:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b4bb0:	e9cd 3600 	strd	r3, r6, [sp]
   b4bb4:	4613      	mov	r3, r2
   b4bb6:	460a      	mov	r2, r1
   b4bb8:	4629      	mov	r1, r5
   b4bba:	f7ff ffa9 	bl	b4b10 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   b4bbe:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b4bc0:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   b4bc2:	695b      	ldr	r3, [r3, #20]
   b4bc4:	4629      	mov	r1, r5
   b4bc6:	4620      	mov	r0, r4
   b4bc8:	4798      	blx	r3
   b4bca:	b910      	cbnz	r0, b4bd2 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   b4bcc:	2000      	movs	r0, #0
}
   b4bce:	b002      	add	sp, #8
   b4bd0:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   b4bd2:	2e00      	cmp	r6, #0
   b4bd4:	d0fb      	beq.n	b4bce <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   b4bd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b4bda:	2296      	movs	r2, #150	; 0x96
   b4bdc:	4629      	mov	r1, r5
   b4bde:	4620      	mov	r0, r4
   b4be0:	f7ff feb0 	bl	b4944 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   b4be4:	2804      	cmp	r0, #4
   b4be6:	d1f1      	bne.n	b4bcc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   b4be8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4bec:	091b      	lsrs	r3, r3, #4
   b4bee:	2b04      	cmp	r3, #4
   b4bf0:	d1ec      	bne.n	b4bcc <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    packnum |= buffer[3];
   b4bf2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   b4bf4:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   b4bf8:	ba5b      	rev16	r3, r3
    packnum++;
   b4bfa:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   b4bfc:	b29b      	uxth	r3, r3
   b4bfe:	1ac3      	subs	r3, r0, r3
   b4c00:	4258      	negs	r0, r3
   b4c02:	4158      	adcs	r0, r3
   b4c04:	e7e3      	b.n	b4bce <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000b4c06 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b4c06:	b530      	push	{r4, r5, lr}
   b4c08:	b085      	sub	sp, #20
   b4c0a:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b4c0c:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b4c0e:	461d      	mov	r5, r3
   b4c10:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b4c12:	9202      	str	r2, [sp, #8]
   b4c14:	f001 fcf8 	bl	b6608 <strlen>
   b4c18:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b4c1c:	b283      	uxth	r3, r0
   b4c1e:	9500      	str	r5, [sp, #0]
   b4c20:	4620      	mov	r0, r4
   b4c22:	f7ff ffbf 	bl	b4ba4 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   b4c26:	b005      	add	sp, #20
   b4c28:	bd30      	pop	{r4, r5, pc}

000b4c2a <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b4c2a:	b538      	push	{r3, r4, r5, lr}
   b4c2c:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b4c2e:	2382      	movs	r3, #130	; 0x82
   b4c30:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b4c32:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b4c36:	0a1b      	lsrs	r3, r3, #8
   b4c38:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b4c3a:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b4c3e:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b4c40:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b4c44:	460c      	mov	r4, r1
  packet_id_counter++;
   b4c46:	3301      	adds	r3, #1
   b4c48:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b4c4c:	4611      	mov	r1, r2
   b4c4e:	1d20      	adds	r0, r4, #4
   b4c50:	f7ff fe48 	bl	b48e4 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b4c54:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b4c58:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b4c5a:	b2c0      	uxtb	r0, r0
   b4c5c:	1e83      	subs	r3, r0, #2
   b4c5e:	7063      	strb	r3, [r4, #1]
}
   b4c60:	bd38      	pop	{r3, r4, r5, pc}

000b4c62 <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b4c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b4c66:	6803      	ldr	r3, [r0, #0]
   b4c68:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b4c6a:	4604      	mov	r4, r0
  if (!connectServer())
   b4c6c:	4798      	blx	r3
   b4c6e:	2800      	cmp	r0, #0
   b4c70:	d04b      	beq.n	b4d0a <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b4c72:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b4c76:	4629      	mov	r1, r5
   b4c78:	4620      	mov	r0, r4
   b4c7a:	f7ff feed 	bl	b4a58 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b4c7e:	6823      	ldr	r3, [r4, #0]
   b4c80:	b282      	uxth	r2, r0
   b4c82:	695b      	ldr	r3, [r3, #20]
   b4c84:	4629      	mov	r1, r5
   b4c86:	4620      	mov	r0, r4
   b4c88:	4798      	blx	r3
   b4c8a:	2800      	cmp	r0, #0
   b4c8c:	d03d      	beq.n	b4d0a <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b4c8e:	f241 7370 	movw	r3, #6000	; 0x1770
   b4c92:	2296      	movs	r2, #150	; 0x96
   b4c94:	4629      	mov	r1, r5
   b4c96:	4620      	mov	r0, r4
   b4c98:	f7ff fe54 	bl	b4944 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b4c9c:	b2c0      	uxtb	r0, r0
   b4c9e:	2804      	cmp	r0, #4
   b4ca0:	d133      	bne.n	b4d0a <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b4ca2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b4ca4:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b4ca8:	d12f      	bne.n	b4d0a <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b4caa:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b4cae:	b110      	cbz	r0, b4cb6 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b4cb0:	b240      	sxtb	r0, r0
}
   b4cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4cb6:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b4cba:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b4cbe:	f857 3b04 	ldr.w	r3, [r7], #4
   b4cc2:	b1f3      	cbz	r3, b4d02 <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b4cc4:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b4cc6:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b4cca:	4629      	mov	r1, r5
   b4ccc:	7913      	ldrb	r3, [r2, #4]
   b4cce:	6812      	ldr	r2, [r2, #0]
   b4cd0:	4620      	mov	r0, r4
   b4cd2:	f7ff ffaa 	bl	b4c2a <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b4cd6:	6823      	ldr	r3, [r4, #0]
   b4cd8:	b282      	uxth	r2, r0
   b4cda:	695b      	ldr	r3, [r3, #20]
   b4cdc:	4629      	mov	r1, r5
   b4cde:	4620      	mov	r0, r4
   b4ce0:	4798      	blx	r3
   b4ce2:	b190      	cbz	r0, b4d0a <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b4ce4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b4ce8:	2209      	movs	r2, #9
   b4cea:	4629      	mov	r1, r5
   b4cec:	4620      	mov	r0, r4
   b4cee:	f7ff fe73 	bl	b49d8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b4cf2:	b930      	cbnz	r0, b4d02 <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b4cf4:	3e01      	subs	r6, #1
   b4cf6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b4cfa:	d1e4      	bne.n	b4cc6 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b4cfc:	f06f 0001 	mvn.w	r0, #1
   b4d00:	e7d7      	b.n	b4cb2 <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b4d02:	45b8      	cmp	r8, r7
   b4d04:	d1db      	bne.n	b4cbe <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b4d06:	2000      	movs	r0, #0
   b4d08:	e7d3      	b.n	b4cb2 <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b4d0a:	f04f 30ff 	mov.w	r0, #4294967295
   b4d0e:	e7d0      	b.n	b4cb2 <_ZN13Adafruit_MQTT7connectEv+0x50>

000b4d10 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b4d10:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b4d12:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b4d16:	7203      	strb	r3, [r0, #8]
}
   b4d18:	bd10      	pop	{r4, pc}

000b4d1a <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   b4d1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4d1c:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   b4d1e:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   b4d20:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   b4d22:	a901      	add	r1, sp, #4
   b4d24:	f000 faa6 	bl	b5274 <ltoa>
  return mqtt->publish(topic, payload, qos);
   b4d28:	e9d4 0100 	ldrd	r0, r1, [r4]
   b4d2c:	7a23      	ldrb	r3, [r4, #8]
   b4d2e:	aa01      	add	r2, sp, #4
   b4d30:	f7ff ff69 	bl	b4c06 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b4d34:	b004      	add	sp, #16
   b4d36:	bd10      	pop	{r4, pc}

000b4d38 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <netdb_freeaddrinfo+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	689b      	ldr	r3, [r3, #8]
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	00030268 	.word	0x00030268

000b4d48 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <netdb_getaddrinfo+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	68db      	ldr	r3, [r3, #12]
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	00030268 	.word	0x00030268

000b4d58 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <HAL_Validate_Pin_Function+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	685b      	ldr	r3, [r3, #4]
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	0003022c 	.word	0x0003022c

000b4d68 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <HAL_Pin_Mode+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	689b      	ldr	r3, [r3, #8]
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	0003022c 	.word	0x0003022c

000b4d78 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <HAL_Get_Pin_Mode+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	68db      	ldr	r3, [r3, #12]
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	0003022c 	.word	0x0003022c

000b4d88 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <HAL_GPIO_Write+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	691b      	ldr	r3, [r3, #16]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	0003022c 	.word	0x0003022c

000b4d98 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <hal_adc_read+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	0003022c 	.word	0x0003022c

000b4da8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <if_index_to_name+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	695b      	ldr	r3, [r3, #20]
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	0003026c 	.word	0x0003026c

000b4db8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <HAL_RNG_GetRandomNumber+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	685b      	ldr	r3, [r3, #4]
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	00030218 	.word	0x00030218

000b4dc8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <HAL_Delay_Microseconds+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	68db      	ldr	r3, [r3, #12]
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	00030218 	.word	0x00030218

000b4dd8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	695b      	ldr	r3, [r3, #20]
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	00030218 	.word	0x00030218

000b4de8 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <HAL_EEPROM_Init+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	00030218 	.word	0x00030218

000b4df8 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <HAL_EEPROM_Read+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	00030218 	.word	0x00030218

000b4e08 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <HAL_EEPROM_Write+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	00030218 	.word	0x00030218

000b4e18 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <os_mutex_recursive_create+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	00030248 	.word	0x00030248

000b4e28 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <inet_inet_ntop+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	695b      	ldr	r3, [r3, #20]
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	00030264 	.word	0x00030264

000b4e38 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <inet_htonl+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	6a1b      	ldr	r3, [r3, #32]
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	00030264 	.word	0x00030264

000b4e48 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <inet_htons+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	00030264 	.word	0x00030264

000b4e58 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <hal_usart_write+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	68db      	ldr	r3, [r3, #12]
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	0003023c 	.word	0x0003023c

000b4e68 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <hal_usart_available+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	691b      	ldr	r3, [r3, #16]
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	0003023c 	.word	0x0003023c

000b4e78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <hal_usart_read+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	695b      	ldr	r3, [r3, #20]
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	0003023c 	.word	0x0003023c

000b4e88 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b02      	ldr	r3, [pc, #8]	; (b4e94 <hal_usart_peek+0xc>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	699b      	ldr	r3, [r3, #24]
   b4e90:	9301      	str	r3, [sp, #4]
   b4e92:	bd08      	pop	{r3, pc}
   b4e94:	0003023c 	.word	0x0003023c

000b4e98 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4e98:	b508      	push	{r3, lr}
   b4e9a:	4b02      	ldr	r3, [pc, #8]	; (b4ea4 <hal_usart_flush+0xc>)
   b4e9c:	681b      	ldr	r3, [r3, #0]
   b4e9e:	69db      	ldr	r3, [r3, #28]
   b4ea0:	9301      	str	r3, [sp, #4]
   b4ea2:	bd08      	pop	{r3, pc}
   b4ea4:	0003023c 	.word	0x0003023c

000b4ea8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4ea8:	b508      	push	{r3, lr}
   b4eaa:	4b02      	ldr	r3, [pc, #8]	; (b4eb4 <hal_usart_is_enabled+0xc>)
   b4eac:	681b      	ldr	r3, [r3, #0]
   b4eae:	6a1b      	ldr	r3, [r3, #32]
   b4eb0:	9301      	str	r3, [sp, #4]
   b4eb2:	bd08      	pop	{r3, pc}
   b4eb4:	0003023c 	.word	0x0003023c

000b4eb8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4eb8:	b508      	push	{r3, lr}
   b4eba:	4b02      	ldr	r3, [pc, #8]	; (b4ec4 <hal_usart_available_data_for_write+0xc>)
   b4ebc:	681b      	ldr	r3, [r3, #0]
   b4ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ec0:	9301      	str	r3, [sp, #4]
   b4ec2:	bd08      	pop	{r3, pc}
   b4ec4:	0003023c 	.word	0x0003023c

000b4ec8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4ec8:	b508      	push	{r3, lr}
   b4eca:	4b02      	ldr	r3, [pc, #8]	; (b4ed4 <hal_usart_init_ex+0xc>)
   b4ecc:	681b      	ldr	r3, [r3, #0]
   b4ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ed0:	9301      	str	r3, [sp, #4]
   b4ed2:	bd08      	pop	{r3, pc}
   b4ed4:	0003023c 	.word	0x0003023c

000b4ed8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ed8:	b508      	push	{r3, lr}
   b4eda:	4b02      	ldr	r3, [pc, #8]	; (b4ee4 <hal_i2c_write+0xc>)
   b4edc:	681b      	ldr	r3, [r3, #0]
   b4ede:	6a1b      	ldr	r3, [r3, #32]
   b4ee0:	9301      	str	r3, [sp, #4]
   b4ee2:	bd08      	pop	{r3, pc}
   b4ee4:	00030228 	.word	0x00030228

000b4ee8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4ee8:	b508      	push	{r3, lr}
   b4eea:	4b02      	ldr	r3, [pc, #8]	; (b4ef4 <hal_i2c_available+0xc>)
   b4eec:	681b      	ldr	r3, [r3, #0]
   b4eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ef0:	9301      	str	r3, [sp, #4]
   b4ef2:	bd08      	pop	{r3, pc}
   b4ef4:	00030228 	.word	0x00030228

000b4ef8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4ef8:	b508      	push	{r3, lr}
   b4efa:	4b02      	ldr	r3, [pc, #8]	; (b4f04 <hal_i2c_read+0xc>)
   b4efc:	681b      	ldr	r3, [r3, #0]
   b4efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f00:	9301      	str	r3, [sp, #4]
   b4f02:	bd08      	pop	{r3, pc}
   b4f04:	00030228 	.word	0x00030228

000b4f08 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4f08:	b508      	push	{r3, lr}
   b4f0a:	4b02      	ldr	r3, [pc, #8]	; (b4f14 <hal_i2c_peek+0xc>)
   b4f0c:	681b      	ldr	r3, [r3, #0]
   b4f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f10:	9301      	str	r3, [sp, #4]
   b4f12:	bd08      	pop	{r3, pc}
   b4f14:	00030228 	.word	0x00030228

000b4f18 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4f18:	b508      	push	{r3, lr}
   b4f1a:	4b02      	ldr	r3, [pc, #8]	; (b4f24 <hal_i2c_flush+0xc>)
   b4f1c:	681b      	ldr	r3, [r3, #0]
   b4f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f20:	9301      	str	r3, [sp, #4]
   b4f22:	bd08      	pop	{r3, pc}
   b4f24:	00030228 	.word	0x00030228

000b4f28 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4f28:	b508      	push	{r3, lr}
   b4f2a:	4b02      	ldr	r3, [pc, #8]	; (b4f34 <hal_i2c_is_enabled+0xc>)
   b4f2c:	681b      	ldr	r3, [r3, #0]
   b4f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f30:	9301      	str	r3, [sp, #4]
   b4f32:	bd08      	pop	{r3, pc}
   b4f34:	00030228 	.word	0x00030228

000b4f38 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4f38:	b508      	push	{r3, lr}
   b4f3a:	4b02      	ldr	r3, [pc, #8]	; (b4f44 <hal_i2c_init+0xc>)
   b4f3c:	681b      	ldr	r3, [r3, #0]
   b4f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f40:	9301      	str	r3, [sp, #4]
   b4f42:	bd08      	pop	{r3, pc}
   b4f44:	00030228 	.word	0x00030228

000b4f48 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4f48:	b508      	push	{r3, lr}
   b4f4a:	4b02      	ldr	r3, [pc, #8]	; (b4f54 <sock_setsockopt+0xc>)
   b4f4c:	681b      	ldr	r3, [r3, #0]
   b4f4e:	699b      	ldr	r3, [r3, #24]
   b4f50:	9301      	str	r3, [sp, #4]
   b4f52:	bd08      	pop	{r3, pc}
   b4f54:	00030238 	.word	0x00030238

000b4f58 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4f58:	b508      	push	{r3, lr}
   b4f5a:	4b02      	ldr	r3, [pc, #8]	; (b4f64 <sock_close+0xc>)
   b4f5c:	681b      	ldr	r3, [r3, #0]
   b4f5e:	69db      	ldr	r3, [r3, #28]
   b4f60:	9301      	str	r3, [sp, #4]
   b4f62:	bd08      	pop	{r3, pc}
   b4f64:	00030238 	.word	0x00030238

000b4f68 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b02      	ldr	r3, [pc, #8]	; (b4f74 <sock_connect+0xc>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	6a1b      	ldr	r3, [r3, #32]
   b4f70:	9301      	str	r3, [sp, #4]
   b4f72:	bd08      	pop	{r3, pc}
   b4f74:	00030238 	.word	0x00030238

000b4f78 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4f78:	b508      	push	{r3, lr}
   b4f7a:	4b02      	ldr	r3, [pc, #8]	; (b4f84 <sock_recv+0xc>)
   b4f7c:	681b      	ldr	r3, [r3, #0]
   b4f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f80:	9301      	str	r3, [sp, #4]
   b4f82:	bd08      	pop	{r3, pc}
   b4f84:	00030238 	.word	0x00030238

000b4f88 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4f88:	b508      	push	{r3, lr}
   b4f8a:	4b02      	ldr	r3, [pc, #8]	; (b4f94 <sock_send+0xc>)
   b4f8c:	681b      	ldr	r3, [r3, #0]
   b4f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f90:	9301      	str	r3, [sp, #4]
   b4f92:	bd08      	pop	{r3, pc}
   b4f94:	00030238 	.word	0x00030238

000b4f98 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <sock_socket+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	00030238 	.word	0x00030238

000b4fa8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <hal_spi_init+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	69db      	ldr	r3, [r3, #28]
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	00030230 	.word	0x00030230

000b4fb8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <hal_spi_is_enabled+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	6a1b      	ldr	r3, [r3, #32]
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	00030230 	.word	0x00030230

000b4fc8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <HAL_USB_USART_Init+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	681b      	ldr	r3, [r3, #0]
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	0003024c 	.word	0x0003024c

000b4fd8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b02      	ldr	r3, [pc, #8]	; (b4fe4 <HAL_USB_USART_Available_Data+0xc>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	691b      	ldr	r3, [r3, #16]
   b4fe0:	9301      	str	r3, [sp, #4]
   b4fe2:	bd08      	pop	{r3, pc}
   b4fe4:	0003024c 	.word	0x0003024c

000b4fe8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4fe8:	b508      	push	{r3, lr}
   b4fea:	4b02      	ldr	r3, [pc, #8]	; (b4ff4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4fec:	681b      	ldr	r3, [r3, #0]
   b4fee:	695b      	ldr	r3, [r3, #20]
   b4ff0:	9301      	str	r3, [sp, #4]
   b4ff2:	bd08      	pop	{r3, pc}
   b4ff4:	0003024c 	.word	0x0003024c

000b4ff8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b02      	ldr	r3, [pc, #8]	; (b5004 <HAL_USB_USART_Receive_Data+0xc>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	699b      	ldr	r3, [r3, #24]
   b5000:	9301      	str	r3, [sp, #4]
   b5002:	bd08      	pop	{r3, pc}
   b5004:	0003024c 	.word	0x0003024c

000b5008 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <HAL_USB_USART_Send_Data+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	69db      	ldr	r3, [r3, #28]
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	0003024c 	.word	0x0003024c

000b5018 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <HAL_USB_USART_Flush_Data+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	6a1b      	ldr	r3, [r3, #32]
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	0003024c 	.word	0x0003024c

000b5028 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b02      	ldr	r3, [pc, #8]	; (b5034 <panic_+0xc>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5030:	9301      	str	r3, [sp, #4]
   b5032:	bd08      	pop	{r3, pc}
   b5034:	00030260 	.word	0x00030260

000b5038 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5038:	b508      	push	{r3, lr}
   b503a:	4b02      	ldr	r3, [pc, #8]	; (b5044 <log_message+0xc>)
   b503c:	681b      	ldr	r3, [r3, #0]
   b503e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5040:	9301      	str	r3, [sp, #4]
   b5042:	bd08      	pop	{r3, pc}
   b5044:	00030260 	.word	0x00030260

000b5048 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5048:	b508      	push	{r3, lr}
   b504a:	4b02      	ldr	r3, [pc, #8]	; (b5054 <set_system_mode+0xc>)
   b504c:	681b      	ldr	r3, [r3, #0]
   b504e:	685b      	ldr	r3, [r3, #4]
   b5050:	9301      	str	r3, [sp, #4]
   b5052:	bd08      	pop	{r3, pc}
   b5054:	00030220 	.word	0x00030220

000b5058 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5058:	b508      	push	{r3, lr}
   b505a:	4b02      	ldr	r3, [pc, #8]	; (b5064 <system_delay_ms+0xc>)
   b505c:	681b      	ldr	r3, [r3, #0]
   b505e:	695b      	ldr	r3, [r3, #20]
   b5060:	9301      	str	r3, [sp, #4]
   b5062:	bd08      	pop	{r3, pc}
   b5064:	00030220 	.word	0x00030220

000b5068 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5068:	b508      	push	{r3, lr}
   b506a:	4b03      	ldr	r3, [pc, #12]	; (b5078 <system_ctrl_set_app_request_handler+0x10>)
   b506c:	681b      	ldr	r3, [r3, #0]
   b506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5072:	9301      	str	r3, [sp, #4]
   b5074:	bd08      	pop	{r3, pc}
   b5076:	0000      	.short	0x0000
   b5078:	00030220 	.word	0x00030220

000b507c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b03      	ldr	r3, [pc, #12]	; (b508c <system_ctrl_set_result+0x10>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5086:	9301      	str	r3, [sp, #4]
   b5088:	bd08      	pop	{r3, pc}
   b508a:	0000      	.short	0x0000
   b508c:	00030220 	.word	0x00030220

000b5090 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5090:	b508      	push	{r3, lr}
   b5092:	4b02      	ldr	r3, [pc, #8]	; (b509c <network_connect+0xc>)
   b5094:	681b      	ldr	r3, [r3, #0]
   b5096:	685b      	ldr	r3, [r3, #4]
   b5098:	9301      	str	r3, [sp, #4]
   b509a:	bd08      	pop	{r3, pc}
   b509c:	00030240 	.word	0x00030240

000b50a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b02      	ldr	r3, [pc, #8]	; (b50ac <network_connecting+0xc>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	689b      	ldr	r3, [r3, #8]
   b50a8:	9301      	str	r3, [sp, #4]
   b50aa:	bd08      	pop	{r3, pc}
   b50ac:	00030240 	.word	0x00030240

000b50b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b50b0:	b508      	push	{r3, lr}
   b50b2:	4b02      	ldr	r3, [pc, #8]	; (b50bc <network_disconnect+0xc>)
   b50b4:	681b      	ldr	r3, [r3, #0]
   b50b6:	68db      	ldr	r3, [r3, #12]
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	bd08      	pop	{r3, pc}
   b50bc:	00030240 	.word	0x00030240

000b50c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b02      	ldr	r3, [pc, #8]	; (b50cc <network_ready+0xc>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	691b      	ldr	r3, [r3, #16]
   b50c8:	9301      	str	r3, [sp, #4]
   b50ca:	bd08      	pop	{r3, pc}
   b50cc:	00030240 	.word	0x00030240

000b50d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <network_on+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	695b      	ldr	r3, [r3, #20]
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	00030240 	.word	0x00030240

000b50e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <network_off+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	699b      	ldr	r3, [r3, #24]
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	00030240 	.word	0x00030240

000b50f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <network_listen+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	69db      	ldr	r3, [r3, #28]
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	00030240 	.word	0x00030240

000b5100 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <network_listening+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	6a1b      	ldr	r3, [r3, #32]
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	00030240 	.word	0x00030240

000b5110 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <network_set_listen_timeout+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	00030240 	.word	0x00030240

000b5120 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <network_get_listen_timeout+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	00030240 	.word	0x00030240

000b5130 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <network_is_on+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	00030240 	.word	0x00030240

000b5140 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <network_is_off+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	00030240 	.word	0x00030240

000b5150 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b02      	ldr	r3, [pc, #8]	; (b515c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5158:	9301      	str	r3, [sp, #4]
   b515a:	bd08      	pop	{r3, pc}
   b515c:	00030244 	.word	0x00030244

000b5160 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5160:	b508      	push	{r3, lr}
   b5162:	4b02      	ldr	r3, [pc, #8]	; (b516c <malloc+0xc>)
   b5164:	681b      	ldr	r3, [r3, #0]
   b5166:	681b      	ldr	r3, [r3, #0]
   b5168:	9301      	str	r3, [sp, #4]
   b516a:	bd08      	pop	{r3, pc}
   b516c:	0003021c 	.word	0x0003021c

000b5170 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5170:	b508      	push	{r3, lr}
   b5172:	4b02      	ldr	r3, [pc, #8]	; (b517c <free+0xc>)
   b5174:	681b      	ldr	r3, [r3, #0]
   b5176:	685b      	ldr	r3, [r3, #4]
   b5178:	9301      	str	r3, [sp, #4]
   b517a:	bd08      	pop	{r3, pc}
   b517c:	0003021c 	.word	0x0003021c

000b5180 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5180:	b508      	push	{r3, lr}
   b5182:	4b02      	ldr	r3, [pc, #8]	; (b518c <vsnprintf+0xc>)
   b5184:	681b      	ldr	r3, [r3, #0]
   b5186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5188:	9301      	str	r3, [sp, #4]
   b518a:	bd08      	pop	{r3, pc}
   b518c:	0003021c 	.word	0x0003021c

000b5190 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5190:	b508      	push	{r3, lr}
   b5192:	4b02      	ldr	r3, [pc, #8]	; (b519c <__errno+0xc>)
   b5194:	681b      	ldr	r3, [r3, #0]
   b5196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5198:	9301      	str	r3, [sp, #4]
   b519a:	bd08      	pop	{r3, pc}
   b519c:	0003021c 	.word	0x0003021c

000b51a0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b51a0:	b508      	push	{r3, lr}
   b51a2:	4b02      	ldr	r3, [pc, #8]	; (b51ac <__assert_func+0xc>)
   b51a4:	681b      	ldr	r3, [r3, #0]
   b51a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51a8:	9301      	str	r3, [sp, #4]
   b51aa:	bd08      	pop	{r3, pc}
   b51ac:	0003021c 	.word	0x0003021c

000b51b0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b51b0:	b508      	push	{r3, lr}
   b51b2:	4b02      	ldr	r3, [pc, #8]	; (b51bc <newlib_impure_ptr_callback+0xc>)
   b51b4:	681b      	ldr	r3, [r3, #0]
   b51b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51b8:	9301      	str	r3, [sp, #4]
   b51ba:	bd08      	pop	{r3, pc}
   b51bc:	0003021c 	.word	0x0003021c

000b51c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b51c0:	2200      	movs	r2, #0
   b51c2:	6840      	ldr	r0, [r0, #4]
   b51c4:	4611      	mov	r1, r2
   b51c6:	f7ff bf9b 	b.w	b5100 <network_listening>

000b51ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b51ca:	2200      	movs	r2, #0
   b51cc:	6840      	ldr	r0, [r0, #4]
   b51ce:	4611      	mov	r1, r2
   b51d0:	f7ff bfa6 	b.w	b5120 <network_get_listen_timeout>

000b51d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b51d4:	6840      	ldr	r0, [r0, #4]
   b51d6:	2200      	movs	r2, #0
   b51d8:	f7ff bf9a 	b.w	b5110 <network_set_listen_timeout>

000b51dc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b51dc:	6840      	ldr	r0, [r0, #4]
   b51de:	2200      	movs	r2, #0
   b51e0:	f081 0101 	eor.w	r1, r1, #1
   b51e4:	f7ff bf84 	b.w	b50f0 <network_listen>

000b51e8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b51e8:	2300      	movs	r3, #0
   b51ea:	6840      	ldr	r0, [r0, #4]
   b51ec:	461a      	mov	r2, r3
   b51ee:	4619      	mov	r1, r3
   b51f0:	f7ff bf76 	b.w	b50e0 <network_off>

000b51f4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b51f4:	2300      	movs	r3, #0
   b51f6:	6840      	ldr	r0, [r0, #4]
   b51f8:	461a      	mov	r2, r3
   b51fa:	4619      	mov	r1, r3
   b51fc:	f7ff bf68 	b.w	b50d0 <network_on>

000b5200 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5200:	2200      	movs	r2, #0
   b5202:	6840      	ldr	r0, [r0, #4]
   b5204:	4611      	mov	r1, r2
   b5206:	f7ff bf5b 	b.w	b50c0 <network_ready>

000b520a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b520a:	2200      	movs	r2, #0
   b520c:	6840      	ldr	r0, [r0, #4]
   b520e:	4611      	mov	r1, r2
   b5210:	f7ff bf46 	b.w	b50a0 <network_connecting>

000b5214 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5214:	6840      	ldr	r0, [r0, #4]
   b5216:	2200      	movs	r2, #0
   b5218:	2102      	movs	r1, #2
   b521a:	f7ff bf49 	b.w	b50b0 <network_disconnect>

000b521e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b521e:	2300      	movs	r3, #0
   b5220:	6840      	ldr	r0, [r0, #4]
   b5222:	461a      	mov	r2, r3
   b5224:	f7ff bf34 	b.w	b5090 <network_connect>

000b5228 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5228:	4b02      	ldr	r3, [pc, #8]	; (b5234 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b522a:	2203      	movs	r2, #3
   b522c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b522e:	4a02      	ldr	r2, [pc, #8]	; (b5238 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5230:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5232:	4770      	bx	lr
   b5234:	2003e6b0 	.word	0x2003e6b0
   b5238:	000b6b18 	.word	0x000b6b18

000b523c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b523c:	b510      	push	{r4, lr}
   b523e:	4604      	mov	r4, r0
   b5240:	4608      	mov	r0, r1
{
    _spi = spi;
   b5242:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5244:	f7ff feb0 	bl	b4fa8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5248:	2300      	movs	r3, #0
   b524a:	6063      	str	r3, [r4, #4]
}
   b524c:	4620      	mov	r0, r4
   b524e:	bd10      	pop	{r4, pc}

000b5250 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5250:	4b05      	ldr	r3, [pc, #20]	; (b5268 <_GLOBAL__sub_I_System+0x18>)
   b5252:	2202      	movs	r2, #2
   b5254:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5256:	4b05      	ldr	r3, [pc, #20]	; (b526c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5258:	4a05      	ldr	r2, [pc, #20]	; (b5270 <_GLOBAL__sub_I_System+0x20>)
   b525a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b525c:	2000      	movs	r0, #0
   b525e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5262:	f7ff bef1 	b.w	b5048 <set_system_mode>
   b5266:	bf00      	nop
   b5268:	2003e6c4 	.word	0x2003e6c4
   b526c:	2003e6b8 	.word	0x2003e6b8
   b5270:	ffff0000 	.word	0xffff0000

000b5274 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b5274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b5278:	1e93      	subs	r3, r2, #2
{
   b527a:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b527c:	2b22      	cmp	r3, #34	; 0x22
   b527e:	f04f 0300 	mov.w	r3, #0
{
   b5282:	460d      	mov	r5, r1
   b5284:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b5286:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b528a:	d927      	bls.n	b52dc <ltoa+0x68>

      if (10 == base && N < 0L)
   b528c:	2800      	cmp	r0, #0
   b528e:	da2a      	bge.n	b52e6 <ltoa+0x72>
      {
            *head++ = '-';
   b5290:	462e      	mov	r6, r5
   b5292:	232d      	movs	r3, #45	; 0x2d
   b5294:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5298:	4240      	negs	r0, r0
   b529a:	240a      	movs	r4, #10
      *tail-- = '\0';
   b529c:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b52a0:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b52a4:	4622      	mov	r2, r4
   b52a6:	4601      	mov	r1, r0
   b52a8:	a801      	add	r0, sp, #4
   b52aa:	f001 f929 	bl	b6500 <ldiv>
   b52ae:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b52b0:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b52b2:	2b09      	cmp	r3, #9
   b52b4:	bfcc      	ite	gt
   b52b6:	2237      	movgt	r2, #55	; 0x37
   b52b8:	2230      	movle	r2, #48	; 0x30
   b52ba:	fa52 f383 	uxtab	r3, r2, r3
   b52be:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b52c2:	f108 0801 	add.w	r8, r8, #1
   b52c6:	2800      	cmp	r0, #0
   b52c8:	d1ec      	bne.n	b52a4 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b52ca:	4642      	mov	r2, r8
   b52cc:	1c79      	adds	r1, r7, #1
   b52ce:	4630      	mov	r0, r6
   b52d0:	f001 f92a 	bl	b6528 <memcpy>
      return str;
}
   b52d4:	4628      	mov	r0, r5
   b52d6:	b00c      	add	sp, #48	; 0x30
   b52d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b52dc:	2a0a      	cmp	r2, #10
   b52de:	d0d5      	beq.n	b528c <ltoa+0x18>
      if (uarg)
   b52e0:	b118      	cbz	r0, b52ea <ltoa+0x76>
   b52e2:	462e      	mov	r6, r5
   b52e4:	e7da      	b.n	b529c <ltoa+0x28>
   b52e6:	240a      	movs	r4, #10
   b52e8:	e7fa      	b.n	b52e0 <ltoa+0x6c>
      else  *tail-- = '0';
   b52ea:	2330      	movs	r3, #48	; 0x30
   b52ec:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b52f0:	462e      	mov	r6, r5
   b52f2:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b52f6:	f04f 0802 	mov.w	r8, #2
   b52fa:	e7e6      	b.n	b52ca <ltoa+0x56>

000b52fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b52fc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b52fe:	6843      	ldr	r3, [r0, #4]
   b5300:	3b01      	subs	r3, #1
    {
   b5302:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5304:	6043      	str	r3, [r0, #4]
   b5306:	b963      	cbnz	r3, b5322 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b5308:	6803      	ldr	r3, [r0, #0]
   b530a:	689b      	ldr	r3, [r3, #8]
   b530c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b530e:	68a3      	ldr	r3, [r4, #8]
   b5310:	3b01      	subs	r3, #1
   b5312:	60a3      	str	r3, [r4, #8]
   b5314:	b92b      	cbnz	r3, b5322 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5316:	6823      	ldr	r3, [r4, #0]
   b5318:	4620      	mov	r0, r4
   b531a:	68db      	ldr	r3, [r3, #12]
        }
    }
   b531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5320:	4718      	bx	r3
    }
   b5322:	bd10      	pop	{r4, pc}

000b5324 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5324:	4802      	ldr	r0, [pc, #8]	; (b5330 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5326:	2300      	movs	r3, #0
   b5328:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b532a:	f7ff bd75 	b.w	b4e18 <os_mutex_recursive_create>
   b532e:	bf00      	nop
   b5330:	2003e6c8 	.word	0x2003e6c8

000b5334 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5336:	4606      	mov	r6, r0
   b5338:	460d      	mov	r5, r1
  size_t n = 0;
   b533a:	188f      	adds	r7, r1, r2
   b533c:	2400      	movs	r4, #0
  while (size--) {
   b533e:	42bd      	cmp	r5, r7
   b5340:	d00c      	beq.n	b535c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5342:	6833      	ldr	r3, [r6, #0]
   b5344:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5348:	689b      	ldr	r3, [r3, #8]
   b534a:	4630      	mov	r0, r6
   b534c:	4798      	blx	r3
     if (chunk>=0)
   b534e:	1e03      	subs	r3, r0, #0
   b5350:	db01      	blt.n	b5356 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5352:	441c      	add	r4, r3
  while (size--) {
   b5354:	e7f3      	b.n	b533e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5356:	2c00      	cmp	r4, #0
   b5358:	bf08      	it	eq
   b535a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b535c:	4620      	mov	r0, r4
   b535e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5360 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5360:	b513      	push	{r0, r1, r4, lr}
   b5362:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5364:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5366:	b159      	cbz	r1, b5380 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5368:	9101      	str	r1, [sp, #4]
   b536a:	f001 f94d 	bl	b6608 <strlen>
   b536e:	6823      	ldr	r3, [r4, #0]
   b5370:	9901      	ldr	r1, [sp, #4]
   b5372:	68db      	ldr	r3, [r3, #12]
   b5374:	4602      	mov	r2, r0
   b5376:	4620      	mov	r0, r4
    }
   b5378:	b002      	add	sp, #8
   b537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b537e:	4718      	bx	r3
    }
   b5380:	b002      	add	sp, #8
   b5382:	bd10      	pop	{r4, pc}

000b5384 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5384:	b508      	push	{r3, lr}
  return write(str);
   b5386:	f7ff ffeb 	bl	b5360 <_ZN5Print5writeEPKc>
}
   b538a:	bd08      	pop	{r3, pc}

000b538c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b538c:	6803      	ldr	r3, [r0, #0]
   b538e:	689b      	ldr	r3, [r3, #8]
   b5390:	4718      	bx	r3

000b5392 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5392:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5394:	210d      	movs	r1, #13
{
   b5396:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5398:	f7ff fff8 	bl	b538c <_ZN5Print5printEc>
  n += print('\n');
   b539c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b539e:	4604      	mov	r4, r0
  n += print('\n');
   b53a0:	4628      	mov	r0, r5
   b53a2:	f7ff fff3 	bl	b538c <_ZN5Print5printEc>
  return n;
}
   b53a6:	4420      	add	r0, r4
   b53a8:	bd38      	pop	{r3, r4, r5, pc}

000b53aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b53aa:	b538      	push	{r3, r4, r5, lr}
   b53ac:	4605      	mov	r5, r0
  return write(str);
   b53ae:	f7ff ffd7 	bl	b5360 <_ZN5Print5writeEPKc>
   b53b2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b53b4:	4628      	mov	r0, r5
   b53b6:	f7ff ffec 	bl	b5392 <_ZN5Print7printlnEv>
  return n;
}
   b53ba:	4420      	add	r0, r4
   b53bc:	bd38      	pop	{r3, r4, r5, pc}

000b53be <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b53be:	b530      	push	{r4, r5, lr}
   b53c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b53c2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b53c4:	2a01      	cmp	r2, #1
  *str = '\0';
   b53c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b53ca:	bf98      	it	ls
   b53cc:	220a      	movls	r2, #10
   b53ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b53d0:	460d      	mov	r5, r1
   b53d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b53d6:	fb01 5312 	mls	r3, r1, r2, r5
   b53da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b53de:	2b09      	cmp	r3, #9
   b53e0:	bf94      	ite	ls
   b53e2:	3330      	addls	r3, #48	; 0x30
   b53e4:	3337      	addhi	r3, #55	; 0x37
   b53e6:	b2db      	uxtb	r3, r3
  } while(n);
   b53e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b53ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b53ee:	d9ef      	bls.n	b53d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b53f0:	4621      	mov	r1, r4
   b53f2:	f7ff ffb5 	bl	b5360 <_ZN5Print5writeEPKc>
}
   b53f6:	b00b      	add	sp, #44	; 0x2c
   b53f8:	bd30      	pop	{r4, r5, pc}

000b53fa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b53fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b53fe:	b086      	sub	sp, #24
   b5400:	af00      	add	r7, sp, #0
   b5402:	4605      	mov	r5, r0
   b5404:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5406:	1d38      	adds	r0, r7, #4
   b5408:	2114      	movs	r1, #20
{
   b540a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b540c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b540e:	f7ff feb7 	bl	b5180 <vsnprintf>

    if (n<bufsize)
   b5412:	2813      	cmp	r0, #19
   b5414:	d80e      	bhi.n	b5434 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5416:	1d39      	adds	r1, r7, #4
   b5418:	4628      	mov	r0, r5
   b541a:	f7ff ffa1 	bl	b5360 <_ZN5Print5writeEPKc>
   b541e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5420:	b11e      	cbz	r6, b542a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5422:	4628      	mov	r0, r5
   b5424:	f7ff ffb5 	bl	b5392 <_ZN5Print7printlnEv>
   b5428:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b542a:	4620      	mov	r0, r4
   b542c:	3718      	adds	r7, #24
   b542e:	46bd      	mov	sp, r7
   b5430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5434:	f100 0308 	add.w	r3, r0, #8
   b5438:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b543c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b543e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5442:	4622      	mov	r2, r4
   b5444:	1c41      	adds	r1, r0, #1
   b5446:	683b      	ldr	r3, [r7, #0]
   b5448:	4668      	mov	r0, sp
   b544a:	f7ff fe99 	bl	b5180 <vsnprintf>
  return write(str);
   b544e:	4669      	mov	r1, sp
   b5450:	4628      	mov	r0, r5
   b5452:	f7ff ff85 	bl	b5360 <_ZN5Print5writeEPKc>
   b5456:	4604      	mov	r4, r0
   b5458:	46c5      	mov	sp, r8
   b545a:	e7e1      	b.n	b5420 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b545c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b545c:	2300      	movs	r3, #0
   b545e:	6840      	ldr	r0, [r0, #4]
   b5460:	461a      	mov	r2, r3
   b5462:	4619      	mov	r1, r3
   b5464:	f7ff be34 	b.w	b50d0 <network_on>

000b5468 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5468:	4b01      	ldr	r3, [pc, #4]	; (b5470 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b546a:	4a02      	ldr	r2, [pc, #8]	; (b5474 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b546c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b546e:	4770      	bx	lr
   b5470:	2003e6cc 	.word	0x2003e6cc
   b5474:	000b6b54 	.word	0x000b6b54

000b5478 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5478:	4b02      	ldr	r3, [pc, #8]	; (b5484 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b547a:	681a      	ldr	r2, [r3, #0]
   b547c:	4b02      	ldr	r3, [pc, #8]	; (b5488 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b547e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5480:	4770      	bx	lr
   b5482:	bf00      	nop
   b5484:	2003e4f8 	.word	0x2003e4f8
   b5488:	2003e6d0 	.word	0x2003e6d0

000b548c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b548c:	2100      	movs	r1, #0
   b548e:	f7ff bde3 	b.w	b5058 <system_delay_ms>
	...

000b5494 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5494:	b510      	push	{r4, lr}
   b5496:	4b04      	ldr	r3, [pc, #16]	; (b54a8 <_ZN9TCPClientD1Ev+0x14>)
   b5498:	6003      	str	r3, [r0, #0]
   b549a:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b549c:	6980      	ldr	r0, [r0, #24]
   b549e:	b108      	cbz	r0, b54a4 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b54a0:	f7ff ff2c 	bl	b52fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b54a4:	4620      	mov	r0, r4
   b54a6:	bd10      	pop	{r4, pc}
   b54a8:	000b6c4c 	.word	0x000b6c4c

000b54ac <_ZN9TCPClientD0Ev>:
   b54ac:	b510      	push	{r4, lr}
   b54ae:	4604      	mov	r4, r0
   b54b0:	f7ff fff0 	bl	b5494 <_ZN9TCPClientD1Ev>
   b54b4:	4620      	mov	r0, r4
   b54b6:	211c      	movs	r1, #28
   b54b8:	f7fe fdef 	bl	b409a <_ZdlPvj>
   b54bc:	4620      	mov	r0, r4
   b54be:	bd10      	pop	{r4, pc}

000b54c0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b54c0:	4b01      	ldr	r3, [pc, #4]	; (b54c8 <_GLOBAL__sub_I_RGB+0x8>)
   b54c2:	2200      	movs	r2, #0
   b54c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b54c6:	4770      	bx	lr
   b54c8:	2003e6d4 	.word	0x2003e6d4

000b54cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b54cc:	4b01      	ldr	r3, [pc, #4]	; (b54d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b54ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b54d0:	4770      	bx	lr
   b54d2:	bf00      	nop
   b54d4:	2003e4fc 	.word	0x2003e4fc

000b54d8 <serialEventRun>:
{
   b54d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b54da:	4b0b      	ldr	r3, [pc, #44]	; (b5508 <serialEventRun+0x30>)
   b54dc:	b143      	cbz	r3, b54f0 <serialEventRun+0x18>
   b54de:	f000 f979 	bl	b57d4 <_Z16_fetch_usbserialv>
   b54e2:	6803      	ldr	r3, [r0, #0]
   b54e4:	691b      	ldr	r3, [r3, #16]
   b54e6:	4798      	blx	r3
   b54e8:	2800      	cmp	r0, #0
   b54ea:	dd01      	ble.n	b54f0 <serialEventRun+0x18>
        serialEvent();
   b54ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b54f0:	4b06      	ldr	r3, [pc, #24]	; (b550c <serialEventRun+0x34>)
   b54f2:	b143      	cbz	r3, b5506 <serialEventRun+0x2e>
   b54f4:	f000 fe74 	bl	b61e0 <_Z22__fetch_global_Serial1v>
   b54f8:	6803      	ldr	r3, [r0, #0]
   b54fa:	691b      	ldr	r3, [r3, #16]
   b54fc:	4798      	blx	r3
   b54fe:	2800      	cmp	r0, #0
   b5500:	dd01      	ble.n	b5506 <serialEventRun+0x2e>
        serialEvent1();
   b5502:	f3af 8000 	nop.w
}
   b5506:	bd08      	pop	{r3, pc}
	...

000b5510 <_post_loop>:
{
   b5510:	b508      	push	{r3, lr}
	serialEventRun();
   b5512:	f7ff ffe1 	bl	b54d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5516:	f7ff fc5f 	bl	b4dd8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b551a:	4b01      	ldr	r3, [pc, #4]	; (b5520 <_post_loop+0x10>)
   b551c:	6018      	str	r0, [r3, #0]
}
   b551e:	bd08      	pop	{r3, pc}
   b5520:	2003e738 	.word	0x2003e738

000b5524 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5524:	4805      	ldr	r0, [pc, #20]	; (b553c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5526:	4a06      	ldr	r2, [pc, #24]	; (b5540 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5528:	4906      	ldr	r1, [pc, #24]	; (b5544 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b552a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b552c:	1a12      	subs	r2, r2, r0
   b552e:	f000 fffb 	bl	b6528 <memcpy>
    __backup_sram_signature = signature;
   b5532:	4b05      	ldr	r3, [pc, #20]	; (b5548 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5534:	4a05      	ldr	r2, [pc, #20]	; (b554c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5536:	601a      	str	r2, [r3, #0]
}
   b5538:	bd08      	pop	{r3, pc}
   b553a:	bf00      	nop
   b553c:	2003f400 	.word	0x2003f400
   b5540:	2003f404 	.word	0x2003f404
   b5544:	000b6ec0 	.word	0x000b6ec0
   b5548:	2003f400 	.word	0x2003f400
   b554c:	9a271c1e 	.word	0x9a271c1e

000b5550 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5550:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5552:	2300      	movs	r3, #0
   b5554:	9300      	str	r3, [sp, #0]
   b5556:	461a      	mov	r2, r3
   b5558:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b555c:	f7ff fd8e 	bl	b507c <system_ctrl_set_result>
}
   b5560:	b003      	add	sp, #12
   b5562:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5568 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5568:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b556a:	8843      	ldrh	r3, [r0, #2]
   b556c:	2b0a      	cmp	r3, #10
   b556e:	d008      	beq.n	b5582 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5570:	2b50      	cmp	r3, #80	; 0x50
   b5572:	d10b      	bne.n	b558c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5574:	4b09      	ldr	r3, [pc, #36]	; (b559c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5576:	681b      	ldr	r3, [r3, #0]
   b5578:	b14b      	cbz	r3, b558e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b557a:	b003      	add	sp, #12
   b557c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5580:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5582:	f7ff ffe5 	bl	b5550 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5586:	b003      	add	sp, #12
   b5588:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b558c:	2300      	movs	r3, #0
   b558e:	9300      	str	r3, [sp, #0]
   b5590:	461a      	mov	r2, r3
   b5592:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5596:	f7ff fd71 	bl	b507c <system_ctrl_set_result>
}
   b559a:	e7f4      	b.n	b5586 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b559c:	2003e6e8 	.word	0x2003e6e8

000b55a0 <module_user_init_hook>:
{
   b55a0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b55a2:	4812      	ldr	r0, [pc, #72]	; (b55ec <module_user_init_hook+0x4c>)
   b55a4:	2100      	movs	r1, #0
   b55a6:	f7ff fe03 	bl	b51b0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b55aa:	4b11      	ldr	r3, [pc, #68]	; (b55f0 <module_user_init_hook+0x50>)
   b55ac:	681a      	ldr	r2, [r3, #0]
   b55ae:	4b11      	ldr	r3, [pc, #68]	; (b55f4 <module_user_init_hook+0x54>)
   b55b0:	429a      	cmp	r2, r3
   b55b2:	4b11      	ldr	r3, [pc, #68]	; (b55f8 <module_user_init_hook+0x58>)
   b55b4:	bf0c      	ite	eq
   b55b6:	2201      	moveq	r2, #1
   b55b8:	2200      	movne	r2, #0
   b55ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b55bc:	d001      	beq.n	b55c2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b55be:	f7ff ffb1 	bl	b5524 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b55c2:	f7ff fbf9 	bl	b4db8 <HAL_RNG_GetRandomNumber>
   b55c6:	4604      	mov	r4, r0
    srand(seed);
   b55c8:	f000 ffde 	bl	b6588 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b55cc:	4b0b      	ldr	r3, [pc, #44]	; (b55fc <module_user_init_hook+0x5c>)
   b55ce:	b113      	cbz	r3, b55d6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b55d0:	4620      	mov	r0, r4
   b55d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b55d6:	2100      	movs	r1, #0
   b55d8:	4808      	ldr	r0, [pc, #32]	; (b55fc <module_user_init_hook+0x5c>)
   b55da:	f7ff fdb9 	bl	b5150 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b55de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b55e2:	4807      	ldr	r0, [pc, #28]	; (b5600 <module_user_init_hook+0x60>)
   b55e4:	2100      	movs	r1, #0
   b55e6:	f7ff bd3f 	b.w	b5068 <system_ctrl_set_app_request_handler>
   b55ea:	bf00      	nop
   b55ec:	000b54cd 	.word	0x000b54cd
   b55f0:	2003f400 	.word	0x2003f400
   b55f4:	9a271c1e 	.word	0x9a271c1e
   b55f8:	2003e6e4 	.word	0x2003e6e4
   b55fc:	00000000 	.word	0x00000000
   b5600:	000b5569 	.word	0x000b5569

000b5604 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5604:	4770      	bx	lr

000b5606 <_ZN9IPAddressD0Ev>:
   b5606:	b510      	push	{r4, lr}
   b5608:	2118      	movs	r1, #24
   b560a:	4604      	mov	r4, r0
   b560c:	f7fe fd45 	bl	b409a <_ZdlPvj>
   b5610:	4620      	mov	r0, r4
   b5612:	bd10      	pop	{r4, pc}

000b5614 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5614:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5616:	7d03      	ldrb	r3, [r0, #20]
   b5618:	2b06      	cmp	r3, #6
{
   b561a:	b08d      	sub	sp, #52	; 0x34
   b561c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b561e:	f100 0704 	add.w	r7, r0, #4
   b5622:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5626:	d012      	beq.n	b564e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5628:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b562c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5630:	220a      	movs	r2, #10
   b5632:	4630      	mov	r0, r6
   b5634:	f7ff fec3 	bl	b53be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5638:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b563a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b563c:	d019      	beq.n	b5672 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b563e:	2c00      	cmp	r4, #0
   b5640:	d0f4      	beq.n	b562c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5642:	212e      	movs	r1, #46	; 0x2e
   b5644:	4630      	mov	r0, r6
   b5646:	f7ff fea1 	bl	b538c <_ZN5Print5printEc>
   b564a:	4404      	add	r4, r0
   b564c:	e7ee      	b.n	b562c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b564e:	232f      	movs	r3, #47	; 0x2f
   b5650:	466a      	mov	r2, sp
   b5652:	4639      	mov	r1, r7
   b5654:	200a      	movs	r0, #10
		buf[0] = 0;
   b5656:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b565a:	f7ff fbe5 	bl	b4e28 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b565e:	4668      	mov	r0, sp
   b5660:	f000 ffd2 	bl	b6608 <strlen>
   b5664:	6833      	ldr	r3, [r6, #0]
   b5666:	4602      	mov	r2, r0
   b5668:	68db      	ldr	r3, [r3, #12]
   b566a:	4669      	mov	r1, sp
   b566c:	4630      	mov	r0, r6
   b566e:	4798      	blx	r3
   b5670:	4604      	mov	r4, r0
    }
    return n;
}
   b5672:	4620      	mov	r0, r4
   b5674:	b00d      	add	sp, #52	; 0x34
   b5676:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5678 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5678:	b510      	push	{r4, lr}
   b567a:	4b05      	ldr	r3, [pc, #20]	; (b5690 <_ZN9IPAddressC1Ev+0x18>)
   b567c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b567e:	2211      	movs	r2, #17
   b5680:	f840 3b04 	str.w	r3, [r0], #4
   b5684:	2100      	movs	r1, #0
   b5686:	f000 ff77 	bl	b6578 <memset>
}
   b568a:	4620      	mov	r0, r4
   b568c:	bd10      	pop	{r4, pc}
   b568e:	bf00      	nop
   b5690:	000b6b7c 	.word	0x000b6b7c

000b5694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5694:	4603      	mov	r3, r0
   b5696:	4a07      	ldr	r2, [pc, #28]	; (b56b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5698:	b510      	push	{r4, lr}
   b569a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b569e:	f101 0210 	add.w	r2, r1, #16
   b56a2:	f851 4b04 	ldr.w	r4, [r1], #4
   b56a6:	f843 4b04 	str.w	r4, [r3], #4
   b56aa:	4291      	cmp	r1, r2
   b56ac:	d1f9      	bne.n	b56a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b56ae:	780a      	ldrb	r2, [r1, #0]
   b56b0:	701a      	strb	r2, [r3, #0]
}
   b56b2:	bd10      	pop	{r4, pc}
   b56b4:	000b6b7c 	.word	0x000b6b7c

000b56b8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b56b8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b56ba:	2b04      	cmp	r3, #4
   b56bc:	d104      	bne.n	b56c8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b56be:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b56c0:	3800      	subs	r0, #0
   b56c2:	bf18      	it	ne
   b56c4:	2001      	movne	r0, #1
   b56c6:	4770      	bx	lr
    } else if (version() == 6) {
   b56c8:	2b06      	cmp	r3, #6
   b56ca:	d107      	bne.n	b56dc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b56cc:	6843      	ldr	r3, [r0, #4]
   b56ce:	b93b      	cbnz	r3, b56e0 <_ZNK9IPAddresscvbEv+0x28>
   b56d0:	6883      	ldr	r3, [r0, #8]
   b56d2:	b92b      	cbnz	r3, b56e0 <_ZNK9IPAddresscvbEv+0x28>
   b56d4:	68c3      	ldr	r3, [r0, #12]
   b56d6:	b91b      	cbnz	r3, b56e0 <_ZNK9IPAddresscvbEv+0x28>
   b56d8:	6900      	ldr	r0, [r0, #16]
   b56da:	e7f1      	b.n	b56c0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b56dc:	2000      	movs	r0, #0
   b56de:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b56e0:	2001      	movs	r0, #1
}
   b56e2:	4770      	bx	lr

000b56e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b56e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b56e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b56ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b56ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b56f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b56f6:	2304      	movs	r3, #4
   b56f8:	6041      	str	r1, [r0, #4]
   b56fa:	7503      	strb	r3, [r0, #20]
}
   b56fc:	bd10      	pop	{r4, pc}
	...

000b5700 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5700:	b507      	push	{r0, r1, r2, lr}
   b5702:	4b06      	ldr	r3, [pc, #24]	; (b571c <_ZN9IPAddressC1EPKh+0x1c>)
   b5704:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5706:	78cb      	ldrb	r3, [r1, #3]
   b5708:	9300      	str	r3, [sp, #0]
   b570a:	788b      	ldrb	r3, [r1, #2]
   b570c:	784a      	ldrb	r2, [r1, #1]
   b570e:	7809      	ldrb	r1, [r1, #0]
   b5710:	f7ff ffe8 	bl	b56e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5714:	b003      	add	sp, #12
   b5716:	f85d fb04 	ldr.w	pc, [sp], #4
   b571a:	bf00      	nop
   b571c:	000b6b7c 	.word	0x000b6b7c

000b5720 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5720:	7441      	strb	r1, [r0, #17]
}
   b5722:	4770      	bx	lr

000b5724 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5724:	4770      	bx	lr

000b5726 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5726:	4770      	bx	lr

000b5728 <_ZN9USBSerial4readEv>:
{
   b5728:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b572a:	2100      	movs	r1, #0
   b572c:	7c00      	ldrb	r0, [r0, #16]
   b572e:	f7ff fc63 	bl	b4ff8 <HAL_USB_USART_Receive_Data>
}
   b5732:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5736:	bd08      	pop	{r3, pc}

000b5738 <_ZN9USBSerial4peekEv>:
{
   b5738:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b573a:	2101      	movs	r1, #1
   b573c:	7c00      	ldrb	r0, [r0, #16]
   b573e:	f7ff fc5b 	bl	b4ff8 <HAL_USB_USART_Receive_Data>
}
   b5742:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5746:	bd08      	pop	{r3, pc}

000b5748 <_ZN9USBSerial17availableForWriteEv>:
{
   b5748:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b574a:	7c00      	ldrb	r0, [r0, #16]
   b574c:	f7ff fc4c 	bl	b4fe8 <HAL_USB_USART_Available_Data_For_Write>
}
   b5750:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5754:	bd08      	pop	{r3, pc}

000b5756 <_ZN9USBSerial9availableEv>:
{
   b5756:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5758:	7c00      	ldrb	r0, [r0, #16]
   b575a:	f7ff fc3d 	bl	b4fd8 <HAL_USB_USART_Available_Data>
}
   b575e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5762:	bd08      	pop	{r3, pc}

000b5764 <_ZN9USBSerial5writeEh>:
{
   b5764:	b513      	push	{r0, r1, r4, lr}
   b5766:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5768:	7c00      	ldrb	r0, [r0, #16]
{
   b576a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b576c:	f7ff fc3c 	bl	b4fe8 <HAL_USB_USART_Available_Data_For_Write>
   b5770:	2800      	cmp	r0, #0
   b5772:	9901      	ldr	r1, [sp, #4]
   b5774:	dc01      	bgt.n	b577a <_ZN9USBSerial5writeEh+0x16>
   b5776:	7c60      	ldrb	r0, [r4, #17]
   b5778:	b120      	cbz	r0, b5784 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b577a:	7c20      	ldrb	r0, [r4, #16]
   b577c:	f7ff fc44 	bl	b5008 <HAL_USB_USART_Send_Data>
   b5780:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5784:	b002      	add	sp, #8
   b5786:	bd10      	pop	{r4, pc}

000b5788 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5788:	7c00      	ldrb	r0, [r0, #16]
   b578a:	f7ff bc45 	b.w	b5018 <HAL_USB_USART_Flush_Data>

000b578e <_ZN9USBSerialD0Ev>:
   b578e:	b510      	push	{r4, lr}
   b5790:	2114      	movs	r1, #20
   b5792:	4604      	mov	r4, r0
   b5794:	f7fe fc81 	bl	b409a <_ZdlPvj>
   b5798:	4620      	mov	r0, r4
   b579a:	bd10      	pop	{r4, pc}

000b579c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b579c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b579e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57a2:	4604      	mov	r4, r0
   b57a4:	4608      	mov	r0, r1
   b57a6:	2100      	movs	r1, #0
   b57a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b57ac:	4b04      	ldr	r3, [pc, #16]	; (b57c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b57ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b57b0:	2301      	movs	r3, #1
  _serial = serial;
   b57b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b57b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b57b6:	4611      	mov	r1, r2
   b57b8:	f7ff fc06 	bl	b4fc8 <HAL_USB_USART_Init>
}
   b57bc:	4620      	mov	r0, r4
   b57be:	bd10      	pop	{r4, pc}
   b57c0:	000b6b90 	.word	0x000b6b90

000b57c4 <_Z19acquireSerialBufferv>:
{
   b57c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b57c6:	2214      	movs	r2, #20
{
   b57c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b57ca:	2100      	movs	r1, #0
   b57cc:	f000 fed4 	bl	b6578 <memset>
}
   b57d0:	4620      	mov	r0, r4
   b57d2:	bd10      	pop	{r4, pc}

000b57d4 <_Z16_fetch_usbserialv>:
{
   b57d4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57d6:	4c0f      	ldr	r4, [pc, #60]	; (b5814 <_Z16_fetch_usbserialv+0x40>)
{
   b57d8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b57da:	a803      	add	r0, sp, #12
   b57dc:	f7ff fff2 	bl	b57c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57e0:	7821      	ldrb	r1, [r4, #0]
   b57e2:	f3bf 8f5b 	dmb	ish
   b57e6:	f011 0101 	ands.w	r1, r1, #1
   b57ea:	d10f      	bne.n	b580c <_Z16_fetch_usbserialv+0x38>
   b57ec:	4620      	mov	r0, r4
   b57ee:	9101      	str	r1, [sp, #4]
   b57f0:	f7fe fc60 	bl	b40b4 <__cxa_guard_acquire>
   b57f4:	9901      	ldr	r1, [sp, #4]
   b57f6:	b148      	cbz	r0, b580c <_Z16_fetch_usbserialv+0x38>
   b57f8:	aa03      	add	r2, sp, #12
   b57fa:	4807      	ldr	r0, [pc, #28]	; (b5818 <_Z16_fetch_usbserialv+0x44>)
   b57fc:	f7ff ffce 	bl	b579c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5800:	4620      	mov	r0, r4
   b5802:	f7fe fc5c 	bl	b40be <__cxa_guard_release>
   b5806:	4805      	ldr	r0, [pc, #20]	; (b581c <_Z16_fetch_usbserialv+0x48>)
   b5808:	f000 fe74 	bl	b64f4 <atexit>
	return _usbserial;
}
   b580c:	4802      	ldr	r0, [pc, #8]	; (b5818 <_Z16_fetch_usbserialv+0x44>)
   b580e:	b008      	add	sp, #32
   b5810:	bd10      	pop	{r4, pc}
   b5812:	bf00      	nop
   b5814:	2003e6ec 	.word	0x2003e6ec
   b5818:	2003e6f0 	.word	0x2003e6f0
   b581c:	000b5725 	.word	0x000b5725

000b5820 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5820:	4770      	bx	lr

000b5822 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5822:	7441      	strb	r1, [r0, #17]
}
   b5824:	4770      	bx	lr

000b5826 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5826:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5828:	7c00      	ldrb	r0, [r0, #16]
   b582a:	f7ff fb45 	bl	b4eb8 <hal_usart_available_data_for_write>
}
   b582e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5832:	bd08      	pop	{r3, pc}

000b5834 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5834:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5836:	7c00      	ldrb	r0, [r0, #16]
   b5838:	f7ff fb16 	bl	b4e68 <hal_usart_available>
}
   b583c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5840:	bd08      	pop	{r3, pc}

000b5842 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5842:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5844:	7c00      	ldrb	r0, [r0, #16]
   b5846:	f7ff fb1f 	bl	b4e88 <hal_usart_peek>
}
   b584a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b584e:	bd08      	pop	{r3, pc}

000b5850 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5850:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5852:	7c00      	ldrb	r0, [r0, #16]
   b5854:	f7ff fb10 	bl	b4e78 <hal_usart_read>
}
   b5858:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b585c:	bd08      	pop	{r3, pc}

000b585e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b585e:	7c00      	ldrb	r0, [r0, #16]
   b5860:	f7ff bb1a 	b.w	b4e98 <hal_usart_flush>

000b5864 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5864:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5866:	7c45      	ldrb	r5, [r0, #17]
{
   b5868:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b586a:	b12d      	cbz	r5, b5878 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b586c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b586e:	b003      	add	sp, #12
   b5870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5874:	f7ff baf0 	b.w	b4e58 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5878:	7c00      	ldrb	r0, [r0, #16]
   b587a:	9101      	str	r1, [sp, #4]
   b587c:	f7ff fb1c 	bl	b4eb8 <hal_usart_available_data_for_write>
   b5880:	2800      	cmp	r0, #0
   b5882:	9901      	ldr	r1, [sp, #4]
   b5884:	dcf2      	bgt.n	b586c <_ZN11USARTSerial5writeEh+0x8>
}
   b5886:	4628      	mov	r0, r5
   b5888:	b003      	add	sp, #12
   b588a:	bd30      	pop	{r4, r5, pc}

000b588c <_ZN11USARTSerialD0Ev>:
   b588c:	b510      	push	{r4, lr}
   b588e:	2114      	movs	r1, #20
   b5890:	4604      	mov	r4, r0
   b5892:	f7fe fc02 	bl	b409a <_ZdlPvj>
   b5896:	4620      	mov	r0, r4
   b5898:	bd10      	pop	{r4, pc}
	...

000b589c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b589c:	b510      	push	{r4, lr}
   b589e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58a2:	4604      	mov	r4, r0
   b58a4:	4608      	mov	r0, r1
   b58a6:	4611      	mov	r1, r2
   b58a8:	2200      	movs	r2, #0
   b58aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b58ae:	4b04      	ldr	r3, [pc, #16]	; (b58c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b58b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b58b2:	2301      	movs	r3, #1
  _serial = serial;
   b58b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b58b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b58b8:	f7ff fb06 	bl	b4ec8 <hal_usart_init_ex>
}
   b58bc:	4620      	mov	r0, r4
   b58be:	bd10      	pop	{r4, pc}
   b58c0:	000b6bc0 	.word	0x000b6bc0

000b58c4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b58c4:	4770      	bx	lr

000b58c6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b58c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b58c8:	4606      	mov	r6, r0
   b58ca:	4615      	mov	r5, r2
   b58cc:	460c      	mov	r4, r1
   b58ce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b58d0:	42bc      	cmp	r4, r7
   b58d2:	d006      	beq.n	b58e2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b58d4:	6833      	ldr	r3, [r6, #0]
   b58d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b58da:	689b      	ldr	r3, [r3, #8]
   b58dc:	4630      	mov	r0, r6
   b58de:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b58e0:	e7f6      	b.n	b58d0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b58e2:	4628      	mov	r0, r5
   b58e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58e6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b58e6:	7c00      	ldrb	r0, [r0, #16]
   b58e8:	2200      	movs	r2, #0
   b58ea:	f7ff baf5 	b.w	b4ed8 <hal_i2c_write>

000b58ee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b58ee:	7c00      	ldrb	r0, [r0, #16]
   b58f0:	2100      	movs	r1, #0
   b58f2:	f7ff baf9 	b.w	b4ee8 <hal_i2c_available>

000b58f6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b58f6:	7c00      	ldrb	r0, [r0, #16]
   b58f8:	2100      	movs	r1, #0
   b58fa:	f7ff bafd 	b.w	b4ef8 <hal_i2c_read>

000b58fe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b58fe:	7c00      	ldrb	r0, [r0, #16]
   b5900:	2100      	movs	r1, #0
   b5902:	f7ff bb01 	b.w	b4f08 <hal_i2c_peek>

000b5906 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5906:	7c00      	ldrb	r0, [r0, #16]
   b5908:	2100      	movs	r1, #0
   b590a:	f7ff bb05 	b.w	b4f18 <hal_i2c_flush>

000b590e <_ZN7TwoWireD0Ev>:
   b590e:	b510      	push	{r4, lr}
   b5910:	2114      	movs	r1, #20
   b5912:	4604      	mov	r4, r0
   b5914:	f7fe fbc1 	bl	b409a <_ZdlPvj>
   b5918:	4620      	mov	r0, r4
   b591a:	bd10      	pop	{r4, pc}

000b591c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b591c:	b510      	push	{r4, lr}
   b591e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5922:	4604      	mov	r4, r0
   b5924:	4608      	mov	r0, r1
   b5926:	2100      	movs	r1, #0
   b5928:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b592c:	4b03      	ldr	r3, [pc, #12]	; (b593c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b592e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5930:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5932:	4611      	mov	r1, r2
   b5934:	f7ff fb00 	bl	b4f38 <hal_i2c_init>
}
   b5938:	4620      	mov	r0, r4
   b593a:	bd10      	pop	{r4, pc}
   b593c:	000b6bf0 	.word	0x000b6bf0

000b5940 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5940:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5942:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5944:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5948:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b594a:	2201      	movs	r2, #1
   b594c:	f04f 33ff 	mov.w	r3, #4294967295
   b5950:	f10d 0107 	add.w	r1, sp, #7
   b5954:	47a0      	blx	r4
}
   b5956:	b002      	add	sp, #8
   b5958:	bd10      	pop	{r4, pc}

000b595a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b595a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b595c:	6803      	ldr	r3, [r0, #0]
   b595e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5960:	f04f 33ff 	mov.w	r3, #4294967295
   b5964:	46a4      	mov	ip, r4
}
   b5966:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b596a:	4760      	bx	ip

000b596c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b596c:	b513      	push	{r0, r1, r4, lr}
   b596e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5970:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5972:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5976:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5978:	f10d 0107 	add.w	r1, sp, #7
   b597c:	2201      	movs	r2, #1
   b597e:	47a0      	blx	r4
}
   b5980:	b002      	add	sp, #8
   b5982:	bd10      	pop	{r4, pc}

000b5984 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5984:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5986:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5988:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b598c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5990:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5992:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5994:	d008      	beq.n	b59a8 <_ZN9TCPClient4readEv+0x24>
   b5996:	6963      	ldr	r3, [r4, #20]
   b5998:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b599c:	1c51      	adds	r1, r2, #1
   b599e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b59a2:	4413      	add	r3, r2
   b59a4:	7918      	ldrb	r0, [r3, #4]
}
   b59a6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b59a8:	6803      	ldr	r3, [r0, #0]
   b59aa:	691b      	ldr	r3, [r3, #16]
   b59ac:	4798      	blx	r3
   b59ae:	2800      	cmp	r0, #0
   b59b0:	d1f1      	bne.n	b5996 <_ZN9TCPClient4readEv+0x12>
   b59b2:	f04f 30ff 	mov.w	r0, #4294967295
   b59b6:	e7f6      	b.n	b59a6 <_ZN9TCPClient4readEv+0x22>

000b59b8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b59b8:	4770      	bx	lr

000b59ba <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b59ba:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b59bc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b59be:	43c0      	mvns	r0, r0
   b59c0:	0fc0      	lsrs	r0, r0, #31
   b59c2:	4770      	bx	lr

000b59c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b59c4:	4770      	bx	lr
	...

000b59c8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b59c8:	4b06      	ldr	r3, [pc, #24]	; (b59e4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b59ca:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b59cc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b59ce:	f100 040c 	add.w	r4, r0, #12
	    ||
   b59d2:	d005      	beq.n	b59e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b59d4:	4608      	mov	r0, r1
   b59d6:	f000 fc7b 	bl	b62d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b59da:	2800      	cmp	r0, #0
   b59dc:	bf08      	it	eq
   b59de:	2400      	moveq	r4, #0
      }
   b59e0:	4620      	mov	r0, r4
   b59e2:	bd10      	pop	{r4, pc}
   b59e4:	000b6b4c 	.word	0x000b6b4c

000b59e8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b59e8:	b510      	push	{r4, lr}
   b59ea:	21ac      	movs	r1, #172	; 0xac
   b59ec:	4604      	mov	r4, r0
   b59ee:	f7fe fb54 	bl	b409a <_ZdlPvj>
   b59f2:	4620      	mov	r0, r4
   b59f4:	bd10      	pop	{r4, pc}

000b59f6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b59f6:	21ac      	movs	r1, #172	; 0xac
   b59f8:	f7fe bb4f 	b.w	b409a <_ZdlPvj>

000b59fc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b59fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5a00:	f04f 0800 	mov.w	r8, #0
   b5a04:	b086      	sub	sp, #24
   b5a06:	461c      	mov	r4, r3
   b5a08:	f8c0 8004 	str.w	r8, [r0, #4]
   b5a0c:	4605      	mov	r5, r0
   b5a0e:	460e      	mov	r6, r1
   b5a10:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5a12:	4641      	mov	r1, r8
   b5a14:	2210      	movs	r2, #16
   b5a16:	a802      	add	r0, sp, #8
   b5a18:	f000 fdae 	bl	b6578 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5a1c:	1c63      	adds	r3, r4, #1
   b5a1e:	d009      	beq.n	b5a34 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a24:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5a28:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5a2c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5a30:	435c      	muls	r4, r3
   b5a32:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5a34:	6968      	ldr	r0, [r5, #20]
   b5a36:	2310      	movs	r3, #16
   b5a38:	9300      	str	r3, [sp, #0]
   b5a3a:	6800      	ldr	r0, [r0, #0]
   b5a3c:	ab02      	add	r3, sp, #8
   b5a3e:	f241 0205 	movw	r2, #4101	; 0x1005
   b5a42:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5a46:	f7ff fa7f 	bl	b4f48 <sock_setsockopt>
    if (ret < 0) {
   b5a4a:	2800      	cmp	r0, #0
   b5a4c:	da07      	bge.n	b5a5e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5a4e:	f7ff fb9f 	bl	b5190 <__errno>
   b5a52:	6803      	ldr	r3, [r0, #0]
   b5a54:	606b      	str	r3, [r5, #4]
        return 0;
   b5a56:	2000      	movs	r0, #0
}
   b5a58:	b006      	add	sp, #24
   b5a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5a5e:	6968      	ldr	r0, [r5, #20]
   b5a60:	2300      	movs	r3, #0
   b5a62:	6800      	ldr	r0, [r0, #0]
   b5a64:	463a      	mov	r2, r7
   b5a66:	4631      	mov	r1, r6
   b5a68:	f7ff fa8e 	bl	b4f88 <sock_send>
    if (ret < 0) {
   b5a6c:	1e03      	subs	r3, r0, #0
   b5a6e:	dbee      	blt.n	b5a4e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5a70:	4618      	mov	r0, r3
   b5a72:	e7f1      	b.n	b5a58 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5a74 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5a74:	b530      	push	{r4, r5, lr}
   b5a76:	b087      	sub	sp, #28
   b5a78:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5a7a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5a7c:	4668      	mov	r0, sp
   b5a7e:	f7ff fe3f 	bl	b5700 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a84:	3404      	adds	r4, #4
   b5a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a88:	682b      	ldr	r3, [r5, #0]
   b5a8a:	7023      	strb	r3, [r4, #0]
    }
   b5a8c:	b007      	add	sp, #28
   b5a8e:	bd30      	pop	{r4, r5, pc}

000b5a90 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5a90:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5a92:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5a94:	4b05      	ldr	r3, [pc, #20]	; (b5aac <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5a96:	4604      	mov	r4, r0
   b5a98:	358c      	adds	r5, #140	; 0x8c
   b5a9a:	f844 3b04 	str.w	r3, [r4], #4
   b5a9e:	4606      	mov	r6, r0
   b5aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5aa4:	682b      	ldr	r3, [r5, #0]
   b5aa6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5aa8:	4630      	mov	r0, r6
   b5aaa:	bd70      	pop	{r4, r5, r6, pc}
   b5aac:	000b6b7c 	.word	0x000b6b7c

000b5ab0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5ab4:	4698      	mov	r8, r3
    stop();
   b5ab6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5ab8:	b093      	sub	sp, #76	; 0x4c
   b5aba:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5abc:	2400      	movs	r4, #0
    stop();
   b5abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5ac0:	4606      	mov	r6, r0
   b5ac2:	4617      	mov	r7, r2
    stop();
   b5ac4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5ac6:	4628      	mov	r0, r5
   b5ac8:	466b      	mov	r3, sp
   b5aca:	4622      	mov	r2, r4
   b5acc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5ace:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5ad0:	f7ff f93a 	bl	b4d48 <netdb_getaddrinfo>
   b5ad4:	4605      	mov	r5, r0
   b5ad6:	2800      	cmp	r0, #0
   b5ad8:	d163      	bne.n	b5ba2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5ada:	9b00      	ldr	r3, [sp, #0]
   b5adc:	2b00      	cmp	r3, #0
   b5ade:	d04b      	beq.n	b5b78 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5ae0:	695b      	ldr	r3, [r3, #20]
   b5ae2:	2b00      	cmp	r3, #0
   b5ae4:	d048      	beq.n	b5b78 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5ae6:	a806      	add	r0, sp, #24
   b5ae8:	f7ff fdc6 	bl	b5678 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5aec:	9b00      	ldr	r3, [sp, #0]
   b5aee:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5af0:	7863      	ldrb	r3, [r4, #1]
   b5af2:	2b02      	cmp	r3, #2
   b5af4:	d104      	bne.n	b5b00 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5af6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5af8:	a806      	add	r0, sp, #24
   b5afa:	f7ff ffbb 	bl	b5a74 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5afe:	e026      	b.n	b5b4e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5b00:	2b0a      	cmp	r3, #10
   b5b02:	d124      	bne.n	b5b4e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5b04:	2211      	movs	r2, #17
   b5b06:	4629      	mov	r1, r5
   b5b08:	a801      	add	r0, sp, #4
   b5b0a:	f000 fd35 	bl	b6578 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5b0e:	68a3      	ldr	r3, [r4, #8]
   b5b10:	2b00      	cmp	r3, #0
   b5b12:	d038      	beq.n	b5b86 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b14:	f104 0308 	add.w	r3, r4, #8
   b5b18:	f10d 0c04 	add.w	ip, sp, #4
   b5b1c:	3418      	adds	r4, #24
   b5b1e:	6818      	ldr	r0, [r3, #0]
   b5b20:	6859      	ldr	r1, [r3, #4]
   b5b22:	4662      	mov	r2, ip
   b5b24:	c203      	stmia	r2!, {r0, r1}
   b5b26:	3308      	adds	r3, #8
   b5b28:	42a3      	cmp	r3, r4
   b5b2a:	4694      	mov	ip, r2
   b5b2c:	d1f7      	bne.n	b5b1e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5b2e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5b30:	a901      	add	r1, sp, #4
   b5b32:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5b34:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5b38:	f7ff fdac 	bl	b5694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5b3c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5b40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5b44:	ac07      	add	r4, sp, #28
   b5b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b48:	f8dc 3000 	ldr.w	r3, [ip]
   b5b4c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5b4e:	a806      	add	r0, sp, #24
   b5b50:	f7ff fdb2 	bl	b56b8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5b54:	b180      	cbz	r0, b5b78 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5b56:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5b58:	ad07      	add	r5, sp, #28
   b5b5a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5b5e:	4b12      	ldr	r3, [pc, #72]	; (b5ba8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5b60:	930c      	str	r3, [sp, #48]	; 0x30
   b5b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b64:	ac0d      	add	r4, sp, #52	; 0x34
   b5b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b68:	682b      	ldr	r3, [r5, #0]
   b5b6a:	7023      	strb	r3, [r4, #0]
   b5b6c:	463a      	mov	r2, r7
   b5b6e:	4643      	mov	r3, r8
   b5b70:	a90c      	add	r1, sp, #48	; 0x30
   b5b72:	4630      	mov	r0, r6
   b5b74:	47c8      	blx	r9
   b5b76:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5b78:	9800      	ldr	r0, [sp, #0]
   b5b7a:	f7ff f8dd 	bl	b4d38 <netdb_freeaddrinfo>
}
   b5b7e:	4628      	mov	r0, r5
   b5b80:	b013      	add	sp, #76	; 0x4c
   b5b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5b86:	68e3      	ldr	r3, [r4, #12]
   b5b88:	2b00      	cmp	r3, #0
   b5b8a:	d1c3      	bne.n	b5b14 <_ZN9TCPClient7connectEPKctm+0x64>
   b5b8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5b90:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5b94:	f7ff f950 	bl	b4e38 <inet_htonl>
   b5b98:	4581      	cmp	r9, r0
   b5b9a:	d1bb      	bne.n	b5b14 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5b9c:	f104 0114 	add.w	r1, r4, #20
   b5ba0:	e7aa      	b.n	b5af8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5ba2:	4625      	mov	r5, r4
   b5ba4:	e7e8      	b.n	b5b78 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5ba6:	bf00      	nop
   b5ba8:	000b6b7c 	.word	0x000b6b7c

000b5bac <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5bac:	b538      	push	{r3, r4, r5, lr}
   b5bae:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5bb0:	681a      	ldr	r2, [r3, #0]
   b5bb2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5bb4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5bb6:	da10      	bge.n	b5bda <_ZN9TCPClient9connectedEv+0x2e>
   b5bb8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5bbc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5bc0:	429a      	cmp	r2, r3
   b5bc2:	d10a      	bne.n	b5bda <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5bc4:	6803      	ldr	r3, [r0, #0]
   b5bc6:	691b      	ldr	r3, [r3, #16]
   b5bc8:	4798      	blx	r3
        if (!rv) {
   b5bca:	4604      	mov	r4, r0
   b5bcc:	b928      	cbnz	r0, b5bda <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5bce:	682b      	ldr	r3, [r5, #0]
   b5bd0:	4628      	mov	r0, r5
   b5bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5bd4:	4798      	blx	r3
        rv = available();
   b5bd6:	4620      	mov	r0, r4
}
   b5bd8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5bda:	2001      	movs	r0, #1
   b5bdc:	e7fc      	b.n	b5bd8 <_ZN9TCPClient9connectedEv+0x2c>

000b5bde <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5bde:	b510      	push	{r4, lr}
   b5be0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5be2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5be6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5bea:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5bec:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5bee:	d005      	beq.n	b5bfc <_ZN9TCPClient4peekEv+0x1e>
   b5bf0:	6963      	ldr	r3, [r4, #20]
   b5bf2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5bf6:	4413      	add	r3, r2
   b5bf8:	7918      	ldrb	r0, [r3, #4]
}
   b5bfa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5bfc:	6803      	ldr	r3, [r0, #0]
   b5bfe:	691b      	ldr	r3, [r3, #16]
   b5c00:	4798      	blx	r3
   b5c02:	2800      	cmp	r0, #0
   b5c04:	d1f4      	bne.n	b5bf0 <_ZN9TCPClient4peekEv+0x12>
   b5c06:	f04f 30ff 	mov.w	r0, #4294967295
   b5c0a:	e7f6      	b.n	b5bfa <_ZN9TCPClient4peekEv+0x1c>

000b5c0c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c0e:	6943      	ldr	r3, [r0, #20]
   b5c10:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5c12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c16:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5c1a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5c1c:	4605      	mov	r5, r0
   b5c1e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5c20:	d016      	beq.n	b5c50 <_ZN9TCPClient4readEPhj+0x44>
   b5c22:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5c24:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5c28:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5c2c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5c2e:	42bc      	cmp	r4, r7
   b5c30:	bf28      	it	cs
   b5c32:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5c34:	3304      	adds	r3, #4
   b5c36:	4622      	mov	r2, r4
   b5c38:	4419      	add	r1, r3
   b5c3a:	4630      	mov	r0, r6
   b5c3c:	f000 fc74 	bl	b6528 <memcpy>
   b5c40:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5c42:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5c46:	4423      	add	r3, r4
   b5c48:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5c4c:	4620      	mov	r0, r4
   b5c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5c50:	6803      	ldr	r3, [r0, #0]
   b5c52:	691b      	ldr	r3, [r3, #16]
   b5c54:	4798      	blx	r3
   b5c56:	2800      	cmp	r0, #0
   b5c58:	d1e3      	bne.n	b5c22 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5c5a:	f04f 34ff 	mov.w	r4, #4294967295
   b5c5e:	e7f5      	b.n	b5c4c <_ZN9TCPClient4readEPhj+0x40>

000b5c60 <_ZN9TCPClient12flush_bufferEv>:
   b5c60:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5c62:	2300      	movs	r3, #0
   b5c64:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5c68:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5c6a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5c6e:	4770      	bx	lr

000b5c70 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c74:	461f      	mov	r7, r3
    stop();
   b5c76:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5c78:	460c      	mov	r4, r1
    stop();
   b5c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5c7c:	b08a      	sub	sp, #40	; 0x28
   b5c7e:	4605      	mov	r5, r0
   b5c80:	4616      	mov	r6, r2
    stop();
   b5c82:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5c84:	7d23      	ldrb	r3, [r4, #20]
   b5c86:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5c8a:	2b04      	cmp	r3, #4
   b5c8c:	bf0c      	ite	eq
   b5c8e:	2002      	moveq	r0, #2
   b5c90:	200a      	movne	r0, #10
   b5c92:	2206      	movs	r2, #6
   b5c94:	2101      	movs	r1, #1
   b5c96:	f7ff f97f 	bl	b4f98 <sock_socket>
   b5c9a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5c9e:	696b      	ldr	r3, [r5, #20]
   b5ca0:	681b      	ldr	r3, [r3, #0]
   b5ca2:	2b00      	cmp	r3, #0
   b5ca4:	da08      	bge.n	b5cb8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5ca6:	682b      	ldr	r3, [r5, #0]
   b5ca8:	4628      	mov	r0, r5
   b5caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5cac:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5cae:	4798      	blx	r3
}
   b5cb0:	4620      	mov	r0, r4
   b5cb2:	b00a      	add	sp, #40	; 0x28
   b5cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5cb8:	4628      	mov	r0, r5
   b5cba:	f7ff ffd1 	bl	b5c60 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5cbe:	b1b7      	cbz	r7, b5cee <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5cc0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5cc2:	a903      	add	r1, sp, #12
   b5cc4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5cc6:	9303      	str	r3, [sp, #12]
   b5cc8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5ccc:	f7ff f86c 	bl	b4da8 <if_index_to_name>
   b5cd0:	2800      	cmp	r0, #0
   b5cd2:	d1e8      	bne.n	b5ca6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5cd4:	6968      	ldr	r0, [r5, #20]
   b5cd6:	2306      	movs	r3, #6
   b5cd8:	9300      	str	r3, [sp, #0]
   b5cda:	6800      	ldr	r0, [r0, #0]
   b5cdc:	ab03      	add	r3, sp, #12
   b5cde:	f241 020b 	movw	r2, #4107	; 0x100b
   b5ce2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5ce6:	f7ff f92f 	bl	b4f48 <sock_setsockopt>
   b5cea:	2800      	cmp	r0, #0
   b5cec:	d1db      	bne.n	b5ca6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5cee:	221c      	movs	r2, #28
   b5cf0:	2100      	movs	r1, #0
   b5cf2:	a803      	add	r0, sp, #12
   b5cf4:	f000 fc40 	bl	b6578 <memset>
    if (ip.version() == 4) {
   b5cf8:	7d23      	ldrb	r3, [r4, #20]
   b5cfa:	2b04      	cmp	r3, #4
   b5cfc:	d11d      	bne.n	b5d3a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5cfe:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5d02:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5d04:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5d08:	f7ff f89e 	bl	b4e48 <inet_htons>
   b5d0c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5d10:	6860      	ldr	r0, [r4, #4]
   b5d12:	f7ff f891 	bl	b4e38 <inet_htonl>
   b5d16:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5d18:	696b      	ldr	r3, [r5, #20]
   b5d1a:	221c      	movs	r2, #28
   b5d1c:	6818      	ldr	r0, [r3, #0]
   b5d1e:	a903      	add	r1, sp, #12
   b5d20:	f7ff f922 	bl	b4f68 <sock_connect>
   b5d24:	2800      	cmp	r0, #0
   b5d26:	d1be      	bne.n	b5ca6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5d28:	3404      	adds	r4, #4
   b5d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5d2c:	696d      	ldr	r5, [r5, #20]
   b5d2e:	358c      	adds	r5, #140	; 0x8c
   b5d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5d32:	6823      	ldr	r3, [r4, #0]
   b5d34:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5d36:	2401      	movs	r4, #1
   b5d38:	e7ba      	b.n	b5cb0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5d3a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5d3e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5d40:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5d44:	f7ff f880 	bl	b4e48 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5d48:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5d4a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5d4e:	1d23      	adds	r3, r4, #4
   b5d50:	f104 0714 	add.w	r7, r4, #20
   b5d54:	6818      	ldr	r0, [r3, #0]
   b5d56:	6859      	ldr	r1, [r3, #4]
   b5d58:	4632      	mov	r2, r6
   b5d5a:	c203      	stmia	r2!, {r0, r1}
   b5d5c:	3308      	adds	r3, #8
   b5d5e:	42bb      	cmp	r3, r7
   b5d60:	4616      	mov	r6, r2
   b5d62:	d1f7      	bne.n	b5d54 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5d64:	e7d8      	b.n	b5d18 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5d68 <_ZN9TCPClient9availableEv>:
{
   b5d68:	b530      	push	{r4, r5, lr}
   b5d6a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5d6c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5d70:	b08b      	sub	sp, #44	; 0x2c
   b5d72:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5d74:	b12b      	cbz	r3, b5d82 <_ZN9TCPClient9availableEv+0x1a>
   b5d76:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5d7a:	429a      	cmp	r2, r3
   b5d7c:	d101      	bne.n	b5d82 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5d7e:	f7ff ff6f 	bl	b5c60 <_ZN9TCPClient12flush_bufferEv>
   b5d82:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5d84:	6808      	ldr	r0, [r1, #0]
   b5d86:	2800      	cmp	r0, #0
   b5d88:	db18      	blt.n	b5dbc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5d8a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5d8e:	2d7f      	cmp	r5, #127	; 0x7f
   b5d90:	d814      	bhi.n	b5dbc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5d92:	3104      	adds	r1, #4
   b5d94:	2308      	movs	r3, #8
   b5d96:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5d9a:	4429      	add	r1, r5
   b5d9c:	f7ff f8ec 	bl	b4f78 <sock_recv>
            if (ret > 0) {
   b5da0:	2800      	cmp	r0, #0
   b5da2:	dd13      	ble.n	b5dcc <_ZN9TCPClient9availableEv+0x64>
   b5da4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5da6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5daa:	b90a      	cbnz	r2, b5db0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5dac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5db0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5db2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5db6:	4410      	add	r0, r2
   b5db8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5dbc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5dbe:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5dc2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5dc6:	1ac0      	subs	r0, r0, r3
   b5dc8:	b00b      	add	sp, #44	; 0x2c
   b5dca:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5dcc:	f7ff f9e0 	bl	b5190 <__errno>
   b5dd0:	6803      	ldr	r3, [r0, #0]
   b5dd2:	2b0b      	cmp	r3, #11
   b5dd4:	d0f2      	beq.n	b5dbc <_ZN9TCPClient9availableEv+0x54>
   b5dd6:	f7ff f9db 	bl	b5190 <__errno>
   b5dda:	6803      	ldr	r3, [r0, #0]
   b5ddc:	2b0b      	cmp	r3, #11
   b5dde:	d0ed      	beq.n	b5dbc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5de0:	2320      	movs	r3, #32
   b5de2:	2500      	movs	r5, #0
   b5de4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5de8:	f7ff f9d2 	bl	b5190 <__errno>
   b5dec:	6803      	ldr	r3, [r0, #0]
   b5dee:	9301      	str	r3, [sp, #4]
   b5df0:	4b08      	ldr	r3, [pc, #32]	; (b5e14 <_ZN9TCPClient9availableEv+0xac>)
   b5df2:	4909      	ldr	r1, [pc, #36]	; (b5e18 <_ZN9TCPClient9availableEv+0xb0>)
   b5df4:	9300      	str	r3, [sp, #0]
   b5df6:	aa02      	add	r2, sp, #8
   b5df8:	462b      	mov	r3, r5
   b5dfa:	2032      	movs	r0, #50	; 0x32
   b5dfc:	f7ff f91c 	bl	b5038 <log_message>
                    sock_close(d_->sock);
   b5e00:	6963      	ldr	r3, [r4, #20]
   b5e02:	6818      	ldr	r0, [r3, #0]
   b5e04:	f7ff f8a8 	bl	b4f58 <sock_close>
   b5e08:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5e0a:	f04f 32ff 	mov.w	r2, #4294967295
   b5e0e:	601a      	str	r2, [r3, #0]
   b5e10:	e7d4      	b.n	b5dbc <_ZN9TCPClient9availableEv+0x54>
   b5e12:	bf00      	nop
   b5e14:	000b6c17 	.word	0x000b6c17
   b5e18:	000b6c10 	.word	0x000b6c10

000b5e1c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5e1c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5e1e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5e20:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5e22:	6818      	ldr	r0, [r3, #0]
   b5e24:	2800      	cmp	r0, #0
   b5e26:	db01      	blt.n	b5e2c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5e28:	f7ff f896 	bl	b4f58 <sock_close>
   b5e2c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5e2e:	f04f 32ff 	mov.w	r2, #4294967295
   b5e32:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5e34:	6960      	ldr	r0, [r4, #20]
   b5e36:	2211      	movs	r2, #17
   b5e38:	2100      	movs	r1, #0
   b5e3a:	308c      	adds	r0, #140	; 0x8c
   b5e3c:	f000 fb9c 	bl	b6578 <memset>
    flush_buffer();
   b5e40:	4620      	mov	r0, r4
}
   b5e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5e46:	f7ff bf0b 	b.w	b5c60 <_ZN9TCPClient12flush_bufferEv>

000b5e4a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5e4a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5e4c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5e4e:	4604      	mov	r4, r0
          total(0) {
   b5e50:	6001      	str	r1, [r0, #0]
   b5e52:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5e56:	3088      	adds	r0, #136	; 0x88
   b5e58:	f7ff fc0e 	bl	b5678 <_ZN9IPAddressC1Ev>
}
   b5e5c:	4620      	mov	r0, r4
   b5e5e:	bd10      	pop	{r4, pc}

000b5e60 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e62:	2300      	movs	r3, #0
   b5e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5e68:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5e6c:	4a0e      	ldr	r2, [pc, #56]	; (b5ea8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5e6e:	6103      	str	r3, [r0, #16]
   b5e70:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5e72:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5e74:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5e76:	20ac      	movs	r0, #172	; 0xac
   b5e78:	9101      	str	r1, [sp, #4]
   b5e7a:	f7fe f90a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5e7e:	1e05      	subs	r5, r0, #0
   b5e80:	f105 060c 	add.w	r6, r5, #12
   b5e84:	d008      	beq.n	b5e98 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5e86:	2301      	movs	r3, #1
   b5e88:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5e8c:	4b07      	ldr	r3, [pc, #28]	; (b5eac <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5e8e:	9901      	ldr	r1, [sp, #4]
   b5e90:	602b      	str	r3, [r5, #0]
   b5e92:	4630      	mov	r0, r6
   b5e94:	f7ff ffd9 	bl	b5e4a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5e98:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5e9a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5e9e:	f7ff fedf 	bl	b5c60 <_ZN9TCPClient12flush_bufferEv>
}
   b5ea2:	b002      	add	sp, #8
   b5ea4:	bd70      	pop	{r4, r5, r6, pc}
   b5ea6:	bf00      	nop
   b5ea8:	000b6c4c 	.word	0x000b6c4c
   b5eac:	000b6c30 	.word	0x000b6c30

000b5eb0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5eb0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5eb2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b5eb6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5eb8:	f7ff ffd2 	bl	b5e60 <_ZN9TCPClientC1Ei>
}
   b5ebc:	4620      	mov	r0, r4
   b5ebe:	bd10      	pop	{r4, pc}

000b5ec0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5ec0:	b510      	push	{r4, lr}
   b5ec2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5ec4:	6800      	ldr	r0, [r0, #0]
   b5ec6:	2800      	cmp	r0, #0
   b5ec8:	db01      	blt.n	b5ece <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5eca:	f7ff f845 	bl	b4f58 <sock_close>
    }
}
   b5ece:	4620      	mov	r0, r4
   b5ed0:	bd10      	pop	{r4, pc}

000b5ed2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5ed2:	300c      	adds	r0, #12
   b5ed4:	f7ff bff4 	b.w	b5ec0 <_ZN9TCPClient4DataD1Ev>

000b5ed8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5ed8:	2200      	movs	r2, #0
   b5eda:	6840      	ldr	r0, [r0, #4]
   b5edc:	4611      	mov	r1, r2
   b5ede:	f7ff b8ef 	b.w	b50c0 <network_ready>

000b5ee2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5ee2:	2200      	movs	r2, #0
   b5ee4:	6840      	ldr	r0, [r0, #4]
   b5ee6:	4611      	mov	r1, r2
   b5ee8:	f7ff b90a 	b.w	b5100 <network_listening>

000b5eec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5eec:	2200      	movs	r2, #0
   b5eee:	6840      	ldr	r0, [r0, #4]
   b5ef0:	4611      	mov	r1, r2
   b5ef2:	f7ff b915 	b.w	b5120 <network_get_listen_timeout>

000b5ef6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5ef6:	6840      	ldr	r0, [r0, #4]
   b5ef8:	2200      	movs	r2, #0
   b5efa:	f7ff b909 	b.w	b5110 <network_set_listen_timeout>

000b5efe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5efe:	6840      	ldr	r0, [r0, #4]
   b5f00:	2200      	movs	r2, #0
   b5f02:	f081 0101 	eor.w	r1, r1, #1
   b5f06:	f7ff b8f3 	b.w	b50f0 <network_listen>

000b5f0a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5f0a:	2300      	movs	r3, #0
   b5f0c:	6840      	ldr	r0, [r0, #4]
   b5f0e:	461a      	mov	r2, r3
   b5f10:	4619      	mov	r1, r3
   b5f12:	f7ff b8e5 	b.w	b50e0 <network_off>

000b5f16 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5f16:	2200      	movs	r2, #0
   b5f18:	6840      	ldr	r0, [r0, #4]
   b5f1a:	4611      	mov	r1, r2
   b5f1c:	f7ff b8c0 	b.w	b50a0 <network_connecting>

000b5f20 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5f20:	6840      	ldr	r0, [r0, #4]
   b5f22:	2200      	movs	r2, #0
   b5f24:	2102      	movs	r1, #2
   b5f26:	f7ff b8c3 	b.w	b50b0 <network_disconnect>

000b5f2a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5f2a:	2300      	movs	r3, #0
   b5f2c:	6840      	ldr	r0, [r0, #4]
   b5f2e:	461a      	mov	r2, r3
   b5f30:	f7ff b8ae 	b.w	b5090 <network_connect>

000b5f34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5f34:	4b02      	ldr	r3, [pc, #8]	; (b5f40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5f36:	2204      	movs	r2, #4
   b5f38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5f3a:	4a02      	ldr	r2, [pc, #8]	; (b5f44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5f3c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5f3e:	4770      	bx	lr
   b5f40:	2003e704 	.word	0x2003e704
   b5f44:	000b6c98 	.word	0x000b6c98

000b5f48 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5f48:	2300      	movs	r3, #0
   b5f4a:	6840      	ldr	r0, [r0, #4]
   b5f4c:	461a      	mov	r2, r3
   b5f4e:	f7ff b89f 	b.w	b5090 <network_connect>

000b5f52 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5f52:	6840      	ldr	r0, [r0, #4]
   b5f54:	2200      	movs	r2, #0
   b5f56:	2102      	movs	r1, #2
   b5f58:	f7ff b8aa 	b.w	b50b0 <network_disconnect>

000b5f5c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5f5c:	2200      	movs	r2, #0
   b5f5e:	6840      	ldr	r0, [r0, #4]
   b5f60:	4611      	mov	r1, r2
   b5f62:	f7ff b89d 	b.w	b50a0 <network_connecting>

000b5f66 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5f66:	2200      	movs	r2, #0
   b5f68:	6840      	ldr	r0, [r0, #4]
   b5f6a:	4611      	mov	r1, r2
   b5f6c:	f7ff b8a8 	b.w	b50c0 <network_ready>

000b5f70 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5f70:	2300      	movs	r3, #0
   b5f72:	6840      	ldr	r0, [r0, #4]
   b5f74:	461a      	mov	r2, r3
   b5f76:	4619      	mov	r1, r3
   b5f78:	f7ff b8aa 	b.w	b50d0 <network_on>

000b5f7c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5f7c:	2300      	movs	r3, #0
   b5f7e:	6840      	ldr	r0, [r0, #4]
   b5f80:	461a      	mov	r2, r3
   b5f82:	4619      	mov	r1, r3
   b5f84:	f7ff b8ac 	b.w	b50e0 <network_off>

000b5f88 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5f88:	6840      	ldr	r0, [r0, #4]
   b5f8a:	2100      	movs	r1, #0
   b5f8c:	f7ff b8d0 	b.w	b5130 <network_is_on>

000b5f90 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5f90:	6840      	ldr	r0, [r0, #4]
   b5f92:	2100      	movs	r1, #0
   b5f94:	f7ff b8d4 	b.w	b5140 <network_is_off>

000b5f98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5f98:	6840      	ldr	r0, [r0, #4]
   b5f9a:	2200      	movs	r2, #0
   b5f9c:	f081 0101 	eor.w	r1, r1, #1
   b5fa0:	f7ff b8a6 	b.w	b50f0 <network_listen>

000b5fa4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5fa4:	6840      	ldr	r0, [r0, #4]
   b5fa6:	2200      	movs	r2, #0
   b5fa8:	f7ff b8b2 	b.w	b5110 <network_set_listen_timeout>

000b5fac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5fac:	2200      	movs	r2, #0
   b5fae:	6840      	ldr	r0, [r0, #4]
   b5fb0:	4611      	mov	r1, r2
   b5fb2:	f7ff b8b5 	b.w	b5120 <network_get_listen_timeout>

000b5fb6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5fb6:	2200      	movs	r2, #0
   b5fb8:	6840      	ldr	r0, [r0, #4]
   b5fba:	4611      	mov	r1, r2
   b5fbc:	f7ff b8a0 	b.w	b5100 <network_listening>

000b5fc0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5fc4:	b095      	sub	sp, #84	; 0x54
   b5fc6:	4614      	mov	r4, r2
   b5fc8:	460d      	mov	r5, r1
   b5fca:	4607      	mov	r7, r0
    IPAddress addr;
   b5fcc:	f7ff fb54 	bl	b5678 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5fd0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5fd2:	221c      	movs	r2, #28
   b5fd4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5fd6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5fd8:	f000 face 	bl	b6578 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5fdc:	2340      	movs	r3, #64	; 0x40
   b5fde:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	466b      	mov	r3, sp
   b5fe4:	aa0c      	add	r2, sp, #48	; 0x30
   b5fe6:	2100      	movs	r1, #0
   b5fe8:	f7fe feae 	bl	b4d48 <netdb_getaddrinfo>
    if (!r) {
   b5fec:	4604      	mov	r4, r0
   b5fee:	2800      	cmp	r0, #0
   b5ff0:	d14b      	bne.n	b608a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5ff2:	4602      	mov	r2, r0
   b5ff4:	2101      	movs	r1, #1
   b5ff6:	6868      	ldr	r0, [r5, #4]
   b5ff8:	f7ff f862 	bl	b50c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ffc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5ffe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6000:	4622      	mov	r2, r4
   b6002:	6868      	ldr	r0, [r5, #4]
   b6004:	f7ff f85c 	bl	b50c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6008:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b600a:	4681      	mov	r9, r0
        bool ok = false;
   b600c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b600e:	2e00      	cmp	r6, #0
   b6010:	d03b      	beq.n	b608a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6012:	2900      	cmp	r1, #0
   b6014:	d139      	bne.n	b608a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6016:	6873      	ldr	r3, [r6, #4]
   b6018:	2b02      	cmp	r3, #2
   b601a:	d003      	beq.n	b6024 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b601c:	2b0a      	cmp	r3, #10
   b601e:	d011      	beq.n	b6044 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6020:	69f6      	ldr	r6, [r6, #28]
   b6022:	e7f4      	b.n	b600e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6024:	f1b8 0f00 	cmp.w	r8, #0
   b6028:	d0fa      	beq.n	b6020 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b602a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b602c:	a806      	add	r0, sp, #24
   b602e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6030:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6032:	f7ff fb65 	bl	b5700 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6038:	1d3c      	adds	r4, r7, #4
   b603a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b603c:	682b      	ldr	r3, [r5, #0]
   b603e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6040:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6042:	e7ed      	b.n	b6020 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6044:	f1b9 0f00 	cmp.w	r9, #0
   b6048:	d0ea      	beq.n	b6020 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b604a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b604c:	2210      	movs	r2, #16
   b604e:	a801      	add	r0, sp, #4
   b6050:	f000 fa92 	bl	b6578 <memset>
                    a.v = 6;
   b6054:	2306      	movs	r3, #6
   b6056:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b605a:	ad01      	add	r5, sp, #4
   b605c:	f104 0308 	add.w	r3, r4, #8
   b6060:	3418      	adds	r4, #24
   b6062:	6818      	ldr	r0, [r3, #0]
   b6064:	6859      	ldr	r1, [r3, #4]
   b6066:	462a      	mov	r2, r5
   b6068:	c203      	stmia	r2!, {r0, r1}
   b606a:	3308      	adds	r3, #8
   b606c:	42a3      	cmp	r3, r4
   b606e:	4615      	mov	r5, r2
   b6070:	d1f7      	bne.n	b6062 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6072:	a901      	add	r1, sp, #4
   b6074:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6076:	ad07      	add	r5, sp, #28
   b6078:	f7ff fb0c 	bl	b5694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b607c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b607e:	1d3c      	adds	r4, r7, #4
   b6080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6082:	682b      	ldr	r3, [r5, #0]
   b6084:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6086:	4649      	mov	r1, r9
   b6088:	e7ca      	b.n	b6020 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b608a:	9800      	ldr	r0, [sp, #0]
   b608c:	f7fe fe54 	bl	b4d38 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6090:	4638      	mov	r0, r7
   b6092:	b015      	add	sp, #84	; 0x54
   b6094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6098 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6098:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b609a:	4a03      	ldr	r2, [pc, #12]	; (b60a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b609c:	601a      	str	r2, [r3, #0]
   b609e:	2200      	movs	r2, #0
   b60a0:	605a      	str	r2, [r3, #4]

} // spark
   b60a2:	4770      	bx	lr
   b60a4:	2003e70c 	.word	0x2003e70c
   b60a8:	000b6cd4 	.word	0x000b6cd4

000b60ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b60ac:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b60ae:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b60b0:	d902      	bls.n	b60b8 <pinAvailable+0xc>
    return false;
   b60b2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b60b4:	b002      	add	sp, #8
   b60b6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b60b8:	f1a0 030b 	sub.w	r3, r0, #11
   b60bc:	2b02      	cmp	r3, #2
   b60be:	d81a      	bhi.n	b60f6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b60c0:	4c17      	ldr	r4, [pc, #92]	; (b6120 <pinAvailable+0x74>)
   b60c2:	7821      	ldrb	r1, [r4, #0]
   b60c4:	f3bf 8f5b 	dmb	ish
   b60c8:	f011 0101 	ands.w	r1, r1, #1
   b60cc:	d10b      	bne.n	b60e6 <pinAvailable+0x3a>
   b60ce:	4620      	mov	r0, r4
   b60d0:	9101      	str	r1, [sp, #4]
   b60d2:	f7fd ffef 	bl	b40b4 <__cxa_guard_acquire>
   b60d6:	9901      	ldr	r1, [sp, #4]
   b60d8:	b128      	cbz	r0, b60e6 <pinAvailable+0x3a>
   b60da:	4812      	ldr	r0, [pc, #72]	; (b6124 <pinAvailable+0x78>)
   b60dc:	f7ff f8ae 	bl	b523c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b60e0:	4620      	mov	r0, r4
   b60e2:	f7fd ffec 	bl	b40be <__cxa_guard_release>
   b60e6:	4b0f      	ldr	r3, [pc, #60]	; (b6124 <pinAvailable+0x78>)
   b60e8:	7818      	ldrb	r0, [r3, #0]
   b60ea:	f7fe ff65 	bl	b4fb8 <hal_spi_is_enabled>
   b60ee:	2800      	cmp	r0, #0
   b60f0:	d1df      	bne.n	b60b2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b60f2:	2001      	movs	r0, #1
   b60f4:	e7de      	b.n	b60b4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b60f6:	2801      	cmp	r0, #1
   b60f8:	d809      	bhi.n	b610e <pinAvailable+0x62>
   b60fa:	f000 f8c3 	bl	b6284 <_Z19__fetch_global_Wirev>
   b60fe:	2100      	movs	r1, #0
   b6100:	7c00      	ldrb	r0, [r0, #16]
   b6102:	f7fe ff11 	bl	b4f28 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6106:	f080 0001 	eor.w	r0, r0, #1
   b610a:	b2c0      	uxtb	r0, r0
   b610c:	e7d2      	b.n	b60b4 <pinAvailable+0x8>
   b610e:	3809      	subs	r0, #9
   b6110:	2801      	cmp	r0, #1
   b6112:	d8ee      	bhi.n	b60f2 <pinAvailable+0x46>
   b6114:	f000 f864 	bl	b61e0 <_Z22__fetch_global_Serial1v>
   b6118:	7c00      	ldrb	r0, [r0, #16]
   b611a:	f7fe fec5 	bl	b4ea8 <hal_usart_is_enabled>
   b611e:	e7f2      	b.n	b6106 <pinAvailable+0x5a>
   b6120:	2003e714 	.word	0x2003e714
   b6124:	2003e718 	.word	0x2003e718

000b6128 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6128:	2823      	cmp	r0, #35	; 0x23
{
   b612a:	b538      	push	{r3, r4, r5, lr}
   b612c:	4604      	mov	r4, r0
   b612e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6130:	d80a      	bhi.n	b6148 <pinMode+0x20>
   b6132:	29ff      	cmp	r1, #255	; 0xff
   b6134:	d008      	beq.n	b6148 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6136:	f7ff ffb9 	bl	b60ac <pinAvailable>
   b613a:	b128      	cbz	r0, b6148 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b613c:	4629      	mov	r1, r5
   b613e:	4620      	mov	r0, r4
}
   b6140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6144:	f7fe be10 	b.w	b4d68 <HAL_Pin_Mode>
}
   b6148:	bd38      	pop	{r3, r4, r5, pc}

000b614a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b614a:	b538      	push	{r3, r4, r5, lr}
   b614c:	4604      	mov	r4, r0
   b614e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6150:	f7fe fe12 	bl	b4d78 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6154:	28ff      	cmp	r0, #255	; 0xff
   b6156:	d010      	beq.n	b617a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6158:	2806      	cmp	r0, #6
   b615a:	d804      	bhi.n	b6166 <digitalWrite+0x1c>
   b615c:	234d      	movs	r3, #77	; 0x4d
   b615e:	fa23 f000 	lsr.w	r0, r3, r0
   b6162:	07c3      	lsls	r3, r0, #31
   b6164:	d409      	bmi.n	b617a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6166:	4620      	mov	r0, r4
   b6168:	f7ff ffa0 	bl	b60ac <pinAvailable>
   b616c:	b128      	cbz	r0, b617a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b616e:	4629      	mov	r1, r5
   b6170:	4620      	mov	r0, r4
}
   b6172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6176:	f7fe be07 	b.w	b4d88 <HAL_GPIO_Write>
}
   b617a:	bd38      	pop	{r3, r4, r5, pc}

000b617c <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b617c:	280d      	cmp	r0, #13
{
   b617e:	b510      	push	{r4, lr}
   b6180:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6182:	bf9c      	itt	ls
   b6184:	340e      	addls	r4, #14
   b6186:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6188:	4620      	mov	r0, r4
   b618a:	f7ff ff8f 	bl	b60ac <pinAvailable>
   b618e:	b150      	cbz	r0, b61a6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6190:	2103      	movs	r1, #3
   b6192:	4620      	mov	r0, r4
   b6194:	f7fe fde0 	bl	b4d58 <HAL_Validate_Pin_Function>
   b6198:	2803      	cmp	r0, #3
   b619a:	d104      	bne.n	b61a6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b619c:	4620      	mov	r0, r4
}
   b619e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b61a2:	f7fe bdf9 	b.w	b4d98 <hal_adc_read>
}
   b61a6:	2000      	movs	r0, #0
   b61a8:	bd10      	pop	{r4, pc}

000b61aa <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b61aa:	4770      	bx	lr

000b61ac <_Z20acquireSerial1Bufferv>:
{
   b61ac:	b538      	push	{r3, r4, r5, lr}
   b61ae:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b61b0:	2514      	movs	r5, #20
   b61b2:	462a      	mov	r2, r5
   b61b4:	2100      	movs	r1, #0
   b61b6:	f000 f9df 	bl	b6578 <memset>
   b61ba:	8025      	strh	r5, [r4, #0]
   b61bc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61be:	4907      	ldr	r1, [pc, #28]	; (b61dc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b61c0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61c2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b61c4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61c6:	f000 f881 	bl	b62cc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61ca:	4904      	ldr	r1, [pc, #16]	; (b61dc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b61cc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61ce:	4628      	mov	r0, r5
   b61d0:	f000 f87c 	bl	b62cc <_ZnajRKSt9nothrow_t>
    };
   b61d4:	60e0      	str	r0, [r4, #12]
}
   b61d6:	4620      	mov	r0, r4
   b61d8:	bd38      	pop	{r3, r4, r5, pc}
   b61da:	bf00      	nop
   b61dc:	000b6d08 	.word	0x000b6d08

000b61e0 <_Z22__fetch_global_Serial1v>:
{
   b61e0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b61e2:	4d0e      	ldr	r5, [pc, #56]	; (b621c <_Z22__fetch_global_Serial1v+0x3c>)
   b61e4:	7829      	ldrb	r1, [r5, #0]
   b61e6:	f3bf 8f5b 	dmb	ish
   b61ea:	f011 0401 	ands.w	r4, r1, #1
{
   b61ee:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b61f0:	d111      	bne.n	b6216 <_Z22__fetch_global_Serial1v+0x36>
   b61f2:	4628      	mov	r0, r5
   b61f4:	f7fd ff5e 	bl	b40b4 <__cxa_guard_acquire>
   b61f8:	b168      	cbz	r0, b6216 <_Z22__fetch_global_Serial1v+0x36>
   b61fa:	a801      	add	r0, sp, #4
   b61fc:	f7ff ffd6 	bl	b61ac <_Z20acquireSerial1Bufferv>
   b6200:	aa01      	add	r2, sp, #4
   b6202:	4621      	mov	r1, r4
   b6204:	4806      	ldr	r0, [pc, #24]	; (b6220 <_Z22__fetch_global_Serial1v+0x40>)
   b6206:	f7ff fb49 	bl	b589c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b620a:	4628      	mov	r0, r5
   b620c:	f7fd ff57 	bl	b40be <__cxa_guard_release>
   b6210:	4804      	ldr	r0, [pc, #16]	; (b6224 <_Z22__fetch_global_Serial1v+0x44>)
   b6212:	f000 f96f 	bl	b64f4 <atexit>
    return serial1;
}
   b6216:	4802      	ldr	r0, [pc, #8]	; (b6220 <_Z22__fetch_global_Serial1v+0x40>)
   b6218:	b007      	add	sp, #28
   b621a:	bd30      	pop	{r4, r5, pc}
   b621c:	2003e720 	.word	0x2003e720
   b6220:	2003e724 	.word	0x2003e724
   b6224:	000b61ab 	.word	0x000b61ab

000b6228 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b6228:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b622a:	4c08      	ldr	r4, [pc, #32]	; (b624c <_Z21__fetch_global_EEPROMv+0x24>)
   b622c:	7823      	ldrb	r3, [r4, #0]
   b622e:	f3bf 8f5b 	dmb	ish
   b6232:	07db      	lsls	r3, r3, #31
   b6234:	d408      	bmi.n	b6248 <_Z21__fetch_global_EEPROMv+0x20>
   b6236:	4620      	mov	r0, r4
   b6238:	f7fd ff3c 	bl	b40b4 <__cxa_guard_acquire>
   b623c:	b120      	cbz	r0, b6248 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b623e:	f7fe fdd3 	bl	b4de8 <HAL_EEPROM_Init>
   b6242:	4620      	mov	r0, r4
   b6244:	f7fd ff3b 	bl	b40be <__cxa_guard_release>
	return eeprom;
}
   b6248:	4801      	ldr	r0, [pc, #4]	; (b6250 <_Z21__fetch_global_EEPROMv+0x28>)
   b624a:	bd10      	pop	{r4, pc}
   b624c:	2003e73c 	.word	0x2003e73c
   b6250:	2003e740 	.word	0x2003e740

000b6254 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6254:	4770      	bx	lr
	...

000b6258 <_Z17acquireWireBufferv>:
{
   b6258:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b625a:	2520      	movs	r5, #32
   b625c:	2314      	movs	r3, #20
{
   b625e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6260:	6003      	str	r3, [r0, #0]
   b6262:	6085      	str	r5, [r0, #8]
   b6264:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6266:	4906      	ldr	r1, [pc, #24]	; (b6280 <_Z17acquireWireBufferv+0x28>)
   b6268:	4628      	mov	r0, r5
   b626a:	f000 f82f 	bl	b62cc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b626e:	4904      	ldr	r1, [pc, #16]	; (b6280 <_Z17acquireWireBufferv+0x28>)
	};
   b6270:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6272:	4628      	mov	r0, r5
   b6274:	f000 f82a 	bl	b62cc <_ZnajRKSt9nothrow_t>
	};
   b6278:	60e0      	str	r0, [r4, #12]
}
   b627a:	4620      	mov	r0, r4
   b627c:	bd38      	pop	{r3, r4, r5, pc}
   b627e:	bf00      	nop
   b6280:	000b6d08 	.word	0x000b6d08

000b6284 <_Z19__fetch_global_Wirev>:
{
   b6284:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6286:	4d0e      	ldr	r5, [pc, #56]	; (b62c0 <_Z19__fetch_global_Wirev+0x3c>)
   b6288:	7829      	ldrb	r1, [r5, #0]
   b628a:	f3bf 8f5b 	dmb	ish
   b628e:	f011 0401 	ands.w	r4, r1, #1
{
   b6292:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6294:	d111      	bne.n	b62ba <_Z19__fetch_global_Wirev+0x36>
   b6296:	4628      	mov	r0, r5
   b6298:	f7fd ff0c 	bl	b40b4 <__cxa_guard_acquire>
   b629c:	b168      	cbz	r0, b62ba <_Z19__fetch_global_Wirev+0x36>
   b629e:	a801      	add	r0, sp, #4
   b62a0:	f7ff ffda 	bl	b6258 <_Z17acquireWireBufferv>
   b62a4:	aa01      	add	r2, sp, #4
   b62a6:	4621      	mov	r1, r4
   b62a8:	4806      	ldr	r0, [pc, #24]	; (b62c4 <_Z19__fetch_global_Wirev+0x40>)
   b62aa:	f7ff fb37 	bl	b591c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b62ae:	4628      	mov	r0, r5
   b62b0:	f7fd ff05 	bl	b40be <__cxa_guard_release>
   b62b4:	4804      	ldr	r0, [pc, #16]	; (b62c8 <_Z19__fetch_global_Wirev+0x44>)
   b62b6:	f000 f91d 	bl	b64f4 <atexit>
	return wire;
}
   b62ba:	4802      	ldr	r0, [pc, #8]	; (b62c4 <_Z19__fetch_global_Wirev+0x40>)
   b62bc:	b007      	add	sp, #28
   b62be:	bd30      	pop	{r4, r5, pc}
   b62c0:	2003e744 	.word	0x2003e744
   b62c4:	2003e748 	.word	0x2003e748
   b62c8:	000b6255 	.word	0x000b6255

000b62cc <_ZnajRKSt9nothrow_t>:
   b62cc:	f7fd bee3 	b.w	b4096 <_Znaj>

000b62d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b62d0:	4901      	ldr	r1, [pc, #4]	; (b62d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b62d2:	f000 b8f9 	b.w	b64c8 <_ZNKSt9type_infoeqERKS_>
   b62d6:	bf00      	nop
   b62d8:	000b6d24 	.word	0x000b6d24

000b62dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b62dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b62de:	2400      	movs	r4, #0
   b62e0:	2310      	movs	r3, #16
   b62e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b62e6:	6803      	ldr	r3, [r0, #0]
   b62e8:	4615      	mov	r5, r2
   b62ea:	699e      	ldr	r6, [r3, #24]
   b62ec:	6812      	ldr	r2, [r2, #0]
   b62ee:	466b      	mov	r3, sp
   b62f0:	e9cd 4400 	strd	r4, r4, [sp]
   b62f4:	47b0      	blx	r6
   b62f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b62fa:	f003 0306 	and.w	r3, r3, #6
   b62fe:	2b06      	cmp	r3, #6
   b6300:	bf03      	ittte	eq
   b6302:	9b00      	ldreq	r3, [sp, #0]
   b6304:	602b      	streq	r3, [r5, #0]
   b6306:	2001      	moveq	r0, #1
   b6308:	4620      	movne	r0, r4
   b630a:	b004      	add	sp, #16
   b630c:	bd70      	pop	{r4, r5, r6, pc}

000b630e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b630e:	9800      	ldr	r0, [sp, #0]
   b6310:	4290      	cmp	r0, r2
   b6312:	bf14      	ite	ne
   b6314:	2001      	movne	r0, #1
   b6316:	2006      	moveq	r0, #6
   b6318:	4770      	bx	lr
	...

000b631c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b631c:	b510      	push	{r4, lr}
   b631e:	4b03      	ldr	r3, [pc, #12]	; (b632c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6320:	6003      	str	r3, [r0, #0]
   b6322:	4604      	mov	r4, r0
   b6324:	f000 f8cd 	bl	b64c2 <_ZNSt9type_infoD1Ev>
   b6328:	4620      	mov	r0, r4
   b632a:	bd10      	pop	{r4, pc}
   b632c:	000b6d64 	.word	0x000b6d64

000b6330 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6330:	b510      	push	{r4, lr}
   b6332:	4604      	mov	r4, r0
   b6334:	f7ff fff2 	bl	b631c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6338:	4620      	mov	r0, r4
   b633a:	2108      	movs	r1, #8
   b633c:	f7fd fead 	bl	b409a <_ZdlPvj>
   b6340:	4620      	mov	r0, r4
   b6342:	bd10      	pop	{r4, pc}

000b6344 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6348:	461f      	mov	r7, r3
   b634a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b634e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6352:	4598      	cmp	r8, r3
   b6354:	4606      	mov	r6, r0
   b6356:	4615      	mov	r5, r2
   b6358:	d107      	bne.n	b636a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b635a:	9907      	ldr	r1, [sp, #28]
   b635c:	f000 f8b4 	bl	b64c8 <_ZNKSt9type_infoeqERKS_>
   b6360:	b118      	cbz	r0, b636a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6362:	7165      	strb	r5, [r4, #5]
   b6364:	2000      	movs	r0, #0
   b6366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b636a:	4639      	mov	r1, r7
   b636c:	4630      	mov	r0, r6
   b636e:	f000 f8ab 	bl	b64c8 <_ZNKSt9type_infoeqERKS_>
   b6372:	2800      	cmp	r0, #0
   b6374:	d0f6      	beq.n	b6364 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6376:	2301      	movs	r3, #1
   b6378:	f8c4 8000 	str.w	r8, [r4]
   b637c:	7125      	strb	r5, [r4, #4]
   b637e:	71a3      	strb	r3, [r4, #6]
   b6380:	e7f0      	b.n	b6364 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6382 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6382:	b538      	push	{r3, r4, r5, lr}
   b6384:	4615      	mov	r5, r2
   b6386:	461c      	mov	r4, r3
   b6388:	f000 f89e 	bl	b64c8 <_ZNKSt9type_infoeqERKS_>
   b638c:	b120      	cbz	r0, b6398 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b638e:	2308      	movs	r3, #8
   b6390:	60e3      	str	r3, [r4, #12]
   b6392:	2306      	movs	r3, #6
   b6394:	6025      	str	r5, [r4, #0]
   b6396:	7123      	strb	r3, [r4, #4]
   b6398:	bd38      	pop	{r3, r4, r5, pc}

000b639a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b639a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b639c:	4605      	mov	r5, r0
   b639e:	460c      	mov	r4, r1
   b63a0:	9201      	str	r2, [sp, #4]
   b63a2:	461e      	mov	r6, r3
   b63a4:	f000 f890 	bl	b64c8 <_ZNKSt9type_infoeqERKS_>
   b63a8:	b950      	cbnz	r0, b63c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b63aa:	2e03      	cmp	r6, #3
   b63ac:	d808      	bhi.n	b63c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b63ae:	6823      	ldr	r3, [r4, #0]
   b63b0:	9a01      	ldr	r2, [sp, #4]
   b63b2:	695b      	ldr	r3, [r3, #20]
   b63b4:	4629      	mov	r1, r5
   b63b6:	4620      	mov	r0, r4
   b63b8:	b002      	add	sp, #8
   b63ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b63be:	4718      	bx	r3
   b63c0:	b002      	add	sp, #8
   b63c2:	bd70      	pop	{r4, r5, r6, pc}

000b63c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b63c4:	b510      	push	{r4, lr}
   b63c6:	4b03      	ldr	r3, [pc, #12]	; (b63d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b63c8:	6003      	str	r3, [r0, #0]
   b63ca:	4604      	mov	r4, r0
   b63cc:	f7ff ffa6 	bl	b631c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b63d0:	4620      	mov	r0, r4
   b63d2:	bd10      	pop	{r4, pc}
   b63d4:	000b6dc4 	.word	0x000b6dc4

000b63d8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b63d8:	b510      	push	{r4, lr}
   b63da:	4604      	mov	r4, r0
   b63dc:	f7ff fff2 	bl	b63c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b63e0:	4620      	mov	r0, r4
   b63e2:	210c      	movs	r1, #12
   b63e4:	f7fd fe59 	bl	b409a <_ZdlPvj>
   b63e8:	4620      	mov	r0, r4
   b63ea:	bd10      	pop	{r4, pc}

000b63ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b63ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b63ee:	9f08      	ldr	r7, [sp, #32]
   b63f0:	4297      	cmp	r7, r2
   b63f2:	4605      	mov	r5, r0
   b63f4:	460e      	mov	r6, r1
   b63f6:	4614      	mov	r4, r2
   b63f8:	d00a      	beq.n	b6410 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b63fa:	68a8      	ldr	r0, [r5, #8]
   b63fc:	6802      	ldr	r2, [r0, #0]
   b63fe:	9708      	str	r7, [sp, #32]
   b6400:	6a15      	ldr	r5, [r2, #32]
   b6402:	4631      	mov	r1, r6
   b6404:	4622      	mov	r2, r4
   b6406:	46ac      	mov	ip, r5
   b6408:	b003      	add	sp, #12
   b640a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b640e:	4760      	bx	ip
   b6410:	4619      	mov	r1, r3
   b6412:	9301      	str	r3, [sp, #4]
   b6414:	f000 f858 	bl	b64c8 <_ZNKSt9type_infoeqERKS_>
   b6418:	9b01      	ldr	r3, [sp, #4]
   b641a:	2800      	cmp	r0, #0
   b641c:	d0ed      	beq.n	b63fa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b641e:	2006      	movs	r0, #6
   b6420:	b003      	add	sp, #12
   b6422:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6424 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6424:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6428:	460d      	mov	r5, r1
   b642a:	4619      	mov	r1, r3
   b642c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6430:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6434:	4681      	mov	r9, r0
   b6436:	4617      	mov	r7, r2
   b6438:	4698      	mov	r8, r3
   b643a:	f000 f845 	bl	b64c8 <_ZNKSt9type_infoeqERKS_>
   b643e:	b190      	cbz	r0, b6466 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6440:	2d00      	cmp	r5, #0
   b6442:	6034      	str	r4, [r6, #0]
   b6444:	7137      	strb	r7, [r6, #4]
   b6446:	db09      	blt.n	b645c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6448:	1961      	adds	r1, r4, r5
   b644a:	458a      	cmp	sl, r1
   b644c:	bf0c      	ite	eq
   b644e:	2106      	moveq	r1, #6
   b6450:	2101      	movne	r1, #1
   b6452:	71b1      	strb	r1, [r6, #6]
   b6454:	2000      	movs	r0, #0
   b6456:	b001      	add	sp, #4
   b6458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b645c:	3502      	adds	r5, #2
   b645e:	d1f9      	bne.n	b6454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6460:	2301      	movs	r3, #1
   b6462:	71b3      	strb	r3, [r6, #6]
   b6464:	e7f6      	b.n	b6454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6466:	4554      	cmp	r4, sl
   b6468:	d106      	bne.n	b6478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b646a:	4659      	mov	r1, fp
   b646c:	4648      	mov	r0, r9
   b646e:	f000 f82b 	bl	b64c8 <_ZNKSt9type_infoeqERKS_>
   b6472:	b108      	cbz	r0, b6478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6474:	7177      	strb	r7, [r6, #5]
   b6476:	e7ed      	b.n	b6454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6478:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b647c:	6803      	ldr	r3, [r0, #0]
   b647e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6482:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6486:	69dc      	ldr	r4, [r3, #28]
   b6488:	463a      	mov	r2, r7
   b648a:	4643      	mov	r3, r8
   b648c:	4629      	mov	r1, r5
   b648e:	46a4      	mov	ip, r4
   b6490:	b001      	add	sp, #4
   b6492:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6496:	4760      	bx	ip

000b6498 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b649c:	4607      	mov	r7, r0
   b649e:	460c      	mov	r4, r1
   b64a0:	4615      	mov	r5, r2
   b64a2:	461e      	mov	r6, r3
   b64a4:	f7ff ff6d 	bl	b6382 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b64a8:	b948      	cbnz	r0, b64be <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b64aa:	68b8      	ldr	r0, [r7, #8]
   b64ac:	6803      	ldr	r3, [r0, #0]
   b64ae:	699f      	ldr	r7, [r3, #24]
   b64b0:	462a      	mov	r2, r5
   b64b2:	4633      	mov	r3, r6
   b64b4:	4621      	mov	r1, r4
   b64b6:	46bc      	mov	ip, r7
   b64b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b64bc:	4760      	bx	ip
   b64be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b64c2 <_ZNSt9type_infoD1Ev>:
   b64c2:	4770      	bx	lr

000b64c4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b64c4:	2000      	movs	r0, #0
   b64c6:	4770      	bx	lr

000b64c8 <_ZNKSt9type_infoeqERKS_>:
   b64c8:	4281      	cmp	r1, r0
   b64ca:	b508      	push	{r3, lr}
   b64cc:	d00e      	beq.n	b64ec <_ZNKSt9type_infoeqERKS_+0x24>
   b64ce:	6840      	ldr	r0, [r0, #4]
   b64d0:	7803      	ldrb	r3, [r0, #0]
   b64d2:	2b2a      	cmp	r3, #42	; 0x2a
   b64d4:	d00c      	beq.n	b64f0 <_ZNKSt9type_infoeqERKS_+0x28>
   b64d6:	6849      	ldr	r1, [r1, #4]
   b64d8:	780b      	ldrb	r3, [r1, #0]
   b64da:	2b2a      	cmp	r3, #42	; 0x2a
   b64dc:	bf08      	it	eq
   b64de:	3101      	addeq	r1, #1
   b64e0:	f000 f880 	bl	b65e4 <strcmp>
   b64e4:	fab0 f080 	clz	r0, r0
   b64e8:	0940      	lsrs	r0, r0, #5
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	2001      	movs	r0, #1
   b64ee:	e7fc      	b.n	b64ea <_ZNKSt9type_infoeqERKS_+0x22>
   b64f0:	2000      	movs	r0, #0
   b64f2:	e7fa      	b.n	b64ea <_ZNKSt9type_infoeqERKS_+0x22>

000b64f4 <atexit>:
   b64f4:	2300      	movs	r3, #0
   b64f6:	4601      	mov	r1, r0
   b64f8:	461a      	mov	r2, r3
   b64fa:	4618      	mov	r0, r3
   b64fc:	f000 b8a0 	b.w	b6640 <__register_exitproc>

000b6500 <ldiv>:
   b6500:	2900      	cmp	r1, #0
   b6502:	b510      	push	{r4, lr}
   b6504:	fb91 f4f2 	sdiv	r4, r1, r2
   b6508:	fb02 1314 	mls	r3, r2, r4, r1
   b650c:	db06      	blt.n	b651c <ldiv+0x1c>
   b650e:	2b00      	cmp	r3, #0
   b6510:	da01      	bge.n	b6516 <ldiv+0x16>
   b6512:	3401      	adds	r4, #1
   b6514:	1a9b      	subs	r3, r3, r2
   b6516:	e9c0 4300 	strd	r4, r3, [r0]
   b651a:	bd10      	pop	{r4, pc}
   b651c:	2b00      	cmp	r3, #0
   b651e:	bfc4      	itt	gt
   b6520:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b6524:	189b      	addgt	r3, r3, r2
   b6526:	e7f6      	b.n	b6516 <ldiv+0x16>

000b6528 <memcpy>:
   b6528:	440a      	add	r2, r1
   b652a:	4291      	cmp	r1, r2
   b652c:	f100 33ff 	add.w	r3, r0, #4294967295
   b6530:	d100      	bne.n	b6534 <memcpy+0xc>
   b6532:	4770      	bx	lr
   b6534:	b510      	push	{r4, lr}
   b6536:	f811 4b01 	ldrb.w	r4, [r1], #1
   b653a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b653e:	4291      	cmp	r1, r2
   b6540:	d1f9      	bne.n	b6536 <memcpy+0xe>
   b6542:	bd10      	pop	{r4, pc}

000b6544 <memmove>:
   b6544:	4288      	cmp	r0, r1
   b6546:	b510      	push	{r4, lr}
   b6548:	eb01 0402 	add.w	r4, r1, r2
   b654c:	d902      	bls.n	b6554 <memmove+0x10>
   b654e:	4284      	cmp	r4, r0
   b6550:	4623      	mov	r3, r4
   b6552:	d807      	bhi.n	b6564 <memmove+0x20>
   b6554:	1e43      	subs	r3, r0, #1
   b6556:	42a1      	cmp	r1, r4
   b6558:	d008      	beq.n	b656c <memmove+0x28>
   b655a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b655e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6562:	e7f8      	b.n	b6556 <memmove+0x12>
   b6564:	4402      	add	r2, r0
   b6566:	4601      	mov	r1, r0
   b6568:	428a      	cmp	r2, r1
   b656a:	d100      	bne.n	b656e <memmove+0x2a>
   b656c:	bd10      	pop	{r4, pc}
   b656e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6572:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6576:	e7f7      	b.n	b6568 <memmove+0x24>

000b6578 <memset>:
   b6578:	4402      	add	r2, r0
   b657a:	4603      	mov	r3, r0
   b657c:	4293      	cmp	r3, r2
   b657e:	d100      	bne.n	b6582 <memset+0xa>
   b6580:	4770      	bx	lr
   b6582:	f803 1b01 	strb.w	r1, [r3], #1
   b6586:	e7f9      	b.n	b657c <memset+0x4>

000b6588 <srand>:
   b6588:	b538      	push	{r3, r4, r5, lr}
   b658a:	4b10      	ldr	r3, [pc, #64]	; (b65cc <srand+0x44>)
   b658c:	681d      	ldr	r5, [r3, #0]
   b658e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6590:	4604      	mov	r4, r0
   b6592:	b9b3      	cbnz	r3, b65c2 <srand+0x3a>
   b6594:	2018      	movs	r0, #24
   b6596:	f7fe fde3 	bl	b5160 <malloc>
   b659a:	4602      	mov	r2, r0
   b659c:	63a8      	str	r0, [r5, #56]	; 0x38
   b659e:	b920      	cbnz	r0, b65aa <srand+0x22>
   b65a0:	4b0b      	ldr	r3, [pc, #44]	; (b65d0 <srand+0x48>)
   b65a2:	480c      	ldr	r0, [pc, #48]	; (b65d4 <srand+0x4c>)
   b65a4:	2142      	movs	r1, #66	; 0x42
   b65a6:	f7fe fdfb 	bl	b51a0 <__assert_func>
   b65aa:	490b      	ldr	r1, [pc, #44]	; (b65d8 <srand+0x50>)
   b65ac:	4b0b      	ldr	r3, [pc, #44]	; (b65dc <srand+0x54>)
   b65ae:	e9c0 1300 	strd	r1, r3, [r0]
   b65b2:	4b0b      	ldr	r3, [pc, #44]	; (b65e0 <srand+0x58>)
   b65b4:	6083      	str	r3, [r0, #8]
   b65b6:	230b      	movs	r3, #11
   b65b8:	8183      	strh	r3, [r0, #12]
   b65ba:	2100      	movs	r1, #0
   b65bc:	2001      	movs	r0, #1
   b65be:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b65c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b65c4:	2200      	movs	r2, #0
   b65c6:	611c      	str	r4, [r3, #16]
   b65c8:	615a      	str	r2, [r3, #20]
   b65ca:	bd38      	pop	{r3, r4, r5, pc}
   b65cc:	2003e4fc 	.word	0x2003e4fc
   b65d0:	000b6dfd 	.word	0x000b6dfd
   b65d4:	000b6e14 	.word	0x000b6e14
   b65d8:	abcd330e 	.word	0xabcd330e
   b65dc:	e66d1234 	.word	0xe66d1234
   b65e0:	0005deec 	.word	0x0005deec

000b65e4 <strcmp>:
   b65e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   b65e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   b65ec:	2a01      	cmp	r2, #1
   b65ee:	bf28      	it	cs
   b65f0:	429a      	cmpcs	r2, r3
   b65f2:	d0f7      	beq.n	b65e4 <strcmp>
   b65f4:	1ad0      	subs	r0, r2, r3
   b65f6:	4770      	bx	lr

000b65f8 <strcpy>:
   b65f8:	4603      	mov	r3, r0
   b65fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   b65fe:	f803 2b01 	strb.w	r2, [r3], #1
   b6602:	2a00      	cmp	r2, #0
   b6604:	d1f9      	bne.n	b65fa <strcpy+0x2>
   b6606:	4770      	bx	lr

000b6608 <strlen>:
   b6608:	4603      	mov	r3, r0
   b660a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b660e:	2a00      	cmp	r2, #0
   b6610:	d1fb      	bne.n	b660a <strlen+0x2>
   b6612:	1a18      	subs	r0, r3, r0
   b6614:	3801      	subs	r0, #1
   b6616:	4770      	bx	lr

000b6618 <strncpy>:
   b6618:	b510      	push	{r4, lr}
   b661a:	3901      	subs	r1, #1
   b661c:	4603      	mov	r3, r0
   b661e:	b132      	cbz	r2, b662e <strncpy+0x16>
   b6620:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6624:	f803 4b01 	strb.w	r4, [r3], #1
   b6628:	3a01      	subs	r2, #1
   b662a:	2c00      	cmp	r4, #0
   b662c:	d1f7      	bne.n	b661e <strncpy+0x6>
   b662e:	441a      	add	r2, r3
   b6630:	2100      	movs	r1, #0
   b6632:	4293      	cmp	r3, r2
   b6634:	d100      	bne.n	b6638 <strncpy+0x20>
   b6636:	bd10      	pop	{r4, pc}
   b6638:	f803 1b01 	strb.w	r1, [r3], #1
   b663c:	e7f9      	b.n	b6632 <strncpy+0x1a>
	...

000b6640 <__register_exitproc>:
   b6640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6644:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6700 <__register_exitproc+0xc0>
   b6648:	4606      	mov	r6, r0
   b664a:	f8d8 0000 	ldr.w	r0, [r8]
   b664e:	461f      	mov	r7, r3
   b6650:	460d      	mov	r5, r1
   b6652:	4691      	mov	r9, r2
   b6654:	f000 f856 	bl	b6704 <__retarget_lock_acquire_recursive>
   b6658:	4b25      	ldr	r3, [pc, #148]	; (b66f0 <__register_exitproc+0xb0>)
   b665a:	681c      	ldr	r4, [r3, #0]
   b665c:	b934      	cbnz	r4, b666c <__register_exitproc+0x2c>
   b665e:	4c25      	ldr	r4, [pc, #148]	; (b66f4 <__register_exitproc+0xb4>)
   b6660:	601c      	str	r4, [r3, #0]
   b6662:	4b25      	ldr	r3, [pc, #148]	; (b66f8 <__register_exitproc+0xb8>)
   b6664:	b113      	cbz	r3, b666c <__register_exitproc+0x2c>
   b6666:	681b      	ldr	r3, [r3, #0]
   b6668:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b666c:	6863      	ldr	r3, [r4, #4]
   b666e:	2b1f      	cmp	r3, #31
   b6670:	dd07      	ble.n	b6682 <__register_exitproc+0x42>
   b6672:	f8d8 0000 	ldr.w	r0, [r8]
   b6676:	f000 f847 	bl	b6708 <__retarget_lock_release_recursive>
   b667a:	f04f 30ff 	mov.w	r0, #4294967295
   b667e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6682:	b34e      	cbz	r6, b66d8 <__register_exitproc+0x98>
   b6684:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6688:	b988      	cbnz	r0, b66ae <__register_exitproc+0x6e>
   b668a:	4b1c      	ldr	r3, [pc, #112]	; (b66fc <__register_exitproc+0xbc>)
   b668c:	b923      	cbnz	r3, b6698 <__register_exitproc+0x58>
   b668e:	f8d8 0000 	ldr.w	r0, [r8]
   b6692:	f000 f838 	bl	b6706 <__retarget_lock_release>
   b6696:	e7f0      	b.n	b667a <__register_exitproc+0x3a>
   b6698:	f44f 7084 	mov.w	r0, #264	; 0x108
   b669c:	f7fe fd60 	bl	b5160 <malloc>
   b66a0:	2800      	cmp	r0, #0
   b66a2:	d0f4      	beq.n	b668e <__register_exitproc+0x4e>
   b66a4:	2300      	movs	r3, #0
   b66a6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b66aa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b66ae:	6863      	ldr	r3, [r4, #4]
   b66b0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b66b4:	2201      	movs	r2, #1
   b66b6:	409a      	lsls	r2, r3
   b66b8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b66bc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b66c0:	4313      	orrs	r3, r2
   b66c2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b66c6:	2e02      	cmp	r6, #2
   b66c8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b66cc:	bf02      	ittt	eq
   b66ce:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b66d2:	4313      	orreq	r3, r2
   b66d4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b66d8:	6863      	ldr	r3, [r4, #4]
   b66da:	f8d8 0000 	ldr.w	r0, [r8]
   b66de:	1c5a      	adds	r2, r3, #1
   b66e0:	3302      	adds	r3, #2
   b66e2:	6062      	str	r2, [r4, #4]
   b66e4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b66e8:	f000 f80e 	bl	b6708 <__retarget_lock_release_recursive>
   b66ec:	2000      	movs	r0, #0
   b66ee:	e7c6      	b.n	b667e <__register_exitproc+0x3e>
   b66f0:	2003e7e8 	.word	0x2003e7e8
   b66f4:	2003e75c 	.word	0x2003e75c
   b66f8:	00000000 	.word	0x00000000
   b66fc:	000b5161 	.word	0x000b5161
   b6700:	2003e560 	.word	0x2003e560

000b6704 <__retarget_lock_acquire_recursive>:
   b6704:	4770      	bx	lr

000b6706 <__retarget_lock_release>:
   b6706:	4770      	bx	lr

000b6708 <__retarget_lock_release_recursive>:
   b6708:	4770      	bx	lr

000b670a <link_code_end>:
	...

000b670c <dynalib_user>:
   b670c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b671c:	0000 0000 754d 746c 7069 656c 6578 2e72     ....Multiplexer.
   b672c:	6573 2874 2029 203e 6176 756c 2065 756d     set() > value mu
   b673c:	7473 6220 2065 6e69 7420 6568 7220 6e61     st be in the ran
   b674c:	6567 6f20 2066 2e30 2e2e 3531 202c 6176     ge of 0...15, va
   b675c:	756c 2065 203d 6425 000a 6542 7473 6320     lue = %d..Best c
   b676c:	6c6f 656c 7463 6f69 206e 7369 2520 0a64     ollection is %d.
   b677c:	4200 6765 6e69 696e 676e 7720 7069 0a65     .Beginning wipe.
   b678c:	5700 7069 6465 2520 2f64 6425 000a 6957     .Wiped %d/%d..Wi
   b679c:	6570 6320 6d6f 6c70 7465 6465 000a 6425     pe completed..%d
   b67ac:	2020 4300 6e6f 656e 7463 6e69 2067 6f74       .Connecting to
   b67bc:	4d20 5451 2e54 2e2e 0020 7325 000a 6552      MQTT... .%s..Re
   b67cc:	7274 6979 676e 4d20 5451 2054 6f63 6e6e     trying MQTT conn
   b67dc:	6365 6974 6e6f 6920 206e 2035 6573 6f63     ection in 5 seco
   b67ec:	646e 2e73 0a2e 4d00 5451 2054 6f43 6e6e     nds....MQTT Conn
   b67fc:	6365 6574 2164 000a 6f43 6e75 6574 2064     ected!..Counted 
   b680c:	7075 4300 756f 746e 6465 6420 776f 006e     up.Counted down.
   b681c:	7250 676f 6172 6d6d 6465 6620 6e69 6567     Programmed finge
   b682c:	2072 6f70 2073 7825 000a 6e55 6e6b 776f     r pos %x..Unknow
   b683c:	206e 6f63 6d6d 6e61 0a64 5300 6d61 6c70     n command..Sampl
   b684c:	2065 756f 2074 666f 6220 756f 646e 0a73     e out of bounds.
   b685c:	4200 7365 2074 6863 696f 6563 203a 6425     .Best choice: %d
   b686c:	000a 7544 6972 7473 6172 006e 6f69 612e     ..Duristran.io.a
   b687c:	6164 7266 6975 2e74 6f63 006d 6961 5f6f     dafruit.com.aio_
   b688c:	5075 716c 3032 6130 4e41 6946 6e33 6959     uPlq200aANFi3nYi
   b689c:	6b5a 6e7a 6851 5635 584d 4544 4400 7275     ZkznQh5VMXDE.Dur
   b68ac:	7369 7274 6e61 662f 6565 7364 4f2f 5f4e     istran/feeds/ON_
   b68bc:	464f 0046                                   OFF.

000b68c0 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   b68c8:	482d 000b 48b9 000b 47d9 000b 4887 000b     -H...H...G...H..
   b68d8:	48c7 000b 47ed 000b 482f 000b 7244 706f     .H...G../H..Drop
   b68e8:	6570 2064 2061 6170 6b63 7465 5500 6b6e     ped a packet.Unk
   b68f8:	6f6e 6e77 6520 7272 726f 4d00 5451 0054     nown error.MQTT.
   b6908:	6146 6c69 6465 7420 206f 7573 7362 7263     Failed to subscr
   b6918:	6269 0065 6f43 6e6e 6365 6974 6e6f 6620     ibe.Connection f
   b6928:	6961 656c 0064 6854 2065 6553 7672 7265     ailed.The Server
   b6938:	6420 656f 2073 6f6e 2074 7573 7070 726f      does not suppor
   b6948:	2074 6874 2065 656c 6576 206c 666f 7420     t the level of t
   b6958:	6568 4d20 5451 2054 7270 746f 636f 6c6f     he MQTT protocol
   b6968:	7220 7165 6575 7473 6465 5400 6568 4320      requested.The C
   b6978:	696c 6e65 2074 6469 6e65 6974 6966 7265     lient identifier
   b6988:	6920 2073 6f63 7272 6365 2074 5455 2d46      is correct UTF-
   b6998:	2038 7562 2074 6f6e 2074 6c61 6f6c 6577     8 but not allowe
   b69a8:	2064 7962 7420 6568 5320 7265 6576 0072     d by the Server.
   b69b8:	6854 2065 514d 5454 7320 7265 6976 6563     The MQTT service
   b69c8:	6920 2073 6e75 7661 6961 616c 6c62 0065      is unavailable.
   b69d8:	6854 2065 6164 6174 6920 206e 6874 2065     The data in the 
   b69e8:	7375 7265 6e20 6d61 2065 726f 7020 7361     user name or pas
   b69f8:	7773 726f 2064 7369 6d20 6c61 6f66 6d72     sword is malform
   b6a08:	6465 4e00 746f 6120 7475 6f68 6972 657a     ed.Not authorize
   b6a18:	2064 6f74 6320 6e6f 656e 7463 4500 6378     d to connect.Exc
   b6a28:	6565 6564 2064 6572 6f63 6e6e 6365 2074     eeded reconnect 
   b6a38:	6172 6574 6c20 6d69 7469 202e 6c50 6165     rate limit. Plea
   b6a48:	6573 7420 7972 6120 6167 6e69 6c20 7461     se try again lat
   b6a58:	7265 002e 6f59 2075 6168 6576 6220 6565     er..You have bee
   b6a68:	206e 6162 6e6e 6465 6620 6f72 206d 6f63     n banned from co
   b6a78:	6e6e 6365 6974 676e 202e 6c50 6165 6573     nnecting. Please
   b6a88:	6320 6e6f 6174 7463 7420 6568 4d20 5451      contact the MQT
   b6a98:	2054 6573 7672 7265 6120 6d64 6e69 7369     T server adminis
   b6aa8:	7274 7461 726f 6620 726f 6d20 726f 2065     trator for more 
   b6ab8:	6564 6174 6c69 2e73 0000 0000               details.....

000b6ac4 <_ZTV13Adafruit_MQTT>:
	...
   b6ad4:	40a1 000b 40a1 000b 40a1 000b 40a1 000b     .@...@...@...@..
   b6ae4:	40a1 000b                                   .@..

000b6ae8 <CSWTCH.44>:
   b6ae8:	6908 000b 691c 000b 68f5 000b 692e 000b     .i...i...h...i..
   b6af8:	6973 000b 69b8 000b 69d8 000b 6a0b 000b     si...i...i...j..
   b6b08:	6a25 000b 6a5c 000b                         %j..\j..

000b6b10 <_ZTVN5spark13EthernetClassE>:
	...
   b6b18:	521f 000b 5215 000b 520b 000b 5201 000b     .R...R...R...R..
   b6b28:	51f5 000b 51e9 000b 5f89 000b 5f91 000b     .Q...Q..._..._..
   b6b38:	51dd 000b 51d5 000b 51cb 000b 51c1 000b     .Q...Q...Q...Q..
   b6b48:	5fc1 000b                                   ._..

000b6b4c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b6b54:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b6b64:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6b74 <_ZTV9IPAddress>:
	...
   b6b7c:	5615 000b 5605 000b 5607 000b               .V...V...V..

000b6b88 <_ZTV9USBSerial>:
	...
   b6b90:	5727 000b 578f 000b 5765 000b 5335 000b     'W...W..eW..5S..
   b6ba0:	5757 000b 5729 000b 5739 000b 5789 000b     WW..)W..9W...W..
   b6bb0:	5749 000b 5721 000b                         IW..!W..

000b6bb8 <_ZTV11USARTSerial>:
	...
   b6bc0:	5821 000b 588d 000b 5865 000b 5335 000b     !X...X..eX..5S..
   b6bd0:	5835 000b 5851 000b 5843 000b 585f 000b     5X..QX..CX.._X..
   b6be0:	5823 000b 5827 000b                         #X..'X..

000b6be8 <_ZTV7TwoWire>:
	...
   b6bf0:	58c5 000b 590f 000b 58e7 000b 58c7 000b     .X...Y...X...X..
   b6c00:	58ef 000b 58f7 000b 58ff 000b 5907 000b     .X...X...X...Y..
   b6c10:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b6c20:	2072 203d 6425 0000                         r = %d..

000b6c28 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6c30:	59c5 000b 59e9 000b 5ed3 000b 59f7 000b     .Y...Y...^...Y..
   b6c40:	59c9 000b                                   .Y..

000b6c44 <_ZTV9TCPClient>:
	...
   b6c4c:	5495 000b 54ad 000b 5941 000b 595b 000b     .T...T..AY..[Y..
   b6c5c:	5d69 000b 5985 000b 5bdf 000b 59b9 000b     i]...Y...[...Y..
   b6c6c:	5c71 000b 5ab1 000b 5c0d 000b 5e1d 000b     q\...Z...\...^..
   b6c7c:	5bad 000b 59bb 000b 596d 000b 59fd 000b     .[...Y..mY...Y..
   b6c8c:	5a91 000b                                   .Z..

000b6c90 <_ZTVN5spark9WiFiClassE>:
	...
   b6c98:	5f2b 000b 5f21 000b 5f17 000b 5ed9 000b     +_..!_..._...^..
   b6ca8:	545d 000b 5f0b 000b 5f89 000b 5f91 000b     ]T..._..._..._..
   b6cb8:	5eff 000b 5ef7 000b 5eed 000b 5ee3 000b     .^...^...^...^..
   b6cc8:	5fc1 000b                                   ._..

000b6ccc <_ZTVN5spark12NetworkClassE>:
	...
   b6cd4:	5f49 000b 5f53 000b 5f5d 000b 5f67 000b     I_..S_..]_..g_..
   b6ce4:	5f71 000b 5f7d 000b 5f89 000b 5f91 000b     q_..}_..._..._..
   b6cf4:	5f99 000b 5fa5 000b 5fad 000b 5fb7 000b     ._..._..._..._..
   b6d04:	5fc1 000b                                   ._..

000b6d08 <_ZSt7nothrow>:
	...

000b6d09 <_ZTSSt19_Sp_make_shared_tag>:
   b6d09:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b6d19:	6572 5f64 6174 0067 0000                     red_tag....

000b6d24 <_ZTISt19_Sp_make_shared_tag>:
   b6d24:	6d64 000b 6d09 000b                         dm...m..

000b6d2c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b6d2c:	6dc4 000b 6d38 000b 6de8 000b               .m..8m...m..

000b6d38 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6d38:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6d48:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6d58:	0045 0000                                   E...

000b6d5c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6d5c:	0000 0000 6d2c 000b 631d 000b 6331 000b     ....,m...c..1c..
   b6d6c:	64c5 000b 64c5 000b 639b 000b 62dd 000b     .d...d...c...b..
   b6d7c:	6383 000b 6345 000b 630f 000b               .c..Ec...c..

000b6d88 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6d88:	6dc4 000b 6d94 000b 6d2c 000b               .m...m..,m..

000b6d94 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6d94:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b6da4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b6db4:	666e 456f 0000 0000                         nfoE....

000b6dbc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b6dbc:	0000 0000 6d88 000b 63c5 000b 63d9 000b     .....m...c...c..
   b6dcc:	64c5 000b 64c5 000b 639b 000b 62dd 000b     .d...d...c...b..
   b6ddc:	6499 000b 6425 000b 63ed 000b               .d..%d...c..

000b6de8 <_ZTISt9type_info>:
   b6de8:	6d64 000b 6df0 000b                         dm...m..

000b6df0 <_ZTSSt9type_info>:
   b6df0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b6e00:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b6e10:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b6e20:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b6e30:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b6e40:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6e50:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6e60:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b6e70:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6e80:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6e91 <link_const_variable_data_end>:
   b6e91:	00          	.byte	0x00
	...

000b6e94 <link_constructors_location>:
   b6e94:	000b4751 	.word	0x000b4751
   b6e98:	000b5229 	.word	0x000b5229
   b6e9c:	000b5251 	.word	0x000b5251
   b6ea0:	000b5325 	.word	0x000b5325
   b6ea4:	000b5469 	.word	0x000b5469
   b6ea8:	000b5479 	.word	0x000b5479
   b6eac:	000b54c1 	.word	0x000b54c1
   b6eb0:	000b5f35 	.word	0x000b5f35
   b6eb4:	000b6099 	.word	0x000b6099

000b6eb8 <link_constructors_end>:
	...
